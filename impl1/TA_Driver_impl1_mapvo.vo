
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o TA_Driver_impl1_mapvo.vo -w -neg -gui -msgset C:/Project/Working/FPGA/HOME/Lattice/TA_Driver/Rev_3/promote.xml TA_Driver_impl1_map.ncd 
// Netlist created on Mon Apr 14 10:52:19 2025
// Netlist written on Mon Apr 14 10:52:22 2025
// Design is for device LCMXO2-2000HC
// Design is for package TQFP100
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module top ( rstn, system_reset_n, clk_25mhz, TA_pos_pwr_good, TA_neg_pwr_good, 
             trigger, TA_EE_shutdown, TA_OPT_shutdown, sck, mosi, ss, ldac_n, 
             laser_disable_led_n, TA_laser_disable, adc_sdo, adc_sck, 
             adc_convert, scl, sda, temp_scl, temp_sda, cw_compared, 
             pwm_compared, cw_over_current_led_n, pwm_over_current_led_n, 
             heartbeat_n, cw_active_led_n, modulate_active_led_n, mcu_gpio, 
             TA_spare1, TA_spare2, TA_spare3, TA_spare4, TA_gpio1, TA_gpio2, 
             TA_gpio3, TA_gpio4, OPT_gpio1, OPT_gpio2, OPT_gpio3, OPT_gpio4 );
  input  rstn, system_reset_n, clk_25mhz, TA_pos_pwr_good, TA_neg_pwr_good, 
         trigger, TA_EE_shutdown, TA_OPT_shutdown, adc_sdo, cw_compared, 
         pwm_compared;
  output sck, mosi, ss, ldac_n, laser_disable_led_n, TA_laser_disable, adc_sck, 
         adc_convert, temp_scl, temp_sda, cw_over_current_led_n, 
         pwm_over_current_led_n, heartbeat_n, cw_active_led_n, 
         modulate_active_led_n, mcu_gpio, TA_spare1, TA_spare2, TA_spare3, 
         TA_spare4, TA_gpio1, TA_gpio2, TA_gpio3, TA_gpio4, OPT_gpio1, 
         OPT_gpio2, OPT_gpio3, OPT_gpio4;
  inout  scl, sda;
  wire   pulse_count_20, pulse_active_N_1287_20, pulse_count_19, 
         pulse_active_N_1287_19, n8532, n8533, pulse_count_18, 
         pulse_active_N_1287_18, pulse_count_17, pulse_active_N_1287_17, n8531, 
         pulse_count_16, pulse_active_N_1287_16, pulse_count_15, 
         pulse_active_N_1287_15, n8530, pulse_count_14, pulse_active_N_1287_14, 
         pulse_count_13, pulse_active_N_1287_13, n8529, pulse_count_12, 
         pulse_active_N_1287_12, pulse_count_11, pulse_active_N_1287_11, n8528, 
         pulse_count_10, pulse_active_N_1287_10, pulse_count_9, 
         pulse_active_N_1287_9, \i2c_slave_top/n10057 , \i2c_slave_top/n10056 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_35 , clk_25mhz_c, n8527, 
         \i2c_slave_top/registers/static_control_5 , 
         \i2c_slave_top/registers/static_control_6 , pulse_count_8, 
         pulse_active_N_1287_8, pulse_count_7, pulse_active_N_1287_7, n8526, 
         pulse_count_6, pulse_active_N_1287_6, pulse_count_5, 
         pulse_active_N_1287_5, n8525, pulse_count_4, pulse_active_N_1287_4, 
         pulse_count_3, pulse_active_N_1287_3, n8524, pulse_count_2, 
         pulse_active_N_1287_2, pulse_count_1, pulse_active_N_1287_1, n8523, 
         pulse_count_0, period_0, \i2c_slave_top/n10055 , 
         \i2c_slave_top/n10053 , \i2c_slave_top/registers/static_control_3 , 
         \i2c_slave_top/registers/static_control_4 , pulse_count_23, 
         pulse_active_N_1260_23, \i2c_slave_top/n10051 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_70 , n8522, 
         \i2c_slave_top/registers/pwm_mon_current_limit_2 , n2702, 
         \i2c_slave_top/registers/pwm_mon_current_limit_3 , pulse_count_22, 
         pulse_active_N_1260_22, pulse_count_21, pulse_active_N_1260_21, 
         \i2c_slave_top/n10058 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_63 , n8521, 
         \i2c_slave_top/registers/pwm_mon_current_limit_14 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_15 , 
         pulse_active_N_1260_20, pulse_active_N_1260_19, n8520, 
         \i2c_slave_top/registers/pwm_mon_current_limit_12 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_13 , 
         pulse_active_N_1260_18, pulse_active_N_1260_17, n8519, 
         \i2c_slave_top/registers/pwm_mon_current_limit_10 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_11 , 
         pulse_active_N_1260_16, pulse_active_N_1260_15, 
         \i2c_slave_top/n10050 , \i2c_slave_top/n10062 , n8518, 
         \i2c_slave_top/registers/pwm_mon_current_limit_0 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_1 , 
         pulse_active_N_1260_14, pulse_active_N_1260_13, 
         \i2c_slave_top/registers/clk_25mhz_c_enable_145 , n8517, period_6, 
         period_7, pulse_active_N_1260_12, pulse_active_N_1260_11, n8516, 
         period_4, period_5, pulse_active_N_1260_10, pulse_active_N_1260_9, 
         n8515, period_2, period_3, pulse_active_N_1260_8, 
         pulse_active_N_1260_7, n8514, 
         \i2c_slave_top/registers/static_control_1 , 
         \i2c_slave_top/registers/static_control_2 , pulse_active_N_1260_6, 
         pulse_active_N_1260_5, n8513, 
         \i2c_slave_top/registers/pwm_mon_current_limit_8 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_9 , 
         pulse_active_N_1260_4, pulse_active_N_1260_3, n8512, 
         \i2c_slave_top/registers/pwm_mon_current_limit_6 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_7 , 
         pulse_active_N_1260_2, pulse_active_N_1260_1, n8511, 
         \i2c_slave_top/registers/pwm_mon_current_limit_4 , 
         \i2c_slave_top/registers/pwm_mon_current_limit_5 , pulse_width_0, 
         period_1, \driver_control/n103 , \driver_control/n104 , 
         \driver_control/clk_count_3__N_891_enable_27 , \driver_control/n5228 , 
         \driver_control/clk_count[3] , \driver_control/n8483 , 
         \driver_control/n8484 , \driver_control/n105 , \driver_control/n106 , 
         \driver_control/n8482 , \driver_control/n107 , \driver_control/n108 , 
         \driver_control/n8481 , \driver_control/n109 , \driver_control/n110 , 
         \driver_control/n8480 , \driver_control/n111 , \driver_control/n112 , 
         \driver_control/n8479 , \driver_control/force_trigger_count_6 , 
         \driver_control/force_trigger_count_5 , 
         \driver_control/n119_adj_1519 , \driver_control/n120_adj_1518 , 
         \driver_control/n518 , \driver_control/n8451 , \driver_control/n8452 , 
         \driver_control/n113 , \driver_control/n114 , \driver_control/n8478 , 
         \driver_control/force_trigger_count_4 , 
         \driver_control/force_trigger_count_3 , 
         \driver_control/n121_adj_1521 , \driver_control/n122_adj_1520 , 
         \driver_control/n8450 , \driver_control/n115 , \driver_control/n116 , 
         \driver_control/n8477 , \driver_control/force_trigger_count_2 , 
         \driver_control/force_trigger_count_1 , 
         \driver_control/n123_adj_1523 , \driver_control/n124_adj_1522 , 
         \driver_control/n8449 , \driver_control/force_trigger_count_0 , 
         \driver_control/n125 , \driver_control/n117 , \driver_control/n118 , 
         \driver_control/n8476 , \driver_control/n119 , \driver_control/n120 , 
         \driver_control/n8475 , \driver_control/n121 , \driver_control/n122 , 
         \driver_control/n8474 , \driver_control/n123 , \driver_control/n124 , 
         \driver_control/n8473 , \driver_control/n125_adj_1524 , 
         \driver_control/total_count_15 , \driver_control/n8472 , 
         \driver_control/total_count_15_N_1152_15 , \driver_control/n22 , 
         \driver_control/n8510 , \driver_control/n2 , \driver_control/n3 , 
         \driver_control/n23 , \driver_control/n24 , \driver_control/n8509 , 
         \driver_control/total_count_14 , \driver_control/total_count_13 , 
         \driver_control/n8471 , \driver_control/total_count_15_N_1152_13 , 
         \driver_control/total_count_15_N_1152_14 , \driver_control/n4 , 
         \driver_control/n25 , \driver_control/force_trigger_count_d_2 , 
         \driver_control/force_trigger_count_d_19 , \driver_control/n8508 , 
         \driver_control/pulse_active_N_1260_24 , 
         \driver_control/force_trigger_count_d2_19 , 
         \driver_control/force_trigger_count_d2_2 , 
         \driver_control/total_count_12 , \driver_control/total_count_11 , 
         \driver_control/n8470 , \driver_control/total_count_15_N_1152_11 , 
         \driver_control/total_count_15_N_1152_12 , pulse_width_23, 
         pulse_width_22, \driver_control/force_trigger_count_d_18 , 
         \driver_control/force_trigger_count_d_17 , \driver_control/n8507 , 
         \driver_control/force_trigger_count_d2_17 , 
         \driver_control/force_trigger_count_d2_18 , pulse_width_21, 
         pulse_width_20, \driver_control/force_trigger_count_d_16 , 
         \driver_control/force_trigger_count_d_15 , \driver_control/n8506 , 
         \driver_control/force_trigger_count_d2_15 , 
         \driver_control/force_trigger_count_d2_16 , 
         \driver_control/total_count_10 , \driver_control/total_count_9 , 
         \driver_control/n8469 , \driver_control/total_count_15_N_1152_9 , 
         \driver_control/total_count_15_N_1152_10 , 
         \driver_control/total_count_8 , \driver_control/total_count_7 , 
         \driver_control/n8468 , \driver_control/total_count_15_N_1152_7 , 
         \driver_control/total_count_15_N_1152_8 , 
         \driver_control/total_count_6 , \driver_control/total_count_5 , 
         \driver_control/n8467 , \driver_control/total_count_15_N_1152_5 , 
         \driver_control/total_count_15_N_1152_6 , pulse_width_19, 
         pulse_width_18, \driver_control/force_trigger_count_d_14 , 
         \driver_control/force_trigger_count_d_13 , \driver_control/n8505 , 
         \driver_control/force_trigger_count_d2_13 , 
         \driver_control/force_trigger_count_d2_14 , 
         \driver_control/total_count_4 , \driver_control/total_count_3 , 
         \driver_control/n8466 , \driver_control/total_count_15_N_1152_3 , 
         \driver_control/total_count_15_N_1152_4 , \driver_control/count_7 , 
         \driver_control/period_d_3 , \driver_control/period_d_23 , 
         \driver_control/n8554 , \driver_control/n239 , 
         \driver_control/period_d2_23 , \driver_control/period_d2_3 , 
         \driver_control/total_count_2 , \driver_control/total_count_1 , 
         \driver_control/n8465 , \driver_control/total_count_15_N_1152_1 , 
         \driver_control/total_count_15_N_1152_2 , \driver_control/count_6 , 
         \driver_control/count_5 , \driver_control/period_d_22 , 
         \driver_control/period_d_21 , \driver_control/n8553 , 
         \driver_control/n241 , \driver_control/period_d2_21 , 
         \driver_control/n240 , \driver_control/period_d2_22 , pulse_width_17, 
         pulse_width_16, \driver_control/force_trigger_count_d_12 , 
         \driver_control/force_trigger_count_d_11 , \driver_control/n8504 , 
         \driver_control/force_trigger_count_d2_11 , 
         \driver_control/force_trigger_count_d2_12 , \driver_control/count_4 , 
         \driver_control/count_3 , \driver_control/period_d_20 , 
         \driver_control/period_d_2 , \driver_control/n8552 , 
         \driver_control/n243 , \driver_control/period_d2_2 , 
         \driver_control/n242 , \driver_control/period_d2_20 , 
         \driver_control/total_count_0 , \driver_control/n4538 , 
         \driver_control/n12 , \driver_control/total_count_15_N_1152_0 , 
         \driver_control/count_2 , \driver_control/count_1 , 
         \driver_control/period_d_19 , \driver_control/period_d_18 , 
         \driver_control/n8551 , \driver_control/n245 , 
         \driver_control/period_d2_18 , \driver_control/n244 , 
         \driver_control/period_d2_19 , pulse_width_15, pulse_width_14, 
         \driver_control/mosi_temp , \driver_control/n8503 , TA_spare2_c, 
         \driver_control/count_0 , \driver_control/period_d_17 , 
         \driver_control/period_d_16 , \driver_control/period_d2_16 , 
         \driver_control/n246 , \driver_control/period_d2_17 , pulse_width_13, 
         pulse_width_12, period_9, period_8, \driver_control/n8502 , 
         \driver_control/period_d_8 , \driver_control/period_d_9 , 
         pulse_width_11, pulse_width_10, \driver_control/n8501 , 
         \driver_control/period_d_6 , \driver_control/period_d_7 , 
         \driver_control/trigger_count_7 , \driver_control/n38 , TA_spare4_c, 
         \driver_control/n5220 , \driver_control/n8464 , 
         \driver_control/trigger_count_6 , \driver_control/trigger_count_5 , 
         \driver_control/n39 , \driver_control/n40 , \driver_control/n8463 , 
         pulse_width_9, pulse_width_8, 
         \driver_control/force_trigger_count_d_6 , 
         \driver_control/force_trigger_count_d_5 , \driver_control/n8500 , 
         \driver_control/force_trigger_count_d2_5 , 
         \driver_control/force_trigger_count_d2_6 , 
         \driver_control/force_trigger_count_d2_23 , 
         \driver_control/force_trigger_N_1324 , static_control_7, 
         \driver_control/n8546 , \driver_control/force_trigger , 
         \driver_control/trigger_count_4 , \driver_control/n5 , 
         \driver_control/n41 , \driver_control/n42 , \driver_control/n8462 , 
         \driver_control/n6 , \driver_control/n7 , \driver_control/n43 , 
         \driver_control/n44 , \driver_control/n8461 , pulse_width_7, 
         pulse_width_6, \driver_control/force_trigger_count_d_4 , 
         \driver_control/force_trigger_count_d_3 , \driver_control/n8499 , 
         \driver_control/force_trigger_count_d2_3 , 
         \driver_control/force_trigger_count_d2_4 , 
         \driver_control/force_trigger_count_d2_22 , 
         \driver_control/force_trigger_count_d2_21 , period_17, period_16, 
         \driver_control/n8545 , \driver_control/force_trigger_count_d2_20 , 
         period_15, period_14, \driver_control/n8544 , 
         \driver_control/period_d_14 , \driver_control/period_d_15 , 
         pulse_width_5, pulse_width_4, 
         \driver_control/force_trigger_count_d_23 , 
         \driver_control/force_trigger_count_d_22 , \driver_control/n8498 , 
         \driver_control/n8_adj_1543 , \driver_control/n45 , period_13, 
         period_12, \driver_control/n8543 , \driver_control/period_d_12 , 
         \driver_control/period_d_13 , \driver_control/period_d2_15 , 
         period_11, period_10, \driver_control/n8542 , 
         \driver_control/period_d_10 , \driver_control/period_d_11 , 
         \driver_control/force_trigger_count_23 , 
         \driver_control/n102_adj_1541 , \driver_control/n8460 , pulse_width_3, 
         pulse_width_2, \driver_control/force_trigger_count_d_21 , 
         \driver_control/force_trigger_count_d_20 , \driver_control/n8497 , 
         pulse_width_1, \driver_control/period_d_4 , 
         \driver_control/period_d_5 , drive_current_9, drive_current_8, 
         dynamic_control_0, \driver_control/n8496 , pulse_active_N_1287_24, 
         \driver_control/drive_current_reg_8 , 
         \driver_control/drive_current_reg_9 , period_23, period_22, 
         drive_current_7, drive_current_6, \driver_control/n8495 , 
         pulse_active_N_1287_22, \driver_control/drive_current_reg_6 , 
         pulse_active_N_1287_23, \driver_control/drive_current_reg_7 , 
         \driver_control/period_d2_14 , \driver_control/period_d2_13 , 
         \driver_control/n8541 , \driver_control/period_d_0 , 
         \driver_control/period_d_1 , \driver_control/force_trigger_count_22 , 
         \driver_control/force_trigger_count_21 , 
         \driver_control/n103_adj_1540 , \driver_control/n104_adj_1539 , 
         \driver_control/n8459 , period_21, period_20, drive_current_5, 
         drive_current_4, \driver_control/n8494 , 
         \driver_control/drive_current_reg_4 , pulse_active_N_1287_21, 
         \driver_control/drive_current_reg_5 , 
         \driver_control/force_trigger_count_20 , 
         \driver_control/force_trigger_count_19 , 
         \driver_control/n105_adj_1538 , \driver_control/n106_adj_1537 , 
         \driver_control/n8458 , period_19, period_18, drive_current_3, 
         drive_current_2, \driver_control/n8493 , 
         \driver_control/drive_current_reg_2 , 
         \driver_control/drive_current_reg_3 , \driver_control/period_d2_12 , 
         \driver_control/period_d2_11 , \driver_control/n8540 , 
         \driver_control/period_d2_8 , \driver_control/period_d2_9 , 
         drive_current_15, drive_current_14, \driver_control/n8492 , 
         \driver_control/drive_current_reg_14 , 
         \driver_control/drive_current_reg_15 , 
         \driver_control/force_trigger_count_18 , 
         \driver_control/force_trigger_count_17 , 
         \driver_control/n107_adj_1536 , \driver_control/n108_adj_1535 , 
         \driver_control/n8457 , drive_current_13, drive_current_12, 
         \driver_control/n8491 , \driver_control/drive_current_reg_12 , 
         \driver_control/drive_current_reg_13 , drive_current_11, 
         drive_current_10, \driver_control/n8490 , 
         \driver_control/drive_current_reg_10 , 
         \driver_control/drive_current_reg_11 , \driver_control/period_d2_10 , 
         \driver_control/force_trigger_count_d2_10 , 
         \driver_control/force_trigger_count_d2_9 , \driver_control/n8539 , 
         \driver_control/period_d2_6 , \driver_control/period_d2_7 , 
         \driver_control/force_trigger_count_d2_8 , 
         \driver_control/force_trigger_count_d2_7 , \driver_control/n8538 , 
         drive_current_1, drive_current_0, \driver_control/n8489 , 
         \driver_control/drive_current_reg_0 , 
         \driver_control/drive_current_reg_1 , \driver_control/n8488 , 
         \driver_control/n8487 , \driver_control/force_trigger_count_16 , 
         \driver_control/force_trigger_count_15 , 
         \driver_control/n109_adj_1534 , \driver_control/n110_adj_1533 , 
         \driver_control/n8456 , \driver_control/force_trigger_count_14 , 
         \driver_control/force_trigger_count_13 , 
         \driver_control/n111_adj_1532 , \driver_control/n112_adj_1531 , 
         \driver_control/n8455 , \driver_control/n8486 , 
         \driver_control/force_trigger_count_12 , 
         \driver_control/force_trigger_count_11 , 
         \driver_control/n113_adj_1530 , \driver_control/n114_adj_1529 , 
         \driver_control/n8454 , \driver_control/force_trigger_count_10 , 
         \driver_control/force_trigger_count_9 , 
         \driver_control/n115_adj_1528 , \driver_control/n116_adj_1527 , 
         \driver_control/n8453 , \driver_control/period_d2_5 , 
         \driver_control/n8537 , \driver_control/n8485 , 
         \driver_control/period_d2_0 , \driver_control/period_d2_1 , 
         \driver_control/period_d2_4 , \driver_control/n8536 , 
         \driver_control/force_trigger_count_8 , 
         \driver_control/force_trigger_count_7 , 
         \driver_control/n117_adj_1526 , \driver_control/n118_adj_1525 , 
         \driver_control/clk_25mhz_c_enable_147 , \driver_control/n5202 , 
         \driver_control/data_8 , \driver_control/data_9 , 
         \driver_control/force_trigger_count_d2_1 , \driver_control/n8535 , 
         \driver_control/n102 , \driver_control/force_trigger_count_d2_0 , 
         \i2c_slave_top/registers/addr_i_7 , \i2c_slave_top/registers/n8440 , 
         \i2c_slave_top/registers/addr_i_7_N_838_7 , 
         \i2c_slave_top/registers/n10111 , \i2c_slave_top/registers/n10106 , 
         \i2c_slave_top/registers/n8439 , 
         \i2c_slave_top/registers/addr_i_7_N_838_5 , 
         \i2c_slave_top/registers/addr_i_7_N_838_6 , 
         \i2c_slave_top/registers/n10100 , \i2c_slave_top/registers/addr_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i , 
         \i2c_slave_top/registers/n8437 , 
         \i2c_slave_top/registers/addr_i_7_N_838_1 , 
         \i2c_slave_top/registers/addr_i_7_N_838_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i 
         , \i2c_slave_top/registers/n8438 , \i2c_slave_top/registers/n10107 , 
         \i2c_slave_top/registers/addr_i_3 , 
         \i2c_slave_top/registers/addr_i_7_N_838_3 , 
         \i2c_slave_top/registers/addr_i_7_N_838_4 , 
         \i2c_slave_top/registers/n10101 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i 
         , \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i 
         , \i2c_slave_top/registers/addr_i_7_N_838_0 , n8534, n2729, 
         \adc_control/count_7 , \adc_control/n248 , 
         \adc_control/adc_sck_temp_enable_39 , \adc_control/n6459 , 
         \adc_control/adc_sck_temp , \adc_control/n8558 , 
         \adc_control/count_6 , \adc_control/count_5 , \adc_control/n249 , 
         \adc_control/n250 , \adc_control/n8557 , \adc_control/count_4 , 
         \adc_control/count_3 , \adc_control/n251 , \adc_control/n252 , 
         \adc_control/n8556 , \adc_control/count_2 , count_1, 
         \adc_control/n253 , \adc_control/n254 , \adc_control/n8555 , 
         \adc_control/count_0 , \adc_control/n255 , 
         \adc_control/convert_count_7 , \adc_control/n38 , 
         \adc_control/clk_25mhz_c_enable_172 , \adc_control/n5255 , 
         \adc_control/n8550 , \adc_control/convert_count_6 , 
         \adc_control/convert_count_5 , \adc_control/n39 , \adc_control/n40 , 
         \adc_control/n8549 , \adc_control/convert_count_4 , 
         \adc_control/convert_count_3 , \adc_control/n41 , \adc_control/n42 , 
         \adc_control/n8548 , \adc_control/convert_count_2 , 
         \adc_control/convert_count_1 , \adc_control/n43 , \adc_control/n44 , 
         \adc_control/n8547 , \adc_control/convert_count_0 , \adc_control/n45 , 
         \heart_beat/prescale[15] , \heart_beat/n70 , 
         \driver_control/force_trigger_count_d_8 , \heart_beat/n8448 , 
         \heart_beat/n2 , \heart_beat/n3 , \heart_beat/n71 , \heart_beat/n72 , 
         \heart_beat/n8447 , \heart_beat/n4 , \heart_beat/n5 , 
         \heart_beat/n73 , \heart_beat/n74 , \heart_beat/n8446 , 
         \heart_beat/n6 , \heart_beat/n7 , \heart_beat/n75 , \heart_beat/n76 , 
         \heart_beat/n8445 , heartbeat_n_c_7, \heart_beat/n38 , 
         \heart_beat/n8436 , \heart_beat/n8_adj_1500 , \heart_beat/n9 , 
         \heart_beat/n77 , \heart_beat/n78 , \heart_beat/n8444 , 
         \heart_beat/n10 , \heart_beat/n11 , \heart_beat/n79 , 
         \heart_beat/n80 , \heart_beat/n8443 , \heart_beat/n12 , 
         \heart_beat/n13 , \heart_beat/n81 , \heart_beat/n82 , 
         \heart_beat/n8442 , \heart_beat/n14 , \heart_beat/n15 , 
         \heart_beat/n83 , \heart_beat/n84 , \heart_beat/n8441 , 
         \heart_beat/n4_adj_1503 , \heart_beat/n5_adj_1504 , \heart_beat/n41 , 
         \heart_beat/n42 , \heart_beat/n8434 , \heart_beat/n8435 , 
         \heart_beat/n16 , \heart_beat/n85 , 
         \driver_control/force_trigger_count_d_7 , \heart_beat/n6_adj_1505 , 
         \heart_beat/n7_adj_1506 , \heart_beat/n43 , \heart_beat/n44 , 
         \heart_beat/n8433 , \heart_beat/n8 , \heart_beat/n45 , 
         \heart_beat/n2_adj_1501 , \heart_beat/n3_adj_1502 , \heart_beat/n39 , 
         \heart_beat/n40 , \driver_control/sck_temp , 
         \driver_control/sck_temp_N_1251 , 
         \driver_control/force_trigger_count_d_10 , TA_spare1_c, 
         \driver_control/n6_adj_1542 , n10281, 
         \driver_control/trigger_ext_N_1318 , \adc_control/data_ready , 
         \adc_control/state_0 , \adc_control/state_3 , \adc_control/state_2 , 
         \adc_control/n9626 , \adc_control/state_1 , adc_sck_c, 
         \n10280\002/BUF0 , \n10280\003/BUF0 , 
         \adc_control/adc_sck_temp_enable_31 , \adc_control/capture_state_0 , 
         \adc_control/capture_state_1 , \adc_control/n12 , \adc_control/n16 , 
         \adc_control/n3008 , \adc_control/n10030 , 
         \adc_control/adc_sck_temp_enable_18 , \adc_control/capture_state_2 , 
         \adc_control/capture_state_3 , \adc_control/n1414 , 
         \adc_control/clk_25mhz_c_enable_175 , \adc_control/n10108 , 
         \adc_control/sck_count_0 , \adc_control/sck_count_1 , 
         \adc_control/n24 , \adc_control/n25 , 
         \adc_control/clk_25mhz_c_enable_173 , \adc_control/n5252 , 
         \adc_control/sck_count_3 , \adc_control/sck_count_2 , 
         \adc_control/n22 , \adc_control/n23 , \adc_control/n10279 , 
         \adc_control/adc_convert_N_1490 , \adc_control/state_3_N_1368_0 , 
         \adc_control/clk_25mhz_c_enable_146 , \adc_control/data_ready_N_1495 , 
         \adc_control/n1466 , \adc_control/n9631 , \adc_control/n9630 , 
         \adc_control/voltage_data_1 , adc_sdo_c, n10016, \adc_control/n9632 , 
         \adc_control/adc_sck_temp_enable_29 , \adc_control/voltage_data_2 , 
         \adc_control/n10033 , \adc_control/n91 , \adc_control/n9633 , 
         \adc_control/voltage_data_3 , \adc_control/n9634 , 
         \adc_control/adc_sck_temp_enable_20 , adc_sck_temp_enable_28, 
         \adc_control/voltage_data_5 , \adc_control/n9636 , 
         \adc_control/voltage_data_7 , \adc_control/voltage_data_6 , 
         \adc_control/n9638 , \adc_control/n9637 , 
         \adc_control/adc_sck_temp_enable_23 , \adc_control/voltage_data_8 , 
         \adc_control/n9639 , \adc_control/adc_sck_temp_enable_27 , 
         \adc_control/voltage_data_9 , \adc_control/n10032 , 
         \adc_control/n9640 , \adc_control/voltage_data_11 , 
         \adc_control/voltage_data_10 , \adc_control/n9642 , 
         \adc_control/n9641 , \adc_control/voltage_data_12 , 
         \adc_control/n9643 , \adc_control/n10103 , 
         \adc_control/voltage_data_13 , \adc_control/n9644 , adc_convert_c, 
         \adc_control/n9627 , \n10280\001/BUF0 , \n10280\000/BUF0 , 
         adc_voltage_data_14, adc_voltage_data_15, 
         \i2c_slave_top/i2cslave_controller_top/addr_ack1_i , count_i_3__N_128, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9584 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10085 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9464 , 
         n10095, n10096, d_ff, reset_n, stop_detect_i, n10061, n10113, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10022 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10047 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9340 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1030 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 
         , data_buffer_i_1, \i2c_slave_top/data_buffer_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i 
         , \i2c_slave_top/registers/clk_25mhz_c_enable_112 , 
         \i2c_slave_top/data_buffer_i_4 , \i2c_slave_top/data_buffer_i_3 , 
         \i2c_slave_top/data_buffer_i_6 , \i2c_slave_top/data_buffer_i_5 , 
         \i2c_slave_top/data_buffer_i_8 , \i2c_slave_top/data_buffer_i_7 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_105 , 
         \i2c_slave_top/registers/n1583 , \i2c_slave_top/registers/n1580 , 
         \i2c_slave_top/registers/n1578 , \i2c_slave_top/registers/n1577 , 
         \driver_control/all_trigger , \driver_control/all_trigger_d , 
         \driver_control/force_trigger_ext , \driver_control/n8290 , 
         \driver_control/count_7_N_1212_1 , \driver_control/count_7_N_1212_0 , 
         \driver_control/sck_temp_enable_28 , state_3__N_879, 
         \driver_control/count_7_N_1212_3 , \driver_control/count_7_N_1212_2 , 
         \driver_control/count_7_N_1212_5 , \driver_control/count_7_N_1212_4 , 
         \driver_control/count_7_N_1212_7 , \driver_control/count_7_N_1212_6 , 
         \driver_control/cstate_0 , \driver_control/cstate_3 , 
         \driver_control/cstate_3_N_1168_1 , \driver_control/n3200 , 
         \driver_control/n9399 , \driver_control/clk_25mhz_c_enable_171 , 
         \driver_control/n9468 , \driver_control/data_valid_reset , 
         \driver_control/n4996 , \driver_control/clk_25mhz_c_enable_180 , 
         \n10281\009/BUF1 , \driver_control/data_21 , \driver_control/state_3 , 
         \driver_control/state_1 , \driver_control/data_5 , 
         \driver_control/data_temp_5 , \driver_control/data_4 , 
         \driver_control/n2489 , \driver_control/n8561 , 
         \driver_control/sck_temp_enable_21 , \driver_control/data_temp_6 , 
         \driver_control/data_7 , \driver_control/data_temp_7 , 
         \driver_control/data_6 , \driver_control/n2487 , 
         \driver_control/n2488 , \driver_control/data_temp_8 , 
         \driver_control/data_temp_9 , \driver_control/n2485 , 
         \driver_control/n2486 , \driver_control/data_temp_10 , 
         \driver_control/data_11 , \driver_control/data_temp_11 , 
         \driver_control/data_10 , \driver_control/n2483 , 
         \driver_control/n2484 , \driver_control/data_temp_12 , 
         \driver_control/data_13 , \driver_control/data_temp_13 , 
         \driver_control/data_12 , \driver_control/n2481 , 
         \driver_control/n2482 , \driver_control/data_temp_14 , 
         \driver_control/data_15 , \driver_control/data_temp_15 , 
         \driver_control/data_14 , \driver_control/n2479 , 
         \driver_control/n2480 , \driver_control/data_temp_16 , 
         \driver_control/data_17 , \driver_control/data_temp_17 , 
         \driver_control/data_16 , \driver_control/n2477 , 
         \driver_control/n2478 , \driver_control/data_temp_18 , 
         \driver_control/data_19 , \driver_control/data_temp_19 , 
         \driver_control/data_18 , \driver_control/n2475 , 
         \driver_control/n2476 , \driver_control/data_temp_20 , 
         \driver_control/data_temp_21 , \driver_control/n2473 , 
         \driver_control/n2474 , \driver_control/data_temp_22 , 
         \driver_control/n2472 , \driver_control/data_temp_23 , 
         \driver_control/n10084 , \driver_control/clk_25mhz_c_enable_181 , 
         \driver_control/force_trigger_d , 
         \driver_control/force_trigger_ext_N_1349 , \driver_control/index , 
         \driver_control/ldac_temp , \driver_control/ldac_temp_d , 
         \driver_control/load_dac_register , \driver_control/index_N_1348 , 
         \driver_control/force_trigger_count_d_0 , pulse_state_3, 
         \driver_control/pulse_state_1 , \driver_control/n10005 , 
         \driver_control/n1231 , \driver_control/clk_count_3__N_891_enable_3 , 
         \driver_control/force_trigger_count_d_1 , 
         \driver_control/mosi_temp_N_1335 , 
         \driver_control/sck_temp_enable_30 , \driver_control/n9441 , 
         \driver_control/clk_count_3__N_891_enable_22 , 
         \driver_control/n6_adj_1545 , \driver_control/n5_adj_1544 , 
         \driver_control/n9401 , \driver_control/ss_temp , 
         \driver_control/n9625 , \driver_control/sck_temp_enable_29 , 
         \driver_control/n31 , \driver_control/n8559 , 
         \driver_control/total_count_15_N_980_1 , 
         \driver_control/total_count_15_N_980_0 , 
         \driver_control/total_count_15_N_980_3 , 
         \driver_control/total_count_15_N_980_2 , 
         \driver_control/total_count_15_N_980_5 , 
         \driver_control/total_count_15_N_980_4 , 
         \driver_control/total_count_15_N_980_7 , 
         \driver_control/total_count_15_N_980_6 , 
         \driver_control/total_count_15_N_980_9 , 
         \driver_control/total_count_15_N_980_8 , 
         \driver_control/total_count_15_N_980_11 , 
         \driver_control/total_count_15_N_980_10 , 
         \driver_control/total_count_15_N_980_13 , 
         \driver_control/total_count_15_N_980_12 , 
         \driver_control/total_count_15_N_980_15 , 
         \driver_control/total_count_15_N_980_14 , 
         \i2c_slave_top/registers/dynamic_control_15 , 
         \i2c_slave_top/registers/n10018 , \i2c_slave_top/registers/n10007 , 
         \i2c_slave_top/n10081 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_0 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_174 , 
         \i2c_slave_top/registers/n17 , \i2c_slave_top/addr_start_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i 
         , \i2c_slave_top/registers/clk_N_1249_enable_8 , 
         \i2c_slave_top/addr_i_7__N_594 , \i2c_slave_top/addr_start_0 , 
         \i2c_slave_top/addr_start_3 , \i2c_slave_top/addr_i_7__N_618 , 
         \i2c_slave_top/addr_start_2 , \i2c_slave_top/addr_start_5 , 
         \i2c_slave_top/addr_i_7__N_590 , \i2c_slave_top/addr_start_4 , 
         \i2c_slave_top/addr_start_6 , \i2c_slave_top/addr_i_7__N_589 , 
         \i2c_slave_top/addr_start_7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10074 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9348 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9160 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10110 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9352 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9349 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9580 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10059 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9351 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9350 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9353 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10060 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9347 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 
         , \i2c_slave_top/registers/n1644 , \i2c_slave_top/registers/n1595 , 
         \i2c_slave_top/registers/static_control_0 , 
         \i2c_slave_top/registers/n1749 , \i2c_slave_top/registers/n9677 , 
         \i2c_slave_top/registers/n1739 , \i2c_slave_top/registers/n1719 , 
         \i2c_slave_top/registers/n5138 , \i2c_slave_top/registers/n9600 , 
         \i2c_slave_top/data_out_0 , \i2c_slave_top/registers/n1582 , 
         \i2c_slave_top/registers/n1643 , \i2c_slave_top/registers/n1594 , 
         \i2c_slave_top/registers/n1748 , \i2c_slave_top/registers/n1738 , 
         \i2c_slave_top/registers/n1718 , \i2c_slave_top/registers/n9603 , 
         \i2c_slave_top/data_out_1 , \i2c_slave_top/registers/n1581 , 
         \i2c_slave_top/registers/n1642 , \i2c_slave_top/registers/n1593 , 
         \i2c_slave_top/registers/n1747 , \i2c_slave_top/registers/n1737 , 
         \i2c_slave_top/registers/n1717 , \i2c_slave_top/registers/n9606 , 
         \i2c_slave_top/data_out_2 , \i2c_slave_top/registers/n1641 , 
         \i2c_slave_top/registers/n1592 , \i2c_slave_top/registers/n1746 , 
         \i2c_slave_top/registers/n1736 , \i2c_slave_top/registers/n1716 , 
         \i2c_slave_top/registers/n9609 , \i2c_slave_top/data_out_3 , 
         \i2c_slave_top/registers/n1579 , \i2c_slave_top/registers/n1640 , 
         \i2c_slave_top/registers/n1591 , \i2c_slave_top/registers/n1745 , 
         \i2c_slave_top/registers/n1735 , \i2c_slave_top/registers/n1715 , 
         \i2c_slave_top/registers/n9612 , \i2c_slave_top/data_out_4 , 
         \i2c_slave_top/registers/n1639 , \i2c_slave_top/registers/n1590 , 
         \i2c_slave_top/registers/n1744 , \i2c_slave_top/registers/n1734 , 
         \i2c_slave_top/registers/n1714 , \i2c_slave_top/registers/n9615 , 
         \i2c_slave_top/data_out_5 , \i2c_slave_top/registers/n1638 , 
         \i2c_slave_top/registers/n1589 , \i2c_slave_top/registers/n1743 , 
         \i2c_slave_top/registers/n1733 , \i2c_slave_top/registers/n1713 , 
         \i2c_slave_top/registers/n9618 , \i2c_slave_top/data_out_6 , 
         \i2c_slave_top/registers/n1576 , \i2c_slave_top/registers/n1637 , 
         \i2c_slave_top/registers/n1588 , \i2c_slave_top/registers/n1742 , 
         \i2c_slave_top/registers/n1732 , \i2c_slave_top/registers/n1712 , 
         \i2c_slave_top/registers/n9621 , \i2c_slave_top/data_out_7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9578 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_342 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3052 , 
         scl_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_72 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 , 
         \driver_control/force_trigger_count_d_9 , 
         \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_70 , 
         rw_mode_i, \i2c_slave_top/i2cslave_controller_top/wr_done_i_N_417 , 
         sda_out, 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_72 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_70 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10112 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10073 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10010 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2978 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5026 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2864 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5103 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2862 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2863 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10044 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9966 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9357 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10027 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3822 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9446 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9897 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n379 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10048 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8789 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9564 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i 
         , \n10281\000/BUF1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3823 , 
         \i2c_slave_top/i2cslave_controller_top/out_n__inv , 
         start_detect_i_N_339, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n570 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10029 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4601 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_349 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3162 , 
         n10075, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9576 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10024 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9069 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9536 , 
         \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n , 
         \i2c_slave_top/i2cslave_controller_top/i_sda , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9586 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n35 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1510 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_284 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_derived_7_enable_1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10039 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10021 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10006 , 
         \i2c_slave_top/registers/byte_cnt_0 , 
         \i2c_slave_top/registers/byte_cnt_1 , 
         \i2c_slave_top/registers/state_0 , \i2c_slave_top/registers/state_1 , 
         \i2c_slave_top/registers/n9628 , 
         \i2c_slave_top/registers/data_vld_dly , 
         \i2c_slave_top/registers/data_vld_dly_enable_2 , n10280, 
         \i2c_slave_top/registers/data_vld_dly_enable_3 , 
         \i2c_slave_top/registers/count_0 , \i2c_slave_top/registers/count_1 , 
         \i2c_slave_top/registers/n24 , \i2c_slave_top/registers/n25 , 
         \i2c_slave_top/registers/count_3__N_642 , 
         \i2c_slave_top/registers/n537 , \i2c_slave_top/registers/count_3 , 
         \i2c_slave_top/registers/count_2 , \i2c_slave_top/registers/n22 , 
         \i2c_slave_top/registers/n23 , \i2c_slave_top/registers/data_vld_cnt , 
         \i2c_slave_top/state_1_N_836_0 , \i2c_slave_top/n10049 , 
         \i2c_slave_top/registers/data_vld_cnt_N_868 , 
         \i2c_slave_top/registers/n10068 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_2 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_1 , 
         \i2c_slave_top/registers/dynamic_control_1 , 
         \i2c_slave_top/registers/dynamic_control_2 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_4 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_3 , 
         \i2c_slave_top/registers/dynamic_control_3 , 
         \i2c_slave_top/registers/dynamic_control_4 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_6 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_5 , 
         \i2c_slave_top/registers/dynamic_control_5 , 
         \i2c_slave_top/registers/dynamic_control_6 , 
         \i2c_slave_top/registers/dynamic_control_7 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_7 , 
         \i2c_slave_top/registers/n18_adj_1514 , \i2c_slave_top/registers/n59 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_9 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_8 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_179 , 
         \i2c_slave_top/registers/dynamic_control_8 , 
         \i2c_slave_top/registers/dynamic_control_9 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_11 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_10 , 
         \i2c_slave_top/registers/dynamic_control_10 , 
         \i2c_slave_top/registers/dynamic_control_11 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_13 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_12 , 
         \i2c_slave_top/registers/dynamic_control_12 , 
         \i2c_slave_top/registers/dynamic_control_13 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_15 , 
         \i2c_slave_top/registers/dynamic_control_15_N_538_14 , 
         \i2c_slave_top/registers/dynamic_control_14 , 
         \i2c_slave_top/registers/n5_adj_1511 , 
         \i2c_slave_top/registers/n5106 , \i2c_slave_top/registers/n5107 , 
         \i2c_slave_top/registers/n5108 , \n10281\001/BUF1 , 
         \i2c_slave_top/addr_i_7__N_627 , \i2c_slave_top/addr_i_7__N_595 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_43 , 
         \i2c_slave_top/registers/n4711 , \i2c_slave_top/registers/n9681 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_51 , \n10281\008/BUF1 , 
         \i2c_slave_top/addr_i_7__N_624 , \i2c_slave_top/registers/n5110 , 
         \i2c_slave_top/registers/n4864 , \i2c_slave_top/registers/n5111 , 
         \i2c_slave_top/registers/n5114 , \i2c_slave_top/registers/n5115 , 
         \i2c_slave_top/registers/n5116 , \n10281\007/BUF1 , 
         \i2c_slave_top/addr_i_7__N_621 , \i2c_slave_top/addr_i_7__N_593 , 
         \i2c_slave_top/registers/n16 , \i2c_slave_top/registers/n4868 , 
         \n10281\006/BUF1 , \i2c_slave_top/addr_i_7__N_592 , 
         \i2c_slave_top/registers/n5118 , \i2c_slave_top/registers/n4872 , 
         \i2c_slave_top/registers/n5119 , \i2c_slave_top/registers/n5120 , 
         \n10281\005/BUF1 , \i2c_slave_top/addr_i_7__N_615 , 
         \i2c_slave_top/addr_i_7__N_591 , \i2c_slave_top/registers/n5122 , 
         \i2c_slave_top/registers/n4876 , \i2c_slave_top/registers/n5123 , 
         \n10281\004/BUF1 , \i2c_slave_top/addr_i_7__N_612 , 
         \i2c_slave_top/registers/n5126 , \i2c_slave_top/registers/n4880 , 
         \i2c_slave_top/registers/n5127 , \i2c_slave_top/registers/n5128 , 
         \i2c_slave_top/registers/n10067 , \i2c_slave_top/registers/n5130 , 
         \i2c_slave_top/registers/n5131 , \i2c_slave_top/registers/n5132 , 
         \n10281\003/BUF1 , \i2c_slave_top/addr_i_7__N_609 , 
         \i2c_slave_top/registers/n10076 , \i2c_slave_top/registers/n4884 , 
         \n10281\002/BUF1 , \i2c_slave_top/addr_i_7__N_596 , 
         \i2c_slave_top/addr_i_7__N_586 , \i2c_slave_top/registers/n5134 , 
         \i2c_slave_top/registers/n4888 , \i2c_slave_top/registers/n5135 , 
         \i2c_slave_top/registers/n5136 , 
         \i2c_slave_top/registers/state_1_N_632_0 , 
         \i2c_slave_top/registers/data_vld_dly_enable_1 , 
         \i2c_slave_top/registers/state_1_N_632_1 , 
         \i2c_slave_top/registers/static_control_9 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_28 , 
         \i2c_slave_top/registers/static_control_8 , 
         \i2c_slave_top/registers/static_control_11 , 
         \i2c_slave_top/registers/static_control_10 , 
         \i2c_slave_top/registers/static_control_13 , 
         \i2c_slave_top/registers/static_control_12 , 
         \i2c_slave_top/registers/static_control_14 , 
         \i2c_slave_top/registers/static_control_15 , 
         \i2c_slave_top/registers/n10083 , \i2c_slave_top/registers/n7 , 
         mosi_reset, TA_spare3_c, \driver_control/ss_N_1346 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_128 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_120 , 
         \driver_control/n9431 , \i2c_slave_top/registers/n10031 , 
         \i2c_slave_top/registers/n2267 , \i2c_slave_top/registers/n2268 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_154 , 
         \i2c_slave_top/registers/n2265 , \i2c_slave_top/registers/n2266 , 
         \i2c_slave_top/registers/n2263 , \i2c_slave_top/registers/n2264 , 
         \i2c_slave_top/registers/n2261 , \i2c_slave_top/registers/n2262 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_162 , GND_net, 
         \i2c_slave_top/n10017 , \i2c_slave_top/pulse_width_23_N_643_17 , 
         \i2c_slave_top/pulse_width_23_N_643_16 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_170 , 
         \i2c_slave_top/pulse_width_23_N_643_19 , 
         \i2c_slave_top/pulse_width_23_N_643_18 , 
         \i2c_slave_top/pulse_width_23_N_643_21 , 
         \i2c_slave_top/pulse_width_23_N_643_20 , 
         \i2c_slave_top/pulse_width_23_N_643_23 , 
         \i2c_slave_top/pulse_width_23_N_643_22 , reset_bus_i, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1507 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9151 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_352 
         , \reset_generator/clk_d2 , \reset_generator/clk_d2_N_7 , rstn_c, 
         VCC_net, \reset_generator/in_d1 , n6830, \adc_control/n8 , 
         \reset_generator/in_d2 , \reset_generator/in_d3 , 
         \reset_generator/reset_n_N_3 , \i2c_slave_top/registers/n28 , 
         \i2c_slave_top/registers/n26 , n9629, \driver_control/n14 , 
         voltage_data_0, n9645, \adc_control/adc_sck_temp_enable_40 , 
         voltage_data_4, n9635, adc_voltage_data_8, adc_voltage_data_0, 
         \i2c_slave_top/registers/n1607 , \i2c_slave_top/registers/n1700 , 
         \i2c_slave_top/registers/n10004 , system_reset_n_c_7, 
         adc_voltage_data_7, \i2c_slave_top/registers/n1692 , 
         TA_pos_pwr_good_c_6, adc_voltage_data_6, 
         \i2c_slave_top/registers/n1693 , TA_neg_pwr_good_c_5, 
         adc_voltage_data_13, adc_voltage_data_5, 
         \i2c_slave_top/registers/n1694 , TA_EE_shutdown_c_4, 
         adc_voltage_data_12, adc_voltage_data_4, 
         \i2c_slave_top/registers/n1695 , cw_compared_c_2, adc_voltage_data_10, 
         adc_voltage_data_2, \i2c_slave_top/registers/n1697 , pwm_compared_c_1, 
         adc_voltage_data_9, adc_voltage_data_1, 
         \i2c_slave_top/registers/n1698 , 
         \i2c_slave_top/registers/cw_mon_current_limit_15 , 
         \i2c_slave_top/registers/drive_current_limit_15 , 
         \i2c_slave_top/registers/n1662 , \i2c_slave_top/registers/n1702 , 
         \i2c_slave_top/registers/cw_mon_current_limit_14 , 
         \i2c_slave_top/registers/drive_current_limit_14 , 
         \i2c_slave_top/registers/n1663 , \i2c_slave_top/registers/n1703 , 
         \i2c_slave_top/registers/cw_mon_current_limit_13 , 
         \i2c_slave_top/registers/drive_current_limit_13 , 
         \i2c_slave_top/registers/n1664 , \i2c_slave_top/registers/n1704 , 
         \i2c_slave_top/registers/cw_mon_current_limit_12 , 
         \i2c_slave_top/registers/drive_current_limit_12 , 
         \i2c_slave_top/registers/n1665 , \i2c_slave_top/registers/n1705 , 
         \i2c_slave_top/registers/cw_mon_current_limit_11 , 
         \i2c_slave_top/registers/drive_current_limit_11 , 
         \i2c_slave_top/registers/n1666 , \i2c_slave_top/registers/n1706 , 
         \i2c_slave_top/registers/cw_mon_current_limit_10 , 
         \i2c_slave_top/registers/drive_current_limit_10 , 
         \i2c_slave_top/registers/n1667 , \i2c_slave_top/registers/n1707 , 
         \i2c_slave_top/registers/cw_mon_current_limit_9 , 
         \i2c_slave_top/registers/drive_current_limit_9 , 
         \i2c_slave_top/registers/n1668 , \i2c_slave_top/registers/n1708 , 
         \i2c_slave_top/registers/drive_current_limit_7 , 
         \i2c_slave_top/registers/cw_mon_current_limit_7 , 
         \i2c_slave_top/registers/n1635 , 
         \i2c_slave_top/registers/drive_current_limit_6 , 
         \i2c_slave_top/registers/cw_mon_current_limit_6 , 
         \i2c_slave_top/registers/drive_current_limit_5 , 
         \i2c_slave_top/registers/cw_mon_current_limit_5 , 
         \i2c_slave_top/registers/drive_current_limit_4 , 
         \i2c_slave_top/registers/cw_mon_current_limit_4 , 
         \i2c_slave_top/registers/drive_current_limit_3 , 
         \i2c_slave_top/registers/cw_mon_current_limit_3 , 
         \i2c_slave_top/registers/drive_current_limit_2 , 
         \i2c_slave_top/registers/cw_mon_current_limit_2 , 
         \i2c_slave_top/registers/drive_current_limit_1 , 
         \i2c_slave_top/registers/cw_mon_current_limit_1 , 
         \i2c_slave_top/registers/drive_current_limit_0 , 
         \i2c_slave_top/registers/cw_mon_current_limit_0 , 
         \i2c_slave_top/registers/n1709 , 
         \i2c_slave_top/registers/cw_mon_current_limit_8 , 
         \i2c_slave_top/registers/drive_current_limit_8 , 
         \i2c_slave_top/registers/n1669 , TA_OPT_shutdown_c_3, 
         adc_voltage_data_11, adc_voltage_data_3, 
         \i2c_slave_top/registers/n1696 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9910 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10250 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9290 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9908 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9911 , 
         \i2c_slave_top/registers/n10041 , \i2c_slave_top/registers/n19 , 
         \i2c_slave_top/registers/n10 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_88 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10012 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10042 , 
         \driver_control/n10 , \driver_control/n12_adj_1548 , 
         \driver_control/n11_adj_1547 , \driver_control/n15 , 
         \driver_control/n17 , \driver_control/n8_adj_1546 , 
         \driver_control/n9 , \i2c_slave_top/registers/n6 , 
         \i2c_slave_top/registers/n18 , 
         \i2c_slave_top/registers/clk_25mhz_c_enable_97 , 
         \i2c_slave_top/registers/n10037 , \i2c_slave_top/registers/n9574 , 
         \i2c_slave_top/registers/n10052 , \i2c_slave_top/registers/n10026 , 
         \i2c_slave_top/registers/n5112 , \i2c_slave_top/registers/n5 , 
         \i2c_slave_top/registers/n5124 , 
         \i2c_slave_top/registers/n10_adj_1512 , 
         \i2c_slave_top/registers/n10035 , \i2c_slave_top/registers/n10036 , 
         \i2c_slave_top/registers/n9163 , \i2c_slave_top/registers/n10019 , 
         \i2c_slave_top/registers/n10_adj_1513 , \i2c_slave_top/registers/n12 , 
         \i2c_slave_top/registers/n30 , \i2c_slave_top/registers/n22_adj_1515 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10072 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10040 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10065 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10034 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9540 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10079 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10080 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1509 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9_adj_1508 
         , \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10046 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10045 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9912 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10088 , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10028 , 
         \adc_control/n10063 , \adc_control/n10064 , \adc_control/n6 , 
         \adc_control/n9420 , \adc_control/n7 , \adc_control/n13 ;

  SLICE_0 SLICE_0( .B1(pulse_count_20), .A1(pulse_active_N_1287_20), 
    .B0(pulse_count_19), .A0(pulse_active_N_1287_19), .FCI(n8532), .FCO(n8533));
  SLICE_1 SLICE_1( .B1(pulse_count_18), .A1(pulse_active_N_1287_18), 
    .B0(pulse_count_17), .A0(pulse_active_N_1287_17), .FCI(n8531), .FCO(n8532));
  SLICE_2 SLICE_2( .B1(pulse_count_16), .A1(pulse_active_N_1287_16), 
    .B0(pulse_count_15), .A0(pulse_active_N_1287_15), .FCI(n8530), .FCO(n8531));
  SLICE_3 SLICE_3( .B1(pulse_count_14), .A1(pulse_active_N_1287_14), 
    .B0(pulse_count_13), .A0(pulse_active_N_1287_13), .FCI(n8529), .FCO(n8530));
  SLICE_4 SLICE_4( .B1(pulse_count_12), .A1(pulse_active_N_1287_12), 
    .B0(pulse_count_11), .A0(pulse_active_N_1287_11), .FCI(n8528), .FCO(n8529));
  SLICE_5 SLICE_5( .B1(pulse_count_10), .A1(pulse_active_N_1287_10), 
    .B0(pulse_count_9), .A0(pulse_active_N_1287_9), 
    .M1(\i2c_slave_top/n10057 ), .M0(\i2c_slave_top/n10056 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_35 ), .CLK(clk_25mhz_c), 
    .FCI(n8527), .Q0(\i2c_slave_top/registers/static_control_5 ), 
    .Q1(\i2c_slave_top/registers/static_control_6 ), .FCO(n8528));
  SLICE_6 SLICE_6( .B1(pulse_count_8), .A1(pulse_active_N_1287_8), 
    .B0(pulse_count_7), .A0(pulse_active_N_1287_7), .FCI(n8526), .FCO(n8527));
  SLICE_7 SLICE_7( .B1(pulse_count_6), .A1(pulse_active_N_1287_6), 
    .B0(pulse_count_5), .A0(pulse_active_N_1287_5), .FCI(n8525), .FCO(n8526));
  SLICE_8 SLICE_8( .B1(pulse_count_4), .A1(pulse_active_N_1287_4), 
    .B0(pulse_count_3), .A0(pulse_active_N_1287_3), .FCI(n8524), .FCO(n8525));
  SLICE_9 SLICE_9( .B1(pulse_count_2), .A1(pulse_active_N_1287_2), 
    .B0(pulse_count_1), .A0(pulse_active_N_1287_1), .FCI(n8523), .FCO(n8524));
  SLICE_10 SLICE_10( .B1(pulse_count_0), .A1(period_0), 
    .M1(\i2c_slave_top/n10055 ), .M0(\i2c_slave_top/n10053 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_35 ), .CLK(clk_25mhz_c), 
    .Q0(\i2c_slave_top/registers/static_control_3 ), 
    .Q1(\i2c_slave_top/registers/static_control_4 ), .FCO(n8523));
  SLICE_11 SLICE_11( .B0(pulse_count_23), .A0(pulse_active_N_1260_23), 
    .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_70 ), .CLK(clk_25mhz_c), 
    .FCI(n8522), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_2 ), 
    .F1(n2702), .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_3 ));
  SLICE_12 SLICE_12( .B1(pulse_count_22), .A1(pulse_active_N_1260_22), 
    .B0(pulse_count_21), .A0(pulse_active_N_1260_21), 
    .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_63 ), .CLK(clk_25mhz_c), 
    .FCI(n8521), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_14 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_15 ), .FCO(n8522));
  SLICE_13 SLICE_13( .B1(pulse_count_20), .A1(pulse_active_N_1260_20), 
    .B0(pulse_count_19), .A0(pulse_active_N_1260_19), 
    .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_63 ), .CLK(clk_25mhz_c), 
    .FCI(n8520), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_12 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_13 ), .FCO(n8521));
  SLICE_14 SLICE_14( .B1(pulse_count_18), .A1(pulse_active_N_1260_18), 
    .B0(pulse_count_17), .A0(pulse_active_N_1260_17), 
    .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_63 ), .CLK(clk_25mhz_c), 
    .FCI(n8519), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_10 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_11 ), .FCO(n8520));
  SLICE_15 SLICE_15( .B1(pulse_count_16), .A1(pulse_active_N_1260_16), 
    .B0(pulse_count_15), .A0(pulse_active_N_1260_15), 
    .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_70 ), .CLK(clk_25mhz_c), 
    .FCI(n8518), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_0 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_1 ), .FCO(n8519));
  SLICE_16 SLICE_16( .B1(pulse_count_14), .A1(pulse_active_N_1260_14), 
    .B0(pulse_count_13), .A0(pulse_active_N_1260_13), 
    .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_145 ), .CLK(clk_25mhz_c), 
    .FCI(n8517), .Q0(period_6), .Q1(period_7), .FCO(n8518));
  SLICE_17 SLICE_17( .B1(pulse_count_12), .A1(pulse_active_N_1260_12), 
    .B0(pulse_count_11), .A0(pulse_active_N_1260_11), 
    .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_145 ), .CLK(clk_25mhz_c), 
    .FCI(n8516), .Q0(period_4), .Q1(period_5), .FCO(n8517));
  SLICE_18 SLICE_18( .B1(pulse_count_10), .A1(pulse_active_N_1260_10), 
    .B0(pulse_count_9), .A0(pulse_active_N_1260_9), 
    .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_145 ), .CLK(clk_25mhz_c), 
    .FCI(n8515), .Q0(period_2), .Q1(period_3), .FCO(n8516));
  SLICE_19 SLICE_19( .B1(pulse_count_8), .A1(pulse_active_N_1260_8), 
    .B0(pulse_count_7), .A0(pulse_active_N_1260_7), 
    .M1(\i2c_slave_top/n10051 ), .M0(\i2c_slave_top/n10050 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_35 ), .CLK(clk_25mhz_c), 
    .FCI(n8514), .Q0(\i2c_slave_top/registers/static_control_1 ), 
    .Q1(\i2c_slave_top/registers/static_control_2 ), .FCO(n8515));
  SLICE_20 SLICE_20( .B1(pulse_count_6), .A1(pulse_active_N_1260_6), 
    .B0(pulse_count_5), .A0(pulse_active_N_1260_5), 
    .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_63 ), .CLK(clk_25mhz_c), 
    .FCI(n8513), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_8 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_9 ), .FCO(n8514));
  SLICE_21 SLICE_21( .B1(pulse_count_4), .A1(pulse_active_N_1260_4), 
    .B0(pulse_count_3), .A0(pulse_active_N_1260_3), 
    .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_70 ), .CLK(clk_25mhz_c), 
    .FCI(n8512), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_6 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_7 ), .FCO(n8513));
  SLICE_22 SLICE_22( .B1(pulse_count_2), .A1(pulse_active_N_1260_2), 
    .B0(pulse_count_1), .A0(pulse_active_N_1260_1), 
    .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_70 ), .CLK(clk_25mhz_c), 
    .FCI(n8511), .Q0(\i2c_slave_top/registers/pwm_mon_current_limit_4 ), 
    .Q1(\i2c_slave_top/registers/pwm_mon_current_limit_5 ), .FCO(n8512));
  SLICE_23 SLICE_23( .B1(pulse_count_0), .A1(pulse_width_0), 
    .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_145 ), .CLK(clk_25mhz_c), 
    .Q0(period_0), .Q1(period_1), .FCO(n8511));
  driver_control_SLICE_24 \driver_control/SLICE_24 ( .A1(pulse_count_22), 
    .A0(pulse_count_21), .DI1(\driver_control/n103 ), 
    .DI0(\driver_control/n104 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8483 ), .F0(\driver_control/n104 ), 
    .Q0(pulse_count_21), .F1(\driver_control/n103 ), .Q1(pulse_count_22), 
    .FCO(\driver_control/n8484 ));
  driver_control_SLICE_25 \driver_control/SLICE_25 ( .A1(pulse_count_20), 
    .A0(pulse_count_19), .DI1(\driver_control/n105 ), 
    .DI0(\driver_control/n106 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8482 ), .F0(\driver_control/n106 ), 
    .Q0(pulse_count_19), .F1(\driver_control/n105 ), .Q1(pulse_count_20), 
    .FCO(\driver_control/n8483 ));
  driver_control_SLICE_26 \driver_control/SLICE_26 ( .A1(pulse_count_18), 
    .A0(pulse_count_17), .DI1(\driver_control/n107 ), 
    .DI0(\driver_control/n108 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8481 ), .F0(\driver_control/n108 ), 
    .Q0(pulse_count_17), .F1(\driver_control/n107 ), .Q1(pulse_count_18), 
    .FCO(\driver_control/n8482 ));
  driver_control_SLICE_27 \driver_control/SLICE_27 ( .A1(pulse_count_16), 
    .A0(pulse_count_15), .DI1(\driver_control/n109 ), 
    .DI0(\driver_control/n110 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8480 ), .F0(\driver_control/n110 ), 
    .Q0(pulse_count_15), .F1(\driver_control/n109 ), .Q1(pulse_count_16), 
    .FCO(\driver_control/n8481 ));
  driver_control_SLICE_28 \driver_control/SLICE_28 ( .A1(pulse_count_14), 
    .A0(pulse_count_13), .DI1(\driver_control/n111 ), 
    .DI0(\driver_control/n112 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8479 ), .F0(\driver_control/n112 ), 
    .Q0(pulse_count_13), .F1(\driver_control/n111 ), .Q1(pulse_count_14), 
    .FCO(\driver_control/n8480 ));
  driver_control_SLICE_29 \driver_control/SLICE_29 ( 
    .A1(\driver_control/force_trigger_count_6 ), 
    .A0(\driver_control/force_trigger_count_5 ), 
    .DI1(\driver_control/n119_adj_1519 ), .DI0(\driver_control/n120_adj_1518 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8451 ), .F0(\driver_control/n120_adj_1518 ), 
    .Q0(\driver_control/force_trigger_count_5 ), 
    .F1(\driver_control/n119_adj_1519 ), 
    .Q1(\driver_control/force_trigger_count_6 ), .FCO(\driver_control/n8452 ));
  driver_control_SLICE_30 \driver_control/SLICE_30 ( .A1(pulse_count_12), 
    .A0(pulse_count_11), .DI1(\driver_control/n113 ), 
    .DI0(\driver_control/n114 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8478 ), .F0(\driver_control/n114 ), 
    .Q0(pulse_count_11), .F1(\driver_control/n113 ), .Q1(pulse_count_12), 
    .FCO(\driver_control/n8479 ));
  driver_control_SLICE_31 \driver_control/SLICE_31 ( 
    .A1(\driver_control/force_trigger_count_4 ), 
    .A0(\driver_control/force_trigger_count_3 ), 
    .DI1(\driver_control/n121_adj_1521 ), .DI0(\driver_control/n122_adj_1520 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8450 ), .F0(\driver_control/n122_adj_1520 ), 
    .Q0(\driver_control/force_trigger_count_3 ), 
    .F1(\driver_control/n121_adj_1521 ), 
    .Q1(\driver_control/force_trigger_count_4 ), .FCO(\driver_control/n8451 ));
  driver_control_SLICE_32 \driver_control/SLICE_32 ( .A1(pulse_count_10), 
    .A0(pulse_count_9), .DI1(\driver_control/n115 ), 
    .DI0(\driver_control/n116 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8477 ), .F0(\driver_control/n116 ), 
    .Q0(pulse_count_9), .F1(\driver_control/n115 ), .Q1(pulse_count_10), 
    .FCO(\driver_control/n8478 ));
  driver_control_SLICE_33 \driver_control/SLICE_33 ( 
    .A1(\driver_control/force_trigger_count_2 ), 
    .A0(\driver_control/force_trigger_count_1 ), 
    .DI1(\driver_control/n123_adj_1523 ), .DI0(\driver_control/n124_adj_1522 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8449 ), .F0(\driver_control/n124_adj_1522 ), 
    .Q0(\driver_control/force_trigger_count_1 ), 
    .F1(\driver_control/n123_adj_1523 ), 
    .Q1(\driver_control/force_trigger_count_2 ), .FCO(\driver_control/n8450 ));
  driver_control_SLICE_34 \driver_control/SLICE_34 ( 
    .A1(\driver_control/force_trigger_count_0 ), .DI1(\driver_control/n125 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .F1(\driver_control/n125 ), .Q1(\driver_control/force_trigger_count_0 ), 
    .FCO(\driver_control/n8449 ));
  driver_control_SLICE_35 \driver_control/SLICE_35 ( .A1(pulse_count_8), 
    .A0(pulse_count_7), .DI1(\driver_control/n117 ), 
    .DI0(\driver_control/n118 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8476 ), .F0(\driver_control/n118 ), 
    .Q0(pulse_count_7), .F1(\driver_control/n117 ), .Q1(pulse_count_8), 
    .FCO(\driver_control/n8477 ));
  driver_control_SLICE_36 \driver_control/SLICE_36 ( .A1(pulse_count_6), 
    .A0(pulse_count_5), .DI1(\driver_control/n119 ), 
    .DI0(\driver_control/n120 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8475 ), .F0(\driver_control/n120 ), 
    .Q0(pulse_count_5), .F1(\driver_control/n119 ), .Q1(pulse_count_6), 
    .FCO(\driver_control/n8476 ));
  driver_control_SLICE_37 \driver_control/SLICE_37 ( .A1(pulse_count_4), 
    .A0(pulse_count_3), .DI1(\driver_control/n121 ), 
    .DI0(\driver_control/n122 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8474 ), .F0(\driver_control/n122 ), 
    .Q0(pulse_count_3), .F1(\driver_control/n121 ), .Q1(pulse_count_4), 
    .FCO(\driver_control/n8475 ));
  driver_control_SLICE_38 \driver_control/SLICE_38 ( .A1(pulse_count_2), 
    .A0(pulse_count_1), .DI1(\driver_control/n123 ), 
    .DI0(\driver_control/n124 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8473 ), .F0(\driver_control/n124 ), 
    .Q0(pulse_count_1), .F1(\driver_control/n123 ), .Q1(pulse_count_2), 
    .FCO(\driver_control/n8474 ));
  driver_control_SLICE_39 \driver_control/SLICE_39 ( .A1(pulse_count_0), 
    .DI1(\driver_control/n125_adj_1524 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .F1(\driver_control/n125_adj_1524 ), .Q1(pulse_count_0), 
    .FCO(\driver_control/n8473 ));
  driver_control_SLICE_40 \driver_control/SLICE_40 ( 
    .A0(\driver_control/total_count_15 ), .FCI(\driver_control/n8472 ), 
    .F0(\driver_control/total_count_15_N_1152_15 ));
  driver_control_SLICE_41 \driver_control/SLICE_41 ( 
    .A0(\driver_control/clk_count[3] ), .DI0(\driver_control/n22 ), 
    .CLK(clk_25mhz_c), .FCI(\driver_control/n8510 ), .F0(\driver_control/n22 ), 
    .Q0(\driver_control/clk_count[3] ));
  driver_control_SLICE_42 \driver_control/SLICE_42 ( .A1(\driver_control/n2 ), 
    .A0(\driver_control/n3 ), .DI1(\driver_control/n23 ), 
    .DI0(\driver_control/n24 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8509 ), .F0(\driver_control/n24 ), 
    .Q0(\driver_control/n3 ), .F1(\driver_control/n23 ), 
    .Q1(\driver_control/n2 ), .FCO(\driver_control/n8510 ));
  driver_control_SLICE_43 \driver_control/SLICE_43 ( 
    .A1(\driver_control/total_count_14 ), .A0(\driver_control/total_count_13 ), 
    .FCI(\driver_control/n8471 ), 
    .F0(\driver_control/total_count_15_N_1152_13 ), 
    .F1(\driver_control/total_count_15_N_1152_14 ), 
    .FCO(\driver_control/n8472 ));
  driver_control_SLICE_44 \driver_control/SLICE_44 ( .A1(\driver_control/n4 ), 
    .DI1(\driver_control/n25 ), .CLK(clk_25mhz_c), .F1(\driver_control/n25 ), 
    .Q1(\driver_control/n4 ), .FCO(\driver_control/n8509 ));
  driver_control_SLICE_45 \driver_control/SLICE_45 ( 
    .M1(\driver_control/force_trigger_count_d_2 ), 
    .M0(\driver_control/force_trigger_count_d_19 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8508 ), .F0(\driver_control/pulse_active_N_1260_24 ), 
    .Q0(\driver_control/force_trigger_count_d2_19 ), 
    .Q1(\driver_control/force_trigger_count_d2_2 ));
  driver_control_SLICE_46 \driver_control/SLICE_46 ( 
    .A1(\driver_control/total_count_12 ), .A0(\driver_control/total_count_11 ), 
    .FCI(\driver_control/n8470 ), 
    .F0(\driver_control/total_count_15_N_1152_11 ), 
    .F1(\driver_control/total_count_15_N_1152_12 ), 
    .FCO(\driver_control/n8471 ));
  driver_control_SLICE_47 \driver_control/SLICE_47 ( .A1(pulse_width_23), 
    .A0(pulse_width_22), .M1(\driver_control/force_trigger_count_d_18 ), 
    .M0(\driver_control/force_trigger_count_d_17 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8507 ), .F0(pulse_active_N_1260_22), 
    .Q0(\driver_control/force_trigger_count_d2_17 ), 
    .F1(pulse_active_N_1260_23), 
    .Q1(\driver_control/force_trigger_count_d2_18 ), 
    .FCO(\driver_control/n8508 ));
  driver_control_SLICE_48 \driver_control/SLICE_48 ( .A1(pulse_width_21), 
    .A0(pulse_width_20), .M1(\driver_control/force_trigger_count_d_16 ), 
    .M0(\driver_control/force_trigger_count_d_15 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8506 ), .F0(pulse_active_N_1260_20), 
    .Q0(\driver_control/force_trigger_count_d2_15 ), 
    .F1(pulse_active_N_1260_21), 
    .Q1(\driver_control/force_trigger_count_d2_16 ), 
    .FCO(\driver_control/n8507 ));
  driver_control_SLICE_49 \driver_control/SLICE_49 ( 
    .A1(\driver_control/total_count_10 ), .A0(\driver_control/total_count_9 ), 
    .FCI(\driver_control/n8469 ), 
    .F0(\driver_control/total_count_15_N_1152_9 ), 
    .F1(\driver_control/total_count_15_N_1152_10 ), 
    .FCO(\driver_control/n8470 ));
  driver_control_SLICE_50 \driver_control/SLICE_50 ( 
    .A1(\driver_control/total_count_8 ), .A0(\driver_control/total_count_7 ), 
    .FCI(\driver_control/n8468 ), 
    .F0(\driver_control/total_count_15_N_1152_7 ), 
    .F1(\driver_control/total_count_15_N_1152_8 ), 
    .FCO(\driver_control/n8469 ));
  driver_control_SLICE_51 \driver_control/SLICE_51 ( 
    .A1(\driver_control/total_count_6 ), .A0(\driver_control/total_count_5 ), 
    .FCI(\driver_control/n8467 ), 
    .F0(\driver_control/total_count_15_N_1152_5 ), 
    .F1(\driver_control/total_count_15_N_1152_6 ), 
    .FCO(\driver_control/n8468 ));
  driver_control_SLICE_52 \driver_control/SLICE_52 ( .A1(pulse_width_19), 
    .A0(pulse_width_18), .M1(\driver_control/force_trigger_count_d_14 ), 
    .M0(\driver_control/force_trigger_count_d_13 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8505 ), .F0(pulse_active_N_1260_18), 
    .Q0(\driver_control/force_trigger_count_d2_13 ), 
    .F1(pulse_active_N_1260_19), 
    .Q1(\driver_control/force_trigger_count_d2_14 ), 
    .FCO(\driver_control/n8506 ));
  driver_control_SLICE_53 \driver_control/SLICE_53 ( 
    .A1(\driver_control/total_count_4 ), .A0(\driver_control/total_count_3 ), 
    .FCI(\driver_control/n8466 ), 
    .F0(\driver_control/total_count_15_N_1152_3 ), 
    .F1(\driver_control/total_count_15_N_1152_4 ), 
    .FCO(\driver_control/n8467 ));
  driver_control_SLICE_54 \driver_control/SLICE_54 ( 
    .A0(\driver_control/count_7 ), .M1(\driver_control/period_d_3 ), 
    .M0(\driver_control/period_d_23 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8554 ), .F0(\driver_control/n239 ), 
    .Q0(\driver_control/period_d2_23 ), .Q1(\driver_control/period_d2_3 ));
  driver_control_SLICE_55 \driver_control/SLICE_55 ( 
    .A1(\driver_control/total_count_2 ), .A0(\driver_control/total_count_1 ), 
    .FCI(\driver_control/n8465 ), 
    .F0(\driver_control/total_count_15_N_1152_1 ), 
    .F1(\driver_control/total_count_15_N_1152_2 ), 
    .FCO(\driver_control/n8466 ));
  driver_control_SLICE_56 \driver_control/SLICE_56 ( 
    .A1(\driver_control/count_6 ), .A0(\driver_control/count_5 ), 
    .M1(\driver_control/period_d_22 ), .M0(\driver_control/period_d_21 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8553 ), 
    .F0(\driver_control/n241 ), .Q0(\driver_control/period_d2_21 ), 
    .F1(\driver_control/n240 ), .Q1(\driver_control/period_d2_22 ), 
    .FCO(\driver_control/n8554 ));
  driver_control_SLICE_57 \driver_control/SLICE_57 ( .A1(pulse_width_17), 
    .A0(pulse_width_16), .M1(\driver_control/force_trigger_count_d_12 ), 
    .M0(\driver_control/force_trigger_count_d_11 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8504 ), .F0(pulse_active_N_1260_16), 
    .Q0(\driver_control/force_trigger_count_d2_11 ), 
    .F1(pulse_active_N_1260_17), 
    .Q1(\driver_control/force_trigger_count_d2_12 ), 
    .FCO(\driver_control/n8505 ));
  driver_control_SLICE_58 \driver_control/SLICE_58 ( 
    .A1(\driver_control/count_4 ), .A0(\driver_control/count_3 ), 
    .M1(\driver_control/period_d_20 ), .M0(\driver_control/period_d_2 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8552 ), 
    .F0(\driver_control/n243 ), .Q0(\driver_control/period_d2_2 ), 
    .F1(\driver_control/n242 ), .Q1(\driver_control/period_d2_20 ), 
    .FCO(\driver_control/n8553 ));
  driver_control_SLICE_59 \driver_control/SLICE_59 ( 
    .C1(\driver_control/total_count_0 ), .B1(\driver_control/n4538 ), 
    .A1(\driver_control/n12 ), .F1(\driver_control/total_count_15_N_1152_0 ), 
    .FCO(\driver_control/n8465 ));
  driver_control_SLICE_60 \driver_control/SLICE_60 ( 
    .A1(\driver_control/count_2 ), .A0(\driver_control/count_1 ), 
    .M1(\driver_control/period_d_19 ), .M0(\driver_control/period_d_18 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8551 ), 
    .F0(\driver_control/n245 ), .Q0(\driver_control/period_d2_18 ), 
    .F1(\driver_control/n244 ), .Q1(\driver_control/period_d2_19 ), 
    .FCO(\driver_control/n8552 ));
  driver_control_SLICE_61 \driver_control/SLICE_61 ( .A1(pulse_width_15), 
    .A0(pulse_width_14), .M0(\driver_control/mosi_temp ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8503 ), .F0(pulse_active_N_1260_14), 
    .Q0(TA_spare2_c), .F1(pulse_active_N_1260_15), 
    .FCO(\driver_control/n8504 ));
  driver_control_SLICE_62 \driver_control/SLICE_62 ( 
    .A1(\driver_control/count_0 ), .M1(\driver_control/period_d_17 ), 
    .M0(\driver_control/period_d_16 ), .CLK(\driver_control/clk_count[3] ), 
    .Q0(\driver_control/period_d2_16 ), .F1(\driver_control/n246 ), 
    .Q1(\driver_control/period_d2_17 ), .FCO(\driver_control/n8551 ));
  driver_control_SLICE_63 \driver_control/SLICE_63 ( .A1(pulse_width_13), 
    .A0(pulse_width_12), .M1(period_9), .M0(period_8), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8502 ), 
    .F0(pulse_active_N_1260_12), .Q0(\driver_control/period_d_8 ), 
    .F1(pulse_active_N_1260_13), .Q1(\driver_control/period_d_9 ), 
    .FCO(\driver_control/n8503 ));
  driver_control_SLICE_64 \driver_control/SLICE_64 ( .A1(pulse_width_11), 
    .A0(pulse_width_10), .M1(period_7), .M0(period_6), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8501 ), 
    .F0(pulse_active_N_1260_10), .Q0(\driver_control/period_d_6 ), 
    .F1(pulse_active_N_1260_11), .Q1(\driver_control/period_d_7 ), 
    .FCO(\driver_control/n8502 ));
  driver_control_SLICE_65 \driver_control/SLICE_65 ( 
    .A0(\driver_control/trigger_count_7 ), .DI0(\driver_control/n38 ), 
    .CE(TA_spare4_c), .LSR(\driver_control/n5220 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8464 ), .F0(\driver_control/n38 ), 
    .Q0(\driver_control/trigger_count_7 ));
  driver_control_SLICE_66 \driver_control/SLICE_66 ( 
    .A1(\driver_control/trigger_count_6 ), 
    .A0(\driver_control/trigger_count_5 ), .DI1(\driver_control/n39 ), 
    .DI0(\driver_control/n40 ), .CE(TA_spare4_c), .LSR(\driver_control/n5220 ), 
    .CLK(clk_25mhz_c), .FCI(\driver_control/n8463 ), .F0(\driver_control/n40 ), 
    .Q0(\driver_control/trigger_count_5 ), .F1(\driver_control/n39 ), 
    .Q1(\driver_control/trigger_count_6 ), .FCO(\driver_control/n8464 ));
  driver_control_SLICE_67 \driver_control/SLICE_67 ( .A1(pulse_width_9), 
    .A0(pulse_width_8), .M1(\driver_control/force_trigger_count_d_6 ), 
    .M0(\driver_control/force_trigger_count_d_5 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8500 ), .F0(pulse_active_N_1260_8), 
    .Q0(\driver_control/force_trigger_count_d2_5 ), .F1(pulse_active_N_1260_9), 
    .Q1(\driver_control/force_trigger_count_d2_6 ), 
    .FCO(\driver_control/n8501 ));
  driver_control_SLICE_68 \driver_control/SLICE_68 ( 
    .B0(\driver_control/period_d2_23 ), 
    .A0(\driver_control/force_trigger_count_d2_23 ), 
    .DI1(\driver_control/force_trigger_N_1324 ), .LSR(static_control_7), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8546 ), 
    .F1(\driver_control/force_trigger_N_1324 ), 
    .Q1(\driver_control/force_trigger ));
  driver_control_SLICE_69 \driver_control/SLICE_69 ( 
    .A1(\driver_control/trigger_count_4 ), .A0(\driver_control/n5 ), 
    .DI1(\driver_control/n41 ), .DI0(\driver_control/n42 ), .CE(TA_spare4_c), 
    .LSR(\driver_control/n5220 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8462 ), .F0(\driver_control/n42 ), 
    .Q0(\driver_control/n5 ), .F1(\driver_control/n41 ), 
    .Q1(\driver_control/trigger_count_4 ), .FCO(\driver_control/n8463 ));
  driver_control_SLICE_70 \driver_control/SLICE_70 ( .A1(\driver_control/n6 ), 
    .A0(\driver_control/n7 ), .DI1(\driver_control/n43 ), 
    .DI0(\driver_control/n44 ), .CE(TA_spare4_c), .LSR(\driver_control/n5220 ), 
    .CLK(clk_25mhz_c), .FCI(\driver_control/n8461 ), .F0(\driver_control/n44 ), 
    .Q0(\driver_control/n7 ), .F1(\driver_control/n43 ), 
    .Q1(\driver_control/n6 ), .FCO(\driver_control/n8462 ));
  driver_control_SLICE_71 \driver_control/SLICE_71 ( .A1(pulse_width_7), 
    .A0(pulse_width_6), .M1(\driver_control/force_trigger_count_d_4 ), 
    .M0(\driver_control/force_trigger_count_d_3 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8499 ), .F0(pulse_active_N_1260_6), 
    .Q0(\driver_control/force_trigger_count_d2_3 ), .F1(pulse_active_N_1260_7), 
    .Q1(\driver_control/force_trigger_count_d2_4 ), 
    .FCO(\driver_control/n8500 ));
  driver_control_SLICE_72 \driver_control/SLICE_72 ( 
    .B1(\driver_control/period_d2_22 ), 
    .A1(\driver_control/force_trigger_count_d2_22 ), 
    .B0(\driver_control/period_d2_21 ), 
    .A0(\driver_control/force_trigger_count_d2_21 ), .M1(period_17), 
    .M0(period_16), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8545 ), .Q0(\driver_control/period_d_16 ), 
    .Q1(\driver_control/period_d_17 ), .FCO(\driver_control/n8546 ));
  driver_control_SLICE_73 \driver_control/SLICE_73 ( 
    .B1(\driver_control/period_d2_20 ), 
    .A1(\driver_control/force_trigger_count_d2_20 ), 
    .B0(\driver_control/period_d2_19 ), 
    .A0(\driver_control/force_trigger_count_d2_19 ), .M1(period_15), 
    .M0(period_14), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8544 ), .Q0(\driver_control/period_d_14 ), 
    .Q1(\driver_control/period_d_15 ), .FCO(\driver_control/n8545 ));
  driver_control_SLICE_74 \driver_control/SLICE_74 ( .A1(pulse_width_5), 
    .A0(pulse_width_4), .M1(\driver_control/force_trigger_count_d_23 ), 
    .M0(\driver_control/force_trigger_count_d_22 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8498 ), .F0(pulse_active_N_1260_4), 
    .Q0(\driver_control/force_trigger_count_d2_22 ), 
    .F1(pulse_active_N_1260_5), 
    .Q1(\driver_control/force_trigger_count_d2_23 ), 
    .FCO(\driver_control/n8499 ));
  driver_control_SLICE_75 \driver_control/SLICE_75 ( 
    .A1(\driver_control/n8_adj_1543 ), .DI1(\driver_control/n45 ), 
    .CE(TA_spare4_c), .LSR(\driver_control/n5220 ), .CLK(clk_25mhz_c), 
    .F1(\driver_control/n45 ), .Q1(\driver_control/n8_adj_1543 ), 
    .FCO(\driver_control/n8461 ));
  driver_control_SLICE_76 \driver_control/SLICE_76 ( 
    .B1(\driver_control/period_d2_18 ), 
    .A1(\driver_control/force_trigger_count_d2_18 ), 
    .B0(\driver_control/period_d2_17 ), 
    .A0(\driver_control/force_trigger_count_d2_17 ), .M1(period_13), 
    .M0(period_12), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8543 ), .Q0(\driver_control/period_d_12 ), 
    .Q1(\driver_control/period_d_13 ), .FCO(\driver_control/n8544 ));
  driver_control_SLICE_77 \driver_control/SLICE_77 ( 
    .B1(\driver_control/period_d2_16 ), 
    .A1(\driver_control/force_trigger_count_d2_16 ), 
    .B0(\driver_control/period_d2_15 ), 
    .A0(\driver_control/force_trigger_count_d2_15 ), .M1(period_11), 
    .M0(period_10), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8542 ), .Q0(\driver_control/period_d_10 ), 
    .Q1(\driver_control/period_d_11 ), .FCO(\driver_control/n8543 ));
  driver_control_SLICE_78 \driver_control/SLICE_78 ( 
    .A0(\driver_control/force_trigger_count_23 ), 
    .DI0(\driver_control/n102_adj_1541 ), .LSR(\driver_control/n518 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8460 ), 
    .F0(\driver_control/n102_adj_1541 ), 
    .Q0(\driver_control/force_trigger_count_23 ));
  driver_control_SLICE_79 \driver_control/SLICE_79 ( .A1(pulse_width_3), 
    .A0(pulse_width_2), .M1(\driver_control/force_trigger_count_d_21 ), 
    .M0(\driver_control/force_trigger_count_d_20 ), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8497 ), .F0(pulse_active_N_1260_2), 
    .Q0(\driver_control/force_trigger_count_d2_20 ), 
    .F1(pulse_active_N_1260_3), 
    .Q1(\driver_control/force_trigger_count_d2_21 ), 
    .FCO(\driver_control/n8498 ));
  driver_control_SLICE_80 \driver_control/SLICE_80 ( .A1(pulse_width_1), 
    .M1(period_5), .M0(period_4), .CLK(\driver_control/clk_count[3] ), 
    .Q0(\driver_control/period_d_4 ), .F1(pulse_active_N_1260_1), 
    .Q1(\driver_control/period_d_5 ), .FCO(\driver_control/n8497 ));
  driver_control_SLICE_81 \driver_control/SLICE_81 ( .M1(drive_current_9), 
    .M0(drive_current_8), .CE(dynamic_control_0), .CLK(clk_25mhz_c), 
    .FCI(\driver_control/n8496 ), .F0(pulse_active_N_1287_24), 
    .Q0(\driver_control/drive_current_reg_8 ), 
    .Q1(\driver_control/drive_current_reg_9 ));
  driver_control_SLICE_82 \driver_control/SLICE_82 ( .A1(period_23), 
    .A0(period_22), .M1(drive_current_7), .M0(drive_current_6), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8495 ), 
    .F0(pulse_active_N_1287_22), .Q0(\driver_control/drive_current_reg_6 ), 
    .F1(pulse_active_N_1287_23), .Q1(\driver_control/drive_current_reg_7 ), 
    .FCO(\driver_control/n8496 ));
  driver_control_SLICE_83 \driver_control/SLICE_83 ( 
    .B1(\driver_control/period_d2_14 ), 
    .A1(\driver_control/force_trigger_count_d2_14 ), 
    .B0(\driver_control/period_d2_13 ), 
    .A0(\driver_control/force_trigger_count_d2_13 ), .M1(period_1), 
    .M0(period_0), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8541 ), .Q0(\driver_control/period_d_0 ), 
    .Q1(\driver_control/period_d_1 ), .FCO(\driver_control/n8542 ));
  driver_control_SLICE_84 \driver_control/SLICE_84 ( 
    .A1(\driver_control/force_trigger_count_22 ), 
    .A0(\driver_control/force_trigger_count_21 ), 
    .DI1(\driver_control/n103_adj_1540 ), .DI0(\driver_control/n104_adj_1539 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8459 ), .F0(\driver_control/n104_adj_1539 ), 
    .Q0(\driver_control/force_trigger_count_21 ), 
    .F1(\driver_control/n103_adj_1540 ), 
    .Q1(\driver_control/force_trigger_count_22 ), .FCO(\driver_control/n8460 ));
  driver_control_SLICE_85 \driver_control/SLICE_85 ( .A1(period_21), 
    .A0(period_20), .M1(drive_current_5), .M0(drive_current_4), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8494 ), 
    .F0(pulse_active_N_1287_20), .Q0(\driver_control/drive_current_reg_4 ), 
    .F1(pulse_active_N_1287_21), .Q1(\driver_control/drive_current_reg_5 ), 
    .FCO(\driver_control/n8495 ));
  driver_control_SLICE_86 \driver_control/SLICE_86 ( 
    .A1(\driver_control/force_trigger_count_20 ), 
    .A0(\driver_control/force_trigger_count_19 ), 
    .DI1(\driver_control/n105_adj_1538 ), .DI0(\driver_control/n106_adj_1537 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8458 ), .F0(\driver_control/n106_adj_1537 ), 
    .Q0(\driver_control/force_trigger_count_19 ), 
    .F1(\driver_control/n105_adj_1538 ), 
    .Q1(\driver_control/force_trigger_count_20 ), .FCO(\driver_control/n8459 ));
  driver_control_SLICE_87 \driver_control/SLICE_87 ( .A1(period_19), 
    .A0(period_18), .M1(drive_current_3), .M0(drive_current_2), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8493 ), 
    .F0(pulse_active_N_1287_18), .Q0(\driver_control/drive_current_reg_2 ), 
    .F1(pulse_active_N_1287_19), .Q1(\driver_control/drive_current_reg_3 ), 
    .FCO(\driver_control/n8494 ));
  driver_control_SLICE_88 \driver_control/SLICE_88 ( 
    .B1(\driver_control/period_d2_12 ), 
    .A1(\driver_control/force_trigger_count_d2_12 ), 
    .B0(\driver_control/period_d2_11 ), 
    .A0(\driver_control/force_trigger_count_d2_11 ), 
    .M1(\driver_control/period_d_9 ), .M0(\driver_control/period_d_8 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8540 ), 
    .Q0(\driver_control/period_d2_8 ), .Q1(\driver_control/period_d2_9 ), 
    .FCO(\driver_control/n8541 ));
  driver_control_SLICE_89 \driver_control/SLICE_89 ( .A1(period_17), 
    .A0(period_16), .M1(drive_current_15), .M0(drive_current_14), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8492 ), 
    .F0(pulse_active_N_1287_16), .Q0(\driver_control/drive_current_reg_14 ), 
    .F1(pulse_active_N_1287_17), .Q1(\driver_control/drive_current_reg_15 ), 
    .FCO(\driver_control/n8493 ));
  driver_control_SLICE_90 \driver_control/SLICE_90 ( 
    .A1(\driver_control/force_trigger_count_18 ), 
    .A0(\driver_control/force_trigger_count_17 ), 
    .DI1(\driver_control/n107_adj_1536 ), .DI0(\driver_control/n108_adj_1535 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8457 ), .F0(\driver_control/n108_adj_1535 ), 
    .Q0(\driver_control/force_trigger_count_17 ), 
    .F1(\driver_control/n107_adj_1536 ), 
    .Q1(\driver_control/force_trigger_count_18 ), .FCO(\driver_control/n8458 ));
  driver_control_SLICE_91 \driver_control/SLICE_91 ( .A1(period_15), 
    .A0(period_14), .M1(drive_current_13), .M0(drive_current_12), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8491 ), 
    .F0(pulse_active_N_1287_14), .Q0(\driver_control/drive_current_reg_12 ), 
    .F1(pulse_active_N_1287_15), .Q1(\driver_control/drive_current_reg_13 ), 
    .FCO(\driver_control/n8492 ));
  driver_control_SLICE_92 \driver_control/SLICE_92 ( .A1(period_13), 
    .A0(period_12), .M1(drive_current_11), .M0(drive_current_10), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8490 ), 
    .F0(pulse_active_N_1287_12), .Q0(\driver_control/drive_current_reg_10 ), 
    .F1(pulse_active_N_1287_13), .Q1(\driver_control/drive_current_reg_11 ), 
    .FCO(\driver_control/n8491 ));
  driver_control_SLICE_93 \driver_control/SLICE_93 ( 
    .B1(\driver_control/period_d2_10 ), 
    .A1(\driver_control/force_trigger_count_d2_10 ), 
    .B0(\driver_control/period_d2_9 ), 
    .A0(\driver_control/force_trigger_count_d2_9 ), 
    .M1(\driver_control/period_d_7 ), .M0(\driver_control/period_d_6 ), 
    .CLK(\driver_control/clk_count[3] ), .FCI(\driver_control/n8539 ), 
    .Q0(\driver_control/period_d2_6 ), .Q1(\driver_control/period_d2_7 ), 
    .FCO(\driver_control/n8540 ));
  driver_control_SLICE_94 \driver_control/SLICE_94 ( 
    .B1(\driver_control/period_d2_8 ), 
    .A1(\driver_control/force_trigger_count_d2_8 ), 
    .B0(\driver_control/period_d2_7 ), 
    .A0(\driver_control/force_trigger_count_d2_7 ), .M1(period_3), 
    .M0(period_23), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8538 ), .Q0(\driver_control/period_d_23 ), 
    .Q1(\driver_control/period_d_3 ), .FCO(\driver_control/n8539 ));
  driver_control_SLICE_95 \driver_control/SLICE_95 ( .A1(period_11), 
    .A0(period_10), .M1(drive_current_1), .M0(drive_current_0), 
    .CE(dynamic_control_0), .CLK(clk_25mhz_c), .FCI(\driver_control/n8489 ), 
    .F0(pulse_active_N_1287_10), .Q0(\driver_control/drive_current_reg_0 ), 
    .F1(pulse_active_N_1287_11), .Q1(\driver_control/drive_current_reg_1 ), 
    .FCO(\driver_control/n8490 ));
  driver_control_SLICE_96 \driver_control/SLICE_96 ( .A1(period_9), 
    .A0(period_8), .M1(\driver_control/period_d_15 ), 
    .M0(\driver_control/period_d_14 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8488 ), .F0(pulse_active_N_1287_8), 
    .Q0(\driver_control/period_d2_14 ), .F1(pulse_active_N_1287_9), 
    .Q1(\driver_control/period_d2_15 ), .FCO(\driver_control/n8489 ));
  driver_control_SLICE_97 \driver_control/SLICE_97 ( .A1(period_7), 
    .A0(period_6), .M1(\driver_control/period_d_13 ), 
    .M0(\driver_control/period_d_12 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8487 ), .F0(pulse_active_N_1287_6), 
    .Q0(\driver_control/period_d2_12 ), .F1(pulse_active_N_1287_7), 
    .Q1(\driver_control/period_d2_13 ), .FCO(\driver_control/n8488 ));
  driver_control_SLICE_98 \driver_control/SLICE_98 ( 
    .A1(\driver_control/force_trigger_count_16 ), 
    .A0(\driver_control/force_trigger_count_15 ), 
    .DI1(\driver_control/n109_adj_1534 ), .DI0(\driver_control/n110_adj_1533 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8456 ), .F0(\driver_control/n110_adj_1533 ), 
    .Q0(\driver_control/force_trigger_count_15 ), 
    .F1(\driver_control/n109_adj_1534 ), 
    .Q1(\driver_control/force_trigger_count_16 ), .FCO(\driver_control/n8457 ));
  driver_control_SLICE_99 \driver_control/SLICE_99 ( 
    .A1(\driver_control/force_trigger_count_14 ), 
    .A0(\driver_control/force_trigger_count_13 ), 
    .DI1(\driver_control/n111_adj_1532 ), .DI0(\driver_control/n112_adj_1531 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8455 ), .F0(\driver_control/n112_adj_1531 ), 
    .Q0(\driver_control/force_trigger_count_13 ), 
    .F1(\driver_control/n111_adj_1532 ), 
    .Q1(\driver_control/force_trigger_count_14 ), .FCO(\driver_control/n8456 ));
  driver_control_SLICE_100 \driver_control/SLICE_100 ( .A1(period_5), 
    .A0(period_4), .M1(\driver_control/period_d_11 ), 
    .M0(\driver_control/period_d_10 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8486 ), .F0(pulse_active_N_1287_4), 
    .Q0(\driver_control/period_d2_10 ), .F1(pulse_active_N_1287_5), 
    .Q1(\driver_control/period_d2_11 ), .FCO(\driver_control/n8487 ));
  driver_control_SLICE_101 \driver_control/SLICE_101 ( 
    .A1(\driver_control/force_trigger_count_12 ), 
    .A0(\driver_control/force_trigger_count_11 ), 
    .DI1(\driver_control/n113_adj_1530 ), .DI0(\driver_control/n114_adj_1529 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8454 ), .F0(\driver_control/n114_adj_1529 ), 
    .Q0(\driver_control/force_trigger_count_11 ), 
    .F1(\driver_control/n113_adj_1530 ), 
    .Q1(\driver_control/force_trigger_count_12 ), .FCO(\driver_control/n8455 ));
  driver_control_SLICE_102 \driver_control/SLICE_102 ( 
    .A1(\driver_control/force_trigger_count_10 ), 
    .A0(\driver_control/force_trigger_count_9 ), 
    .DI1(\driver_control/n115_adj_1528 ), .DI0(\driver_control/n116_adj_1527 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8453 ), .F0(\driver_control/n116_adj_1527 ), 
    .Q0(\driver_control/force_trigger_count_9 ), 
    .F1(\driver_control/n115_adj_1528 ), 
    .Q1(\driver_control/force_trigger_count_10 ), .FCO(\driver_control/n8454 ));
  driver_control_SLICE_103 \driver_control/SLICE_103 ( 
    .B1(\driver_control/period_d2_6 ), 
    .A1(\driver_control/force_trigger_count_d2_6 ), 
    .B0(\driver_control/period_d2_5 ), 
    .A0(\driver_control/force_trigger_count_d2_5 ), .M1(period_22), 
    .M0(period_21), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8537 ), .Q0(\driver_control/period_d_21 ), 
    .Q1(\driver_control/period_d_22 ), .FCO(\driver_control/n8538 ));
  driver_control_SLICE_104 \driver_control/SLICE_104 ( .A1(period_3), 
    .A0(period_2), .M1(\driver_control/period_d_1 ), 
    .M0(\driver_control/period_d_0 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8485 ), .F0(pulse_active_N_1287_2), 
    .Q0(\driver_control/period_d2_0 ), .F1(pulse_active_N_1287_3), 
    .Q1(\driver_control/period_d2_1 ), .FCO(\driver_control/n8486 ));
  driver_control_SLICE_105 \driver_control/SLICE_105 ( 
    .B1(\driver_control/period_d2_4 ), 
    .A1(\driver_control/force_trigger_count_d2_4 ), 
    .B0(\driver_control/period_d2_3 ), 
    .A0(\driver_control/force_trigger_count_d2_3 ), .M1(period_20), 
    .M0(period_2), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8536 ), .Q0(\driver_control/period_d_2 ), 
    .Q1(\driver_control/period_d_20 ), .FCO(\driver_control/n8537 ));
  driver_control_SLICE_106 \driver_control/SLICE_106 ( 
    .A1(\driver_control/force_trigger_count_8 ), 
    .A0(\driver_control/force_trigger_count_7 ), 
    .DI1(\driver_control/n117_adj_1526 ), .DI0(\driver_control/n118_adj_1525 ), 
    .LSR(\driver_control/n518 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8452 ), .F0(\driver_control/n118_adj_1525 ), 
    .Q0(\driver_control/force_trigger_count_7 ), 
    .F1(\driver_control/n117_adj_1526 ), 
    .Q1(\driver_control/force_trigger_count_8 ), .FCO(\driver_control/n8453 ));
  driver_control_SLICE_107 \driver_control/SLICE_107 ( .A1(period_1), 
    .M1(\driver_control/drive_current_reg_5 ), 
    .M0(\driver_control/drive_current_reg_4 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .Q0(\driver_control/data_8 ), 
    .F1(pulse_active_N_1287_1), .Q1(\driver_control/data_9 ), 
    .FCO(\driver_control/n8485 ));
  driver_control_SLICE_108 \driver_control/SLICE_108 ( 
    .B1(\driver_control/period_d2_2 ), 
    .A1(\driver_control/force_trigger_count_d2_2 ), 
    .B0(\driver_control/period_d2_1 ), 
    .A0(\driver_control/force_trigger_count_d2_1 ), .M1(period_19), 
    .M0(period_18), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8535 ), .Q0(\driver_control/period_d_18 ), 
    .Q1(\driver_control/period_d_19 ), .FCO(\driver_control/n8536 ));
  driver_control_SLICE_109 \driver_control/SLICE_109 ( .A0(pulse_count_23), 
    .DI0(\driver_control/n102 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_27 ), 
    .LSR(\driver_control/n5228 ), .CLK(\driver_control/clk_count[3] ), 
    .FCI(\driver_control/n8484 ), .F0(\driver_control/n102 ), 
    .Q0(pulse_count_23));
  driver_control_SLICE_110 \driver_control/SLICE_110 ( 
    .B1(\driver_control/period_d2_0 ), 
    .A1(\driver_control/force_trigger_count_d2_0 ), 
    .M1(\driver_control/period_d_5 ), .M0(\driver_control/period_d_4 ), 
    .CLK(\driver_control/clk_count[3] ), .Q0(\driver_control/period_d2_4 ), 
    .Q1(\driver_control/period_d2_5 ), .FCO(\driver_control/n8535 ));
  i2c_slave_top_registers_SLICE_111 \i2c_slave_top/registers/SLICE_111 ( 
    .A0(\i2c_slave_top/registers/addr_i_7 ), 
    .FCI(\i2c_slave_top/registers/n8440 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_838_7 ));
  i2c_slave_top_registers_SLICE_112 \i2c_slave_top/registers/SLICE_112 ( 
    .A1(\i2c_slave_top/registers/n10111 ), 
    .A0(\i2c_slave_top/registers/n10106 ), 
    .FCI(\i2c_slave_top/registers/n8439 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_838_5 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_838_6 ), 
    .FCO(\i2c_slave_top/registers/n8440 ));
  i2c_slave_top_SLICE_113 \i2c_slave_top/SLICE_113 ( 
    .A1(\i2c_slave_top/registers/n10100 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .CLK(clk_25mhz_c), .FCI(\i2c_slave_top/registers/n8437 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_838_1 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    , .F1(\i2c_slave_top/registers/addr_i_7_N_838_2 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i )
    , .FCO(\i2c_slave_top/registers/n8438 ));
  i2c_slave_top_registers_SLICE_114 \i2c_slave_top/registers/SLICE_114 ( 
    .A1(\i2c_slave_top/registers/n10107 ), 
    .A0(\i2c_slave_top/registers/addr_i_3 ), 
    .FCI(\i2c_slave_top/registers/n8438 ), 
    .F0(\i2c_slave_top/registers/addr_i_7_N_838_3 ), 
    .F1(\i2c_slave_top/registers/addr_i_7_N_838_4 ), 
    .FCO(\i2c_slave_top/registers/n8439 ));
  i2c_slave_top_SLICE_115 \i2c_slave_top/SLICE_115 ( 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    , .F1(\i2c_slave_top/registers/addr_i_7_N_838_0 ), 
    .FCO(\i2c_slave_top/registers/n8437 ));
  SLICE_116 SLICE_116( .B0(pulse_count_23), .A0(pulse_active_N_1287_23), 
    .FCI(n8534), .F1(n2729));
  SLICE_117 SLICE_117( .B1(pulse_count_22), .A1(pulse_active_N_1287_22), 
    .B0(pulse_count_21), .A0(pulse_active_N_1287_21), .FCI(n8533), .FCO(n8534));
  adc_control_SLICE_118 \adc_control/SLICE_118 ( .A0(\adc_control/count_7 ), 
    .DI0(\adc_control/n248 ), .CE(\adc_control/adc_sck_temp_enable_39 ), 
    .LSR(\adc_control/n6459 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n8558 ), .F0(\adc_control/n248 ), 
    .Q0(\adc_control/count_7 ));
  adc_control_SLICE_119 \adc_control/SLICE_119 ( .A1(\adc_control/count_6 ), 
    .A0(\adc_control/count_5 ), .DI1(\adc_control/n249 ), 
    .DI0(\adc_control/n250 ), .CE(\adc_control/adc_sck_temp_enable_39 ), 
    .LSR(\adc_control/n6459 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n8557 ), .F0(\adc_control/n250 ), 
    .Q0(\adc_control/count_5 ), .F1(\adc_control/n249 ), 
    .Q1(\adc_control/count_6 ), .FCO(\adc_control/n8558 ));
  adc_control_SLICE_120 \adc_control/SLICE_120 ( .A1(\adc_control/count_4 ), 
    .A0(\adc_control/count_3 ), .DI1(\adc_control/n251 ), 
    .DI0(\adc_control/n252 ), .CE(\adc_control/adc_sck_temp_enable_39 ), 
    .LSR(\adc_control/n6459 ), .CLK(\adc_control/adc_sck_temp ), 
    .FCI(\adc_control/n8556 ), .F0(\adc_control/n252 ), 
    .Q0(\adc_control/count_3 ), .F1(\adc_control/n251 ), 
    .Q1(\adc_control/count_4 ), .FCO(\adc_control/n8557 ));
  adc_control_SLICE_121 \adc_control/SLICE_121 ( .A1(\adc_control/count_2 ), 
    .A0(count_1), .DI1(\adc_control/n253 ), .DI0(\adc_control/n254 ), 
    .CE(\adc_control/adc_sck_temp_enable_39 ), .LSR(\adc_control/n6459 ), 
    .CLK(\adc_control/adc_sck_temp ), .FCI(\adc_control/n8555 ), 
    .F0(\adc_control/n254 ), .Q0(count_1), .F1(\adc_control/n253 ), 
    .Q1(\adc_control/count_2 ), .FCO(\adc_control/n8556 ));
  adc_control_SLICE_122 \adc_control/SLICE_122 ( .A1(\adc_control/count_0 ), 
    .DI1(\adc_control/n255 ), .CE(\adc_control/adc_sck_temp_enable_39 ), 
    .LSR(\adc_control/n6459 ), .CLK(\adc_control/adc_sck_temp ), 
    .F1(\adc_control/n255 ), .Q1(\adc_control/count_0 ), 
    .FCO(\adc_control/n8555 ));
  adc_control_SLICE_123 \adc_control/SLICE_123 ( 
    .A0(\adc_control/convert_count_7 ), .DI0(\adc_control/n38 ), 
    .CE(\adc_control/clk_25mhz_c_enable_172 ), .LSR(\adc_control/n5255 ), 
    .CLK(clk_25mhz_c), .FCI(\adc_control/n8550 ), .F0(\adc_control/n38 ), 
    .Q0(\adc_control/convert_count_7 ));
  adc_control_SLICE_124 \adc_control/SLICE_124 ( 
    .A1(\adc_control/convert_count_6 ), .A0(\adc_control/convert_count_5 ), 
    .DI1(\adc_control/n39 ), .DI0(\adc_control/n40 ), 
    .CE(\adc_control/clk_25mhz_c_enable_172 ), .LSR(\adc_control/n5255 ), 
    .CLK(clk_25mhz_c), .FCI(\adc_control/n8549 ), .F0(\adc_control/n40 ), 
    .Q0(\adc_control/convert_count_5 ), .F1(\adc_control/n39 ), 
    .Q1(\adc_control/convert_count_6 ), .FCO(\adc_control/n8550 ));
  adc_control_SLICE_125 \adc_control/SLICE_125 ( 
    .A1(\adc_control/convert_count_4 ), .A0(\adc_control/convert_count_3 ), 
    .DI1(\adc_control/n41 ), .DI0(\adc_control/n42 ), 
    .CE(\adc_control/clk_25mhz_c_enable_172 ), .LSR(\adc_control/n5255 ), 
    .CLK(clk_25mhz_c), .FCI(\adc_control/n8548 ), .F0(\adc_control/n42 ), 
    .Q0(\adc_control/convert_count_3 ), .F1(\adc_control/n41 ), 
    .Q1(\adc_control/convert_count_4 ), .FCO(\adc_control/n8549 ));
  adc_control_SLICE_126 \adc_control/SLICE_126 ( 
    .A1(\adc_control/convert_count_2 ), .A0(\adc_control/convert_count_1 ), 
    .DI1(\adc_control/n43 ), .DI0(\adc_control/n44 ), 
    .CE(\adc_control/clk_25mhz_c_enable_172 ), .LSR(\adc_control/n5255 ), 
    .CLK(clk_25mhz_c), .FCI(\adc_control/n8547 ), .F0(\adc_control/n44 ), 
    .Q0(\adc_control/convert_count_1 ), .F1(\adc_control/n43 ), 
    .Q1(\adc_control/convert_count_2 ), .FCO(\adc_control/n8548 ));
  adc_control_SLICE_127 \adc_control/SLICE_127 ( 
    .A1(\adc_control/convert_count_0 ), .DI1(\adc_control/n45 ), 
    .CE(\adc_control/clk_25mhz_c_enable_172 ), .LSR(\adc_control/n5255 ), 
    .CLK(clk_25mhz_c), .F1(\adc_control/n45 ), 
    .Q1(\adc_control/convert_count_0 ), .FCO(\adc_control/n8547 ));
  SLICE_128 SLICE_128( .A0(\heart_beat/prescale[15] ), .DI0(\heart_beat/n70 ), 
    .M1(\driver_control/force_trigger_count_d_8 ), .CLK(clk_25mhz_c), 
    .FCI(\heart_beat/n8448 ), .F0(\heart_beat/n70 ), 
    .Q0(\heart_beat/prescale[15] ), 
    .Q1(\driver_control/force_trigger_count_d2_8 ));
  heart_beat_SLICE_129 \heart_beat/SLICE_129 ( .A1(\heart_beat/n2 ), 
    .A0(\heart_beat/n3 ), .DI1(\heart_beat/n71 ), .DI0(\heart_beat/n72 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8447 ), .F0(\heart_beat/n72 ), 
    .Q0(\heart_beat/n3 ), .F1(\heart_beat/n71 ), .Q1(\heart_beat/n2 ), 
    .FCO(\heart_beat/n8448 ));
  heart_beat_SLICE_130 \heart_beat/SLICE_130 ( .A1(\heart_beat/n4 ), 
    .A0(\heart_beat/n5 ), .DI1(\heart_beat/n73 ), .DI0(\heart_beat/n74 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8446 ), .F0(\heart_beat/n74 ), 
    .Q0(\heart_beat/n5 ), .F1(\heart_beat/n73 ), .Q1(\heart_beat/n4 ), 
    .FCO(\heart_beat/n8447 ));
  heart_beat_SLICE_131 \heart_beat/SLICE_131 ( .A1(\heart_beat/n6 ), 
    .A0(\heart_beat/n7 ), .DI1(\heart_beat/n75 ), .DI0(\heart_beat/n76 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8445 ), .F0(\heart_beat/n76 ), 
    .Q0(\heart_beat/n7 ), .F1(\heart_beat/n75 ), .Q1(\heart_beat/n6 ), 
    .FCO(\heart_beat/n8446 ));
  heart_beat_SLICE_132 \heart_beat/SLICE_132 ( .A0(heartbeat_n_c_7), 
    .DI0(\heart_beat/n38 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n8436 ), .F0(\heart_beat/n38 ), .Q0(heartbeat_n_c_7));
  heart_beat_SLICE_133 \heart_beat/SLICE_133 ( .A1(\heart_beat/n8_adj_1500 ), 
    .A0(\heart_beat/n9 ), .DI1(\heart_beat/n77 ), .DI0(\heart_beat/n78 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8444 ), .F0(\heart_beat/n78 ), 
    .Q0(\heart_beat/n9 ), .F1(\heart_beat/n77 ), .Q1(\heart_beat/n8_adj_1500 ), 
    .FCO(\heart_beat/n8445 ));
  heart_beat_SLICE_134 \heart_beat/SLICE_134 ( .A1(\heart_beat/n10 ), 
    .A0(\heart_beat/n11 ), .DI1(\heart_beat/n79 ), .DI0(\heart_beat/n80 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8443 ), .F0(\heart_beat/n80 ), 
    .Q0(\heart_beat/n11 ), .F1(\heart_beat/n79 ), .Q1(\heart_beat/n10 ), 
    .FCO(\heart_beat/n8444 ));
  heart_beat_SLICE_135 \heart_beat/SLICE_135 ( .A1(\heart_beat/n12 ), 
    .A0(\heart_beat/n13 ), .DI1(\heart_beat/n81 ), .DI0(\heart_beat/n82 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8442 ), .F0(\heart_beat/n82 ), 
    .Q0(\heart_beat/n13 ), .F1(\heart_beat/n81 ), .Q1(\heart_beat/n12 ), 
    .FCO(\heart_beat/n8443 ));
  heart_beat_SLICE_136 \heart_beat/SLICE_136 ( .A1(\heart_beat/n14 ), 
    .A0(\heart_beat/n15 ), .DI1(\heart_beat/n83 ), .DI0(\heart_beat/n84 ), 
    .CLK(clk_25mhz_c), .FCI(\heart_beat/n8441 ), .F0(\heart_beat/n84 ), 
    .Q0(\heart_beat/n15 ), .F1(\heart_beat/n83 ), .Q1(\heart_beat/n14 ), 
    .FCO(\heart_beat/n8442 ));
  heart_beat_SLICE_137 \heart_beat/SLICE_137 ( .A1(\heart_beat/n4_adj_1503 ), 
    .A0(\heart_beat/n5_adj_1504 ), .DI1(\heart_beat/n41 ), 
    .DI0(\heart_beat/n42 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n8434 ), .F0(\heart_beat/n42 ), 
    .Q0(\heart_beat/n5_adj_1504 ), .F1(\heart_beat/n41 ), 
    .Q1(\heart_beat/n4_adj_1503 ), .FCO(\heart_beat/n8435 ));
  SLICE_138 SLICE_138( .A1(\heart_beat/n16 ), .DI1(\heart_beat/n85 ), 
    .M0(\driver_control/force_trigger_count_d_7 ), .CLK(clk_25mhz_c), 
    .Q0(\driver_control/force_trigger_count_d2_7 ), .F1(\heart_beat/n85 ), 
    .Q1(\heart_beat/n16 ), .FCO(\heart_beat/n8441 ));
  heart_beat_SLICE_139 \heart_beat/SLICE_139 ( .A1(\heart_beat/n6_adj_1505 ), 
    .A0(\heart_beat/n7_adj_1506 ), .DI1(\heart_beat/n43 ), 
    .DI0(\heart_beat/n44 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n8433 ), .F0(\heart_beat/n44 ), 
    .Q0(\heart_beat/n7_adj_1506 ), .F1(\heart_beat/n43 ), 
    .Q1(\heart_beat/n6_adj_1505 ), .FCO(\heart_beat/n8434 ));
  heart_beat_SLICE_140 \heart_beat/SLICE_140 ( .A1(\heart_beat/n8 ), 
    .DI1(\heart_beat/n45 ), .CLK(\heart_beat/prescale[15] ), 
    .F1(\heart_beat/n45 ), .Q1(\heart_beat/n8 ), .FCO(\heart_beat/n8433 ));
  heart_beat_SLICE_141 \heart_beat/SLICE_141 ( .A1(\heart_beat/n2_adj_1501 ), 
    .A0(\heart_beat/n3_adj_1502 ), .DI1(\heart_beat/n39 ), 
    .DI0(\heart_beat/n40 ), .CLK(\heart_beat/prescale[15] ), 
    .FCI(\heart_beat/n8435 ), .F0(\heart_beat/n40 ), 
    .Q0(\heart_beat/n3_adj_1502 ), .F1(\heart_beat/n39 ), 
    .Q1(\heart_beat/n2_adj_1501 ), .FCO(\heart_beat/n8436 ));
  driver_control_SLICE_142 \driver_control/SLICE_142 ( 
    .A0(\driver_control/sck_temp ), .DI0(\driver_control/sck_temp_N_1251 ), 
    .M1(\driver_control/force_trigger_count_d_10 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/sck_temp_N_1251 ), .Q0(TA_spare1_c), 
    .Q1(\driver_control/force_trigger_count_d2_10 ));
  SLICE_145 SLICE_145( .D1(\driver_control/trigger_count_7 ), 
    .C1(\driver_control/n6_adj_1542 ), .B1(\driver_control/trigger_count_4 ), 
    .A1(TA_spare4_c), .DI0(n10281), .CE(\driver_control/trigger_ext_N_1318 ), 
    .LSR(\driver_control/n5220 ), .CLK(clk_25mhz_c), .F0(n10281), 
    .Q0(TA_spare4_c), .F1(\driver_control/n5220 ));
  adc_control_SLICE_146 \adc_control/SLICE_146 ( .B1(\adc_control/data_ready ), 
    .A1(\adc_control/adc_sck_temp ), .D0(\adc_control/adc_sck_temp ), 
    .C0(\adc_control/state_0 ), .B0(\adc_control/state_3 ), 
    .A0(\adc_control/state_2 ), .DI0(\adc_control/n9626 ), 
    .CE(\adc_control/state_1 ), .CLK(clk_25mhz_c), .F0(\adc_control/n9626 ), 
    .Q0(\adc_control/adc_sck_temp ), .F1(adc_sck_c));
  adc_control_SLICE_147 \adc_control/SLICE_147 ( .DI1(\n10280\002/BUF0 ), 
    .DI0(\n10280\003/BUF0 ), .CE(\adc_control/adc_sck_temp_enable_31 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\n10280\003/BUF0 ), 
    .Q0(\adc_control/capture_state_0 ), .F1(\n10280\002/BUF0 ), 
    .Q1(\adc_control/capture_state_1 ));
  adc_control_SLICE_148 \adc_control/SLICE_148 ( .D1(\adc_control/count_0 ), 
    .C1(\adc_control/n12 ), .B1(\adc_control/n16 ), .A1(\adc_control/count_4 ), 
    .D0(\adc_control/count_0 ), .C0(\adc_control/n12 ), .B0(\adc_control/n16 ), 
    .A0(\adc_control/count_4 ), .DI1(\adc_control/n3008 ), 
    .DI0(\adc_control/n10030 ), .CE(\adc_control/adc_sck_temp_enable_31 ), 
    .LSR(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n10030 ), 
    .Q0(\adc_control/capture_state_2 ), .F1(\adc_control/n3008 ), 
    .Q1(\adc_control/capture_state_3 ));
  adc_control_SLICE_149 \adc_control/SLICE_149 ( .B1(\adc_control/state_0 ), 
    .A1(\adc_control/state_1 ), .B0(\adc_control/state_0 ), 
    .A0(\adc_control/state_1 ), .DI0(\adc_control/n1414 ), 
    .CE(\adc_control/clk_25mhz_c_enable_175 ), .CLK(clk_25mhz_c), 
    .F0(\adc_control/n1414 ), .Q0(\adc_control/data_ready ), 
    .F1(\adc_control/n10108 ));
  adc_control_SLICE_150 \adc_control/SLICE_150 ( 
    .B1(\adc_control/sck_count_0 ), .A1(\adc_control/sck_count_1 ), 
    .A0(\adc_control/sck_count_0 ), .DI1(\adc_control/n24 ), 
    .DI0(\adc_control/n25 ), .CE(\adc_control/clk_25mhz_c_enable_173 ), 
    .LSR(\adc_control/n5252 ), .CLK(clk_25mhz_c), .F0(\adc_control/n25 ), 
    .Q0(\adc_control/sck_count_0 ), .F1(\adc_control/n24 ), 
    .Q1(\adc_control/sck_count_1 ));
  adc_control_SLICE_151 \adc_control/SLICE_151 ( 
    .D1(\adc_control/sck_count_3 ), .C1(\adc_control/sck_count_2 ), 
    .B1(\adc_control/sck_count_0 ), .A1(\adc_control/sck_count_1 ), 
    .C0(\adc_control/sck_count_2 ), .B0(\adc_control/sck_count_0 ), 
    .A0(\adc_control/sck_count_1 ), .DI1(\adc_control/n22 ), 
    .DI0(\adc_control/n23 ), .CE(\adc_control/clk_25mhz_c_enable_173 ), 
    .LSR(\adc_control/n5252 ), .CLK(clk_25mhz_c), .F0(\adc_control/n23 ), 
    .Q0(\adc_control/sck_count_2 ), .F1(\adc_control/n22 ), 
    .Q1(\adc_control/sck_count_3 ));
  adc_control_SLICE_152 \adc_control/SLICE_152 ( .D1(\adc_control/state_1 ), 
    .C1(\adc_control/n10279 ), .B1(\adc_control/state_0 ), 
    .A1(\adc_control/adc_convert_N_1490 ), .D0(\adc_control/state_1 ), 
    .C0(\adc_control/n10279 ), .B0(\adc_control/state_0 ), 
    .A0(\adc_control/adc_convert_N_1490 ), 
    .DI0(\adc_control/state_3_N_1368_0 ), .CLK(clk_25mhz_c), 
    .F0(\adc_control/state_3_N_1368_0 ), .Q0(\adc_control/state_0 ), 
    .F1(\adc_control/clk_25mhz_c_enable_146 ));
  adc_control_SLICE_153 \adc_control/SLICE_153 ( .D1(\adc_control/state_0 ), 
    .C1(\adc_control/n10279 ), .B1(\adc_control/data_ready_N_1495 ), 
    .A1(\adc_control/state_1 ), .C0(\adc_control/state_1 ), 
    .B0(\adc_control/state_0 ), .A0(\adc_control/data_ready_N_1495 ), 
    .DI0(\adc_control/n1466 ), .CE(\adc_control/clk_25mhz_c_enable_146 ), 
    .CLK(clk_25mhz_c), .F0(\adc_control/n1466 ), .Q0(\adc_control/state_1 ), 
    .F1(\adc_control/n5252 ));
  adc_control_SLICE_154 \adc_control/SLICE_154 ( .D1(\adc_control/state_1 ), 
    .C1(\adc_control/state_0 ), .B1(\adc_control/state_3 ), 
    .A1(\adc_control/state_2 ), .D0(\adc_control/state_2 ), 
    .C0(\adc_control/state_3 ), .B0(\adc_control/n10108 ), 
    .A0(\adc_control/adc_convert_N_1490 ), .DI0(\adc_control/n9631 ), 
    .CE(\adc_control/state_2 ), .CLK(clk_25mhz_c), .F0(\adc_control/n9631 ), 
    .Q0(\adc_control/state_2 ), .F1(\adc_control/clk_25mhz_c_enable_173 ));
  adc_control_SLICE_155 \adc_control/SLICE_155 ( .D1(\adc_control/n10108 ), 
    .C1(\adc_control/adc_convert_N_1490 ), .B1(\adc_control/state_3 ), 
    .A1(\adc_control/state_2 ), .D0(\adc_control/state_3 ), 
    .C0(\adc_control/state_2 ), .B0(\adc_control/n10108 ), 
    .A0(\adc_control/adc_convert_N_1490 ), .DI0(\adc_control/n9630 ), 
    .CE(\adc_control/state_3 ), .CLK(clk_25mhz_c), .F0(\adc_control/n9630 ), 
    .Q0(\adc_control/state_3 ), .F1(\adc_control/n5255 ));
  adc_control_SLICE_156 \adc_control/SLICE_156 ( 
    .D0(\adc_control/voltage_data_1 ), .C0(adc_sdo_c), 
    .B0(\adc_control/count_2 ), .A0(n10016), .DI0(\adc_control/n9632 ), 
    .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9632 ), 
    .Q0(\adc_control/voltage_data_1 ));
  adc_control_SLICE_157 \adc_control/SLICE_157 ( 
    .D1(\adc_control/capture_state_3 ), .C1(\adc_control/count_3 ), 
    .B1(\adc_control/capture_state_0 ), .A1(\adc_control/capture_state_1 ), 
    .D0(\adc_control/voltage_data_2 ), .C0(adc_sdo_c), 
    .B0(\adc_control/n10033 ), .A0(\adc_control/n91 ), 
    .DI0(\adc_control/n9633 ), .CE(count_1), .CLK(\adc_control/adc_sck_temp ), 
    .F0(\adc_control/n9633 ), .Q0(\adc_control/voltage_data_2 ), 
    .F1(\adc_control/n10033 ));
  adc_control_SLICE_158 \adc_control/SLICE_158 ( .B1(\adc_control/count_0 ), 
    .A1(count_1), .D0(\adc_control/voltage_data_3 ), .C0(adc_sdo_c), 
    .B0(count_1), .A0(\adc_control/count_0 ), .DI0(\adc_control/n9634 ), 
    .CE(\adc_control/adc_sck_temp_enable_20 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9634 ), 
    .Q0(\adc_control/voltage_data_3 ), .F1(adc_sck_temp_enable_28));
  adc_control_SLICE_159 \adc_control/SLICE_159 ( 
    .D0(\adc_control/voltage_data_5 ), .C0(adc_sdo_c), .B0(n10016), 
    .A0(\adc_control/count_2 ), .DI0(\adc_control/n9636 ), 
    .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9636 ), 
    .Q0(\adc_control/voltage_data_5 ));
  adc_control_SLICE_160 \adc_control/SLICE_160 ( 
    .D1(\adc_control/voltage_data_7 ), .C1(adc_sdo_c), .B1(count_1), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/voltage_data_6 ), 
    .C0(adc_sdo_c), .B0(\adc_control/count_0 ), .A0(count_1), 
    .DI1(\adc_control/n9638 ), .DI0(\adc_control/n9637 ), 
    .CE(\adc_control/adc_sck_temp_enable_23 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9637 ), 
    .Q0(\adc_control/voltage_data_6 ), .F1(\adc_control/n9638 ), 
    .Q1(\adc_control/voltage_data_7 ));
  adc_control_SLICE_161 \adc_control/SLICE_161 ( .B1(\adc_control/count_0 ), 
    .A1(count_1), .D0(\adc_control/voltage_data_8 ), .C0(adc_sdo_c), 
    .B0(\adc_control/count_0 ), .A0(count_1), .DI0(\adc_control/n9639 ), 
    .CE(\adc_control/adc_sck_temp_enable_27 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9639 ), 
    .Q0(\adc_control/voltage_data_8 ), 
    .F1(\adc_control/adc_sck_temp_enable_29 ));
  adc_control_SLICE_162 \adc_control/SLICE_162 ( 
    .D0(\adc_control/voltage_data_9 ), .C0(adc_sdo_c), 
    .B0(\adc_control/count_2 ), .A0(\adc_control/n10032 ), 
    .DI0(\adc_control/n9640 ), .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9640 ), 
    .Q0(\adc_control/voltage_data_9 ));
  adc_control_SLICE_163 \adc_control/SLICE_163 ( 
    .D1(\adc_control/voltage_data_11 ), .C1(adc_sdo_c), .B1(count_1), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/voltage_data_10 ), 
    .C0(adc_sdo_c), .B0(\adc_control/count_0 ), .A0(count_1), 
    .DI1(\adc_control/n9642 ), .DI0(\adc_control/n9641 ), 
    .CE(\adc_control/adc_sck_temp_enable_27 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9641 ), 
    .Q0(\adc_control/voltage_data_10 ), .F1(\adc_control/n9642 ), 
    .Q1(\adc_control/voltage_data_11 ));
  adc_control_SLICE_164 \adc_control/SLICE_164 ( .B1(\adc_control/count_5 ), 
    .A1(\adc_control/count_2 ), .D0(\adc_control/voltage_data_12 ), 
    .C0(adc_sdo_c), .B0(\adc_control/n10032 ), .A0(\adc_control/count_2 ), 
    .DI0(\adc_control/n9643 ), .CE(adc_sck_temp_enable_28), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9643 ), 
    .Q0(\adc_control/voltage_data_12 ), .F1(\adc_control/n12 ));
  adc_control_SLICE_165 \adc_control/SLICE_165 ( 
    .D1(\adc_control/capture_state_2 ), .C1(\adc_control/count_3 ), 
    .B1(\adc_control/n10103 ), .A1(\adc_control/capture_state_3 ), 
    .D0(\adc_control/voltage_data_13 ), .C0(adc_sdo_c), 
    .B0(\adc_control/n10032 ), .A0(\adc_control/count_2 ), 
    .DI0(\adc_control/n9644 ), .CE(\adc_control/adc_sck_temp_enable_29 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n9644 ), 
    .Q0(\adc_control/voltage_data_13 ), .F1(\adc_control/n10032 ));
  adc_control_SLICE_166 \adc_control/SLICE_166 ( .B1(\adc_control/state_3 ), 
    .A1(\adc_control/state_2 ), .D0(adc_convert_c), .C0(\adc_control/n10279 ), 
    .B0(\adc_control/state_0 ), .A0(\adc_control/adc_convert_N_1490 ), 
    .DI0(\adc_control/n9627 ), .CE(\adc_control/state_1 ), .CLK(clk_25mhz_c), 
    .F0(\adc_control/n9627 ), .Q0(adc_convert_c), .F1(\adc_control/n10279 ));
  adc_control_SLICE_174 \adc_control/SLICE_174 ( .DI1(\n10280\001/BUF0 ), 
    .DI0(\n10280\000/BUF0 ), .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\n10280\000/BUF0 ), 
    .Q0(adc_voltage_data_14), .F1(\n10280\001/BUF0 ), .Q1(adc_voltage_data_15));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_175 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_175 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(count_i_3__N_128), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9584 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10085 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9464 ), 
    .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9464 ), 
    .Q0(count_i_3__N_128), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10085 ));
  SLICE_176 SLICE_176( .D0(n10096), .C0(d_ff), .B0(reset_n), 
    .A0(stop_detect_i), .M1(\driver_control/force_trigger_count_22 ), 
    .M0(stop_detect_i), .CLK(clk_25mhz_c), .F0(n10061), .Q0(d_ff), 
    .Q1(\driver_control/force_trigger_count_d_22 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_177 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_177 ( 
    .D1(n10095), .C1(n10113), 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(count_i_3__N_128), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10022 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10047 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9340 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1030 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1030 ), 
    .Q0(data_buffer_i_1), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9340 ));
  i2c_slave_top_SLICE_178 \i2c_slave_top/SLICE_178 ( 
    .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(data_buffer_i_1), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n10050 ), .DI0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_112 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10062 ), .Q0(drive_current_0), 
    .F1(\i2c_slave_top/n10050 ), .Q1(drive_current_1));
  i2c_slave_top_SLICE_179 \i2c_slave_top/SLICE_179 ( 
    .C1(\i2c_slave_top/data_buffer_i_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n10053 ), .DI0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_112 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10051 ), .Q0(drive_current_2), 
    .F1(\i2c_slave_top/n10053 ), .Q1(drive_current_3));
  i2c_slave_top_SLICE_180 \i2c_slave_top/SLICE_180 ( 
    .C1(\i2c_slave_top/data_buffer_i_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n10056 ), .DI0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_112 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10055 ), .Q0(drive_current_4), 
    .F1(\i2c_slave_top/n10056 ), .Q1(drive_current_5));
  i2c_slave_top_SLICE_181 \i2c_slave_top/SLICE_181 ( 
    .C1(\i2c_slave_top/data_buffer_i_8 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/n10058 ), .DI0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_112 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10057 ), .Q0(drive_current_6), 
    .F1(\i2c_slave_top/n10058 ), .Q1(drive_current_7));
  i2c_slave_top_registers_SLICE_182 \i2c_slave_top/registers/SLICE_182 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_8), 
    .A0(period_16), .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_105 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1583 ), .Q0(drive_current_8), 
    .Q1(drive_current_9));
  i2c_slave_top_registers_SLICE_183 \i2c_slave_top/registers/SLICE_183 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_11), 
    .A0(period_19), .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_105 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1580 ), .Q0(drive_current_10), 
    .Q1(drive_current_11));
  i2c_slave_top_registers_SLICE_184 \i2c_slave_top/registers/SLICE_184 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_13), 
    .A0(period_21), .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_105 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1578 ), .Q0(drive_current_12), 
    .Q1(drive_current_13));
  i2c_slave_top_registers_SLICE_185 \i2c_slave_top/registers/SLICE_185 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_14), 
    .A0(period_22), .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_105 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1577 ), .Q0(drive_current_14), 
    .Q1(drive_current_15));
  driver_control_SLICE_187 \driver_control/SLICE_187 ( 
    .B0(\driver_control/all_trigger ), .A0(\driver_control/all_trigger_d ), 
    .M1(\driver_control/force_trigger_ext ), .M0(\driver_control/all_trigger ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/trigger_ext_N_1318 ), 
    .Q0(\driver_control/all_trigger_d ), .Q1(\driver_control/all_trigger ));
  driver_control_SLICE_188 \driver_control/SLICE_188 ( 
    .B1(\driver_control/n8290 ), .A1(\driver_control/n245 ), 
    .B0(\driver_control/n246 ), .A0(\driver_control/n8290 ), 
    .DI1(\driver_control/count_7_N_1212_1 ), 
    .DI0(\driver_control/count_7_N_1212_0 ), 
    .CE(\driver_control/sck_temp_enable_28 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/count_7_N_1212_0 ), 
    .Q0(\driver_control/count_0 ), .F1(\driver_control/count_7_N_1212_1 ), 
    .Q1(\driver_control/count_1 ));
  driver_control_SLICE_189 \driver_control/SLICE_189 ( 
    .B1(\driver_control/n243 ), .A1(\driver_control/n8290 ), 
    .B0(\driver_control/n8290 ), .A0(\driver_control/n244 ), 
    .DI1(\driver_control/count_7_N_1212_3 ), 
    .DI0(\driver_control/count_7_N_1212_2 ), 
    .CE(\driver_control/sck_temp_enable_28 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/count_7_N_1212_2 ), 
    .Q0(\driver_control/count_2 ), .F1(\driver_control/count_7_N_1212_3 ), 
    .Q1(\driver_control/count_3 ));
  driver_control_SLICE_190 \driver_control/SLICE_190 ( 
    .B1(\driver_control/n241 ), .A1(\driver_control/n8290 ), 
    .B0(\driver_control/n8290 ), .A0(\driver_control/n242 ), 
    .DI1(\driver_control/count_7_N_1212_5 ), 
    .DI0(\driver_control/count_7_N_1212_4 ), 
    .CE(\driver_control/sck_temp_enable_28 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/count_7_N_1212_4 ), 
    .Q0(\driver_control/count_4 ), .F1(\driver_control/count_7_N_1212_5 ), 
    .Q1(\driver_control/count_5 ));
  driver_control_SLICE_191 \driver_control/SLICE_191 ( 
    .B1(\driver_control/n239 ), .A1(\driver_control/n8290 ), 
    .B0(\driver_control/n240 ), .A0(\driver_control/n8290 ), 
    .DI1(\driver_control/count_7_N_1212_7 ), 
    .DI0(\driver_control/count_7_N_1212_6 ), 
    .CE(\driver_control/sck_temp_enable_28 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/count_7_N_1212_6 ), 
    .Q0(\driver_control/count_6 ), .F1(\driver_control/count_7_N_1212_7 ), 
    .Q1(\driver_control/count_7 ));
  driver_control_SLICE_192 \driver_control/SLICE_192 ( 
    .C1(\driver_control/cstate_0 ), .B1(\driver_control/n4538 ), 
    .A1(\driver_control/n12 ), .C0(\driver_control/cstate_3 ), 
    .B0(\driver_control/cstate_3_N_1168_1 ), .A0(\driver_control/cstate_0 ), 
    .DI1(\driver_control/n3200 ), .DI0(\driver_control/n9399 ), 
    .CE(\driver_control/clk_25mhz_c_enable_171 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/n9399 ), .Q0(\driver_control/cstate_0 ), 
    .F1(\driver_control/n3200 ), .Q1(\driver_control/cstate_3 ));
  driver_control_SLICE_193 \driver_control/SLICE_193 ( 
    .D1(\driver_control/cstate_3_N_1168_1 ), .C1(\driver_control/n9468 ), 
    .B1(\driver_control/cstate_0 ), .A1(\driver_control/cstate_3 ), 
    .C0(\driver_control/cstate_3_N_1168_1 ), 
    .B0(\driver_control/clk_25mhz_c_enable_147 ), 
    .A0(\driver_control/data_valid_reset ), .DI0(\driver_control/n4996 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n4996 ), 
    .Q0(\driver_control/cstate_3_N_1168_1 ), 
    .F1(\driver_control/clk_25mhz_c_enable_180 ));
  driver_control_SLICE_202 \driver_control/SLICE_202 ( .DI0(\n10281\009/BUF1 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .CLK(clk_25mhz_c), 
    .F0(\n10281\009/BUF1 ), .Q0(\driver_control/data_21 ));
  driver_control_SLICE_203 \driver_control/SLICE_203 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_5 ), .A1(\driver_control/data_temp_5 ), 
    .C0(\driver_control/data_4 ), .B0(\driver_control/state_3 ), 
    .A0(\driver_control/state_1 ), .DI1(\driver_control/n2489 ), 
    .DI0(\driver_control/n8561 ), .CE(\driver_control/sck_temp_enable_21 ), 
    .LSR(state_3__N_879), .CLK(\driver_control/sck_temp ), 
    .F0(\driver_control/n8561 ), .Q0(\driver_control/data_temp_5 ), 
    .F1(\driver_control/n2489 ), .Q1(\driver_control/data_temp_6 ));
  driver_control_SLICE_204 \driver_control/SLICE_204 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_7 ), .A1(\driver_control/data_temp_7 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_6 ), .A0(\driver_control/data_temp_6 ), 
    .DI1(\driver_control/n2487 ), .DI0(\driver_control/n2488 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2488 ), 
    .Q0(\driver_control/data_temp_7 ), .F1(\driver_control/n2487 ), 
    .Q1(\driver_control/data_temp_8 ));
  driver_control_SLICE_205 \driver_control/SLICE_205 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_9 ), .A1(\driver_control/data_temp_9 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_8 ), .A0(\driver_control/data_temp_8 ), 
    .DI1(\driver_control/n2485 ), .DI0(\driver_control/n2486 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2486 ), 
    .Q0(\driver_control/data_temp_9 ), .F1(\driver_control/n2485 ), 
    .Q1(\driver_control/data_temp_10 ));
  driver_control_SLICE_206 \driver_control/SLICE_206 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_11 ), .A1(\driver_control/data_temp_11 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_10 ), .A0(\driver_control/data_temp_10 ), 
    .DI1(\driver_control/n2483 ), .DI0(\driver_control/n2484 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2484 ), 
    .Q0(\driver_control/data_temp_11 ), .F1(\driver_control/n2483 ), 
    .Q1(\driver_control/data_temp_12 ));
  driver_control_SLICE_207 \driver_control/SLICE_207 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_13 ), .A1(\driver_control/data_temp_13 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_12 ), .A0(\driver_control/data_temp_12 ), 
    .DI1(\driver_control/n2481 ), .DI0(\driver_control/n2482 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2482 ), 
    .Q0(\driver_control/data_temp_13 ), .F1(\driver_control/n2481 ), 
    .Q1(\driver_control/data_temp_14 ));
  driver_control_SLICE_208 \driver_control/SLICE_208 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_15 ), .A1(\driver_control/data_temp_15 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_14 ), .A0(\driver_control/data_temp_14 ), 
    .DI1(\driver_control/n2479 ), .DI0(\driver_control/n2480 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2480 ), 
    .Q0(\driver_control/data_temp_15 ), .F1(\driver_control/n2479 ), 
    .Q1(\driver_control/data_temp_16 ));
  driver_control_SLICE_209 \driver_control/SLICE_209 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_17 ), .A1(\driver_control/data_temp_17 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_16 ), .A0(\driver_control/data_temp_16 ), 
    .DI1(\driver_control/n2477 ), .DI0(\driver_control/n2478 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2478 ), 
    .Q0(\driver_control/data_temp_17 ), .F1(\driver_control/n2477 ), 
    .Q1(\driver_control/data_temp_18 ));
  driver_control_SLICE_210 \driver_control/SLICE_210 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/data_19 ), .A1(\driver_control/data_temp_19 ), 
    .D0(\driver_control/state_3 ), .C0(\driver_control/state_1 ), 
    .B0(\driver_control/data_18 ), .A0(\driver_control/data_temp_18 ), 
    .DI1(\driver_control/n2475 ), .DI0(\driver_control/n2476 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2476 ), 
    .Q0(\driver_control/data_temp_19 ), .F1(\driver_control/n2475 ), 
    .Q1(\driver_control/data_temp_20 ));
  driver_control_SLICE_211 \driver_control/SLICE_211 ( 
    .D1(\driver_control/data_temp_21 ), .C1(\driver_control/state_3 ), 
    .B1(\driver_control/state_1 ), .A1(\driver_control/data_21 ), 
    .D0(\driver_control/data_temp_20 ), .C0(\driver_control/state_3 ), 
    .B0(\driver_control/state_1 ), .A0(\driver_control/data_21 ), 
    .DI1(\driver_control/n2473 ), .DI0(\driver_control/n2474 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2474 ), 
    .Q0(\driver_control/data_temp_21 ), .F1(\driver_control/n2473 ), 
    .Q1(\driver_control/data_temp_22 ));
  driver_control_SLICE_212 \driver_control/SLICE_212 ( 
    .C0(\driver_control/data_temp_22 ), .B0(\driver_control/state_3 ), 
    .A0(\driver_control/state_1 ), .DI0(\driver_control/n2472 ), 
    .CE(\driver_control/sck_temp_enable_21 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/n2472 ), 
    .Q0(\driver_control/data_temp_23 ));
  driver_control_SLICE_213 \driver_control/SLICE_213 ( 
    .B1(\driver_control/cstate_0 ), .A1(\driver_control/cstate_3 ), 
    .B0(\driver_control/cstate_0 ), .A0(\driver_control/cstate_3 ), 
    .DI0(\driver_control/n10084 ), 
    .CE(\driver_control/clk_25mhz_c_enable_180 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/n10084 ), .Q0(\driver_control/data_valid_reset ), 
    .F1(\driver_control/clk_25mhz_c_enable_181 ));
  driver_control_SLICE_247 \driver_control/SLICE_247 ( 
    .B0(\driver_control/force_trigger ), .A0(\driver_control/force_trigger_d ), 
    .DI0(\driver_control/force_trigger_ext_N_1349 ), 
    .M1(\driver_control/force_trigger ), .CLK(\driver_control/clk_count[3] ), 
    .F0(\driver_control/force_trigger_ext_N_1349 ), 
    .Q0(\driver_control/force_trigger_ext ), 
    .Q1(\driver_control/force_trigger_d ));
  driver_control_SLICE_248 \driver_control/SLICE_248 ( 
    .D1(\driver_control/index ), .C1(\driver_control/ldac_temp ), 
    .B1(\driver_control/ldac_temp_d ), .A1(\driver_control/load_dac_register ), 
    .D0(\driver_control/index ), .C0(\driver_control/ldac_temp ), 
    .B0(\driver_control/ldac_temp_d ), .A0(\driver_control/load_dac_register ), 
    .DI0(\driver_control/index_N_1348 ), 
    .M1(\driver_control/force_trigger_count_d_0 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/index_N_1348 ), .Q0(\driver_control/index ), 
    .F1(\driver_control/n5202 ), 
    .Q1(\driver_control/force_trigger_count_d2_0 ));
  driver_control_SLICE_249 \driver_control/SLICE_249 ( 
    .B1(\driver_control/pulse_active_N_1260_24 ), .A1(n2702), 
    .D0(pulse_state_3), .C0(\driver_control/pulse_state_1 ), 
    .B0(\driver_control/n10005 ), .A0(TA_spare4_c), 
    .DI0(\driver_control/n1231 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_3 ), 
    .CLK(\driver_control/clk_count[3] ), .F0(\driver_control/n1231 ), 
    .Q0(\driver_control/ldac_temp ), .F1(\driver_control/n10005 ));
  driver_control_SLICE_251 \driver_control/SLICE_251 ( 
    .C0(\driver_control/ldac_temp ), .B0(\driver_control/ldac_temp_d ), 
    .A0(\driver_control/load_dac_register ), 
    .M1(\driver_control/force_trigger_count_d_1 ), .M0(dynamic_control_0), 
    .CLK(clk_25mhz_c), .F0(\driver_control/clk_25mhz_c_enable_147 ), 
    .Q0(\driver_control/load_dac_register ), 
    .Q1(\driver_control/force_trigger_count_d2_1 ));
  driver_control_SLICE_252 \driver_control/SLICE_252 ( 
    .B1(\driver_control/state_3 ), .A1(\driver_control/state_1 ), 
    .C0(\driver_control/data_temp_23 ), .B0(\driver_control/state_3 ), 
    .A0(\driver_control/state_1 ), .DI0(\driver_control/mosi_temp_N_1335 ), 
    .CE(\driver_control/sck_temp_enable_30 ), .LSR(state_3__N_879), 
    .CLK(\driver_control/sck_temp ), .F0(\driver_control/mosi_temp_N_1335 ), 
    .Q0(\driver_control/mosi_temp ), .F1(\driver_control/sck_temp_enable_28 ));
  driver_control_SLICE_277 \driver_control/SLICE_277 ( .B1(pulse_state_3), 
    .A1(\driver_control/pulse_state_1 ), .C0(pulse_state_3), 
    .B0(\driver_control/pulse_state_1 ), .A0(TA_spare4_c), 
    .DI0(\driver_control/n9441 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_22 ), 
    .CLK(\driver_control/clk_count[3] ), .F0(\driver_control/n9441 ), 
    .Q0(\driver_control/pulse_state_1 ), 
    .F1(\driver_control/clk_count_3__N_891_enable_27 ));
  driver_control_SLICE_278 \driver_control/SLICE_278 ( 
    .D1(\driver_control/n6_adj_1545 ), .C1(\driver_control/total_count_4 ), 
    .B1(\driver_control/total_count_5 ), .A1(\driver_control/n5_adj_1544 ), 
    .D0(\driver_control/n12 ), .C0(\driver_control/n4538 ), 
    .B0(\driver_control/sck_temp ), .A0(\driver_control/cstate_0 ), 
    .DI0(\driver_control/n9401 ), .CE(\driver_control/clk_25mhz_c_enable_181 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n9401 ), 
    .Q0(\driver_control/sck_temp ), .F1(\driver_control/n12 ));
  driver_control_SLICE_279 \driver_control/SLICE_279 ( 
    .D1(\driver_control/state_3 ), .C1(\driver_control/state_1 ), 
    .B1(\driver_control/n8290 ), .A1(\driver_control/ss_temp ), 
    .C0(\driver_control/ss_temp ), .B0(\driver_control/cstate_3 ), 
    .A0(\driver_control/cstate_3_N_1168_1 ), .DI0(\driver_control/n9625 ), 
    .CE(\driver_control/cstate_0 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/n9625 ), .Q0(\driver_control/ss_temp ), 
    .F1(\driver_control/sck_temp_enable_29 ));
  driver_control_SLICE_280 \driver_control/SLICE_280 ( 
    .B1(\driver_control/n8290 ), .A1(\driver_control/state_1 ), 
    .C0(\driver_control/ss_temp ), .B0(\driver_control/state_3 ), 
    .A0(\driver_control/state_1 ), .DI1(\driver_control/n31 ), 
    .DI0(\driver_control/n8559 ), .CE(\driver_control/sck_temp_enable_29 ), 
    .LSR(state_3__N_879), .CLK(\driver_control/sck_temp ), 
    .F0(\driver_control/n8559 ), .Q0(\driver_control/state_1 ), 
    .F1(\driver_control/n31 ), .Q1(\driver_control/state_3 ));
  driver_control_SLICE_281 \driver_control/SLICE_281 ( 
    .D1(\driver_control/total_count_15_N_1152_1 ), 
    .C1(\driver_control/total_count_1 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_0 ), 
    .C0(\driver_control/total_count_0 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_1 ), 
    .DI0(\driver_control/total_count_15_N_980_0 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_0 ), 
    .Q0(\driver_control/total_count_0 ), 
    .F1(\driver_control/total_count_15_N_980_1 ), 
    .Q1(\driver_control/total_count_1 ));
  driver_control_SLICE_282 \driver_control/SLICE_282 ( 
    .D1(\driver_control/total_count_15_N_1152_3 ), 
    .C1(\driver_control/total_count_3 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_2 ), 
    .C0(\driver_control/total_count_2 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_3 ), 
    .DI0(\driver_control/total_count_15_N_980_2 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_2 ), 
    .Q0(\driver_control/total_count_2 ), 
    .F1(\driver_control/total_count_15_N_980_3 ), 
    .Q1(\driver_control/total_count_3 ));
  driver_control_SLICE_283 \driver_control/SLICE_283 ( 
    .D1(\driver_control/total_count_15_N_1152_5 ), 
    .C1(\driver_control/total_count_5 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_4 ), 
    .C0(\driver_control/total_count_4 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_5 ), 
    .DI0(\driver_control/total_count_15_N_980_4 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_4 ), 
    .Q0(\driver_control/total_count_4 ), 
    .F1(\driver_control/total_count_15_N_980_5 ), 
    .Q1(\driver_control/total_count_5 ));
  driver_control_SLICE_284 \driver_control/SLICE_284 ( 
    .D1(\driver_control/total_count_15_N_1152_7 ), 
    .C1(\driver_control/total_count_7 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_6 ), 
    .C0(\driver_control/total_count_6 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_7 ), 
    .DI0(\driver_control/total_count_15_N_980_6 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_6 ), 
    .Q0(\driver_control/total_count_6 ), 
    .F1(\driver_control/total_count_15_N_980_7 ), 
    .Q1(\driver_control/total_count_7 ));
  driver_control_SLICE_285 \driver_control/SLICE_285 ( 
    .D1(\driver_control/total_count_15_N_1152_9 ), 
    .C1(\driver_control/total_count_9 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), .D0(\driver_control/total_count_8 ), 
    .C0(\driver_control/total_count_15_N_1152_8 ), 
    .B0(\driver_control/cstate_0 ), .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_9 ), 
    .DI0(\driver_control/total_count_15_N_980_8 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_8 ), 
    .Q0(\driver_control/total_count_8 ), 
    .F1(\driver_control/total_count_15_N_980_9 ), 
    .Q1(\driver_control/total_count_9 ));
  driver_control_SLICE_286 \driver_control/SLICE_286 ( 
    .D1(\driver_control/total_count_11 ), 
    .C1(\driver_control/total_count_15_N_1152_11 ), 
    .B1(\driver_control/cstate_0 ), .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_10 ), 
    .C0(\driver_control/total_count_10 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_11 ), 
    .DI0(\driver_control/total_count_15_N_980_10 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_10 ), 
    .Q0(\driver_control/total_count_10 ), 
    .F1(\driver_control/total_count_15_N_980_11 ), 
    .Q1(\driver_control/total_count_11 ));
  driver_control_SLICE_287 \driver_control/SLICE_287 ( 
    .D1(\driver_control/total_count_15_N_1152_13 ), 
    .C1(\driver_control/total_count_13 ), .B1(\driver_control/cstate_0 ), 
    .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_15_N_1152_12 ), 
    .C0(\driver_control/total_count_12 ), .B0(\driver_control/cstate_0 ), 
    .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_13 ), 
    .DI0(\driver_control/total_count_15_N_980_12 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_12 ), 
    .Q0(\driver_control/total_count_12 ), 
    .F1(\driver_control/total_count_15_N_980_13 ), 
    .Q1(\driver_control/total_count_13 ));
  driver_control_SLICE_288 \driver_control/SLICE_288 ( 
    .D1(\driver_control/total_count_15 ), 
    .C1(\driver_control/total_count_15_N_1152_15 ), 
    .B1(\driver_control/cstate_0 ), .A1(\driver_control/cstate_3 ), 
    .D0(\driver_control/total_count_14 ), 
    .C0(\driver_control/total_count_15_N_1152_14 ), 
    .B0(\driver_control/cstate_0 ), .A0(\driver_control/cstate_3 ), 
    .DI1(\driver_control/total_count_15_N_980_15 ), 
    .DI0(\driver_control/total_count_15_N_980_14 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/total_count_15_N_980_14 ), 
    .Q0(\driver_control/total_count_14 ), 
    .F1(\driver_control/total_count_15_N_980_15 ), 
    .Q1(\driver_control/total_count_15 ));
  i2c_slave_top_registers_SLICE_289 \i2c_slave_top/registers/SLICE_289 ( 
    .B1(\i2c_slave_top/registers/dynamic_control_15 ), .A1(dynamic_control_0), 
    .D0(\i2c_slave_top/registers/n10018 ), .C0(data_buffer_i_1), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_0 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_0 ), 
    .Q0(dynamic_control_0), .F1(\i2c_slave_top/registers/n17 ));
  i2c_slave_top_SLICE_290 \i2c_slave_top/SLICE_290 ( .D0(n10095), 
    .C0(\i2c_slave_top/addr_start_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_N_1249_enable_8 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_594 ), .Q0(\i2c_slave_top/addr_start_0 ), 
    .Q1(\i2c_slave_top/addr_start_1 ));
  i2c_slave_top_SLICE_291 \i2c_slave_top/SLICE_291 ( .D0(n10095), 
    .C0(\i2c_slave_top/addr_start_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_N_1249_enable_8 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_618 ), .Q0(\i2c_slave_top/addr_start_2 ), 
    .Q1(\i2c_slave_top/addr_start_3 ));
  i2c_slave_top_SLICE_292 \i2c_slave_top/SLICE_292 ( .D0(n10095), 
    .C0(\i2c_slave_top/addr_start_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_N_1249_enable_8 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_590 ), .Q0(\i2c_slave_top/addr_start_4 ), 
    .Q1(\i2c_slave_top/addr_start_5 ));
  i2c_slave_top_SLICE_293 \i2c_slave_top/SLICE_293 ( .D0(n10095), 
    .C0(\i2c_slave_top/addr_start_6 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_N_1249_enable_8 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_589 ), .Q0(\i2c_slave_top/addr_start_6 ), 
    .Q1(\i2c_slave_top/addr_start_7 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_294 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_294 ( 
    .D1(\i2c_slave_top/data_buffer_i_5 ), .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/data_buffer_i_8 ), .A1(count_i_3__N_128), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10074 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9348 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_1 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9348 ), 
    .Q0(\i2c_slave_top/data_buffer_i_2 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9160 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_295 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_295 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10110 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9352 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9352 ), 
    .Q0(\i2c_slave_top/data_buffer_i_3 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10110 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_296 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_296 ( 
    .B1(\i2c_slave_top/data_buffer_i_3 ), .A1(\i2c_slave_top/data_buffer_i_4 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9349 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9349 ), 
    .Q0(\i2c_slave_top/data_buffer_i_4 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9580 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_297 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_297 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10059 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9351 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9351 ), 
    .Q0(\i2c_slave_top/data_buffer_i_5 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10059 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_298 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_298 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10074 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9350 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9350 ), 
    .Q0(\i2c_slave_top/data_buffer_i_6 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10074 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_299 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_299 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10110 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9353 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9353 ), 
    .Q0(\i2c_slave_top/data_buffer_i_7 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10109 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_300 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_300 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10060 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9347 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9347 ), 
    .Q0(\i2c_slave_top/data_buffer_i_8 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10060 ));
  i2c_slave_top_registers_SLICE_301 \i2c_slave_top/registers/SLICE_301 ( 
    .C1(\i2c_slave_top/registers/n1583 ), .B1(\i2c_slave_top/registers/n1644 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1595 ), 
    .A0(\i2c_slave_top/registers/static_control_0 ), 
    .DI1(\i2c_slave_top/registers/n1749 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1739 ), 
    .FXA(\i2c_slave_top/registers/n1719 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9600 ), .Q1(\i2c_slave_top/data_out_0 ), 
    .OFX1(\i2c_slave_top/registers/n1749 ));
  i2c_slave_top_registers_SLICE_302 \i2c_slave_top/registers/SLICE_302 ( 
    .C1(\i2c_slave_top/registers/n1582 ), .B1(\i2c_slave_top/registers/n1643 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1594 ), 
    .A0(\i2c_slave_top/registers/static_control_1 ), 
    .DI1(\i2c_slave_top/registers/n1748 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1738 ), 
    .FXA(\i2c_slave_top/registers/n1718 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9603 ), .Q1(\i2c_slave_top/data_out_1 ), 
    .OFX1(\i2c_slave_top/registers/n1748 ));
  i2c_slave_top_registers_SLICE_303 \i2c_slave_top/registers/SLICE_303 ( 
    .C1(\i2c_slave_top/registers/n1581 ), .B1(\i2c_slave_top/registers/n1642 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1593 ), 
    .A0(\i2c_slave_top/registers/static_control_2 ), 
    .DI1(\i2c_slave_top/registers/n1747 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1737 ), 
    .FXA(\i2c_slave_top/registers/n1717 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9606 ), .Q1(\i2c_slave_top/data_out_2 ), 
    .OFX1(\i2c_slave_top/registers/n1747 ));
  i2c_slave_top_registers_SLICE_304 \i2c_slave_top/registers/SLICE_304 ( 
    .C1(\i2c_slave_top/registers/n1580 ), .B1(\i2c_slave_top/registers/n1641 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1592 ), 
    .A0(\i2c_slave_top/registers/static_control_3 ), 
    .DI1(\i2c_slave_top/registers/n1746 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1736 ), 
    .FXA(\i2c_slave_top/registers/n1716 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9609 ), .Q1(\i2c_slave_top/data_out_3 ), 
    .OFX1(\i2c_slave_top/registers/n1746 ));
  i2c_slave_top_registers_SLICE_305 \i2c_slave_top/registers/SLICE_305 ( 
    .C1(\i2c_slave_top/registers/n1579 ), .B1(\i2c_slave_top/registers/n1640 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1591 ), 
    .A0(\i2c_slave_top/registers/static_control_4 ), 
    .DI1(\i2c_slave_top/registers/n1745 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1735 ), 
    .FXA(\i2c_slave_top/registers/n1715 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9612 ), .Q1(\i2c_slave_top/data_out_4 ), 
    .OFX1(\i2c_slave_top/registers/n1745 ));
  i2c_slave_top_registers_SLICE_306 \i2c_slave_top/registers/SLICE_306 ( 
    .C1(\i2c_slave_top/registers/n1578 ), .B1(\i2c_slave_top/registers/n1639 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1590 ), 
    .A0(\i2c_slave_top/registers/static_control_5 ), 
    .DI1(\i2c_slave_top/registers/n1744 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1734 ), 
    .FXA(\i2c_slave_top/registers/n1714 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9615 ), .Q1(\i2c_slave_top/data_out_5 ), 
    .OFX1(\i2c_slave_top/registers/n1744 ));
  i2c_slave_top_registers_SLICE_307 \i2c_slave_top/registers/SLICE_307 ( 
    .C1(\i2c_slave_top/registers/n1577 ), .B1(\i2c_slave_top/registers/n1638 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1589 ), 
    .A0(\i2c_slave_top/registers/static_control_6 ), 
    .DI1(\i2c_slave_top/registers/n1743 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1733 ), 
    .FXA(\i2c_slave_top/registers/n1713 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9618 ), .Q1(\i2c_slave_top/data_out_6 ), 
    .OFX1(\i2c_slave_top/registers/n1743 ));
  i2c_slave_top_registers_SLICE_308 \i2c_slave_top/registers/SLICE_308 ( 
    .C1(\i2c_slave_top/registers/n1576 ), .B1(\i2c_slave_top/registers/n1637 ), 
    .A1(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n1588 ), .A0(static_control_7), 
    .DI1(\i2c_slave_top/registers/n1742 ), 
    .M1(\i2c_slave_top/registers/n9677 ), 
    .M0(\i2c_slave_top/registers/n10100 ), 
    .FXB(\i2c_slave_top/registers/n1732 ), 
    .FXA(\i2c_slave_top/registers/n1712 ), 
    .LSR(\i2c_slave_top/registers/n5138 ), .CLK(clk_25mhz_c), 
    .OFX0(\i2c_slave_top/registers/n9621 ), .Q1(\i2c_slave_top/data_out_7 ), 
    .OFX1(\i2c_slave_top/registers/n1742 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_309 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_309 ( 
    .C1(n10095), .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(count_i_3__N_128), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9580 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9160 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9578 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_342 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_N_342 )
    , .Q0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3052 ));
  i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_310 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/SLICE_310 ( 
    .A0(scl_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_72 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_N_72 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ));
  SLICE_311 SLICE_311( 
    .B0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .M1(\driver_control/force_trigger_count_d_9 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_70 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .Q1(\driver_control/force_trigger_count_d2_9 ));
  i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_312 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/SLICE_312 ( 
    .D0(count_i_3__N_128), 
    .C0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), .B0(rw_mode_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_N_70 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_417 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ));
  i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_313 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/SLICE_313 ( 
    .A0(sda_out), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_72 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_N_72 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ));
  SLICE_314 SLICE_314( 
    .B0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .M1(\driver_control/force_trigger_count_0 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_70 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .Q1(\driver_control/force_trigger_count_d_0 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_316 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10112 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10073 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10010 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2978 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5026 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2864 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    , .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2864 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_317 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_317 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5103 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5103 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2862 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2863 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    , .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2863 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2862 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_318 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10073 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10112 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10060 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2978 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10010 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10044 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5026 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9966 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 )
    , .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9966 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_319 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_319 ( 
    .D1(rw_mode_i), .C1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .B1(count_i_3__N_128), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9357 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10027 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10112 ), 
    .DI1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3822 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9446 ), 
    .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9446 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3822 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_320 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_320 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , .C1(n10095), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9897 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n379 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10048 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8789 ), 
    .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8789 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9564 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_325 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_325 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , .B1(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_417 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , .DI0(\n10281\000/BUF1 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/wr_done_i_N_417 ), 
    .CLK(clk_25mhz_c), .F0(\n10281\000/BUF1 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3823 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_326 
    \i2c_slave_top/i2cslave_controller_top/SLICE_326 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , .C1(stop_detect_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(start_detect_i_N_339), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n570 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_327 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_327 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10029 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4601 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_349 )
    , .CE(reset_n), 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3162 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_349 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_330 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_330 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , .CLK(clk_25mhz_c), .F0(\i2c_slave_top/n10081 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_331 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_331 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3052 ), 
    .C0(n10075), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_332 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_332 ( 
    .B1(\i2c_slave_top/data_buffer_i_7 ), .A1(\i2c_slave_top/data_buffer_i_3 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9576 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10024 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9069 ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9069 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9576 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_333 
    \i2c_slave_top/i2cslave_controller_top/SLICE_333 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9536 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10110 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i_sda ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i_sda ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_2 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_334 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_334 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9586 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .B1(count_i_3__N_128), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n35 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1510 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_284 )
    , .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_N_284 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1510 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_336 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_336 ( 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .CLK(clk_25mhz_c), .F0(n10096), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_337 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_337 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_derived_7_enable_1 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3823 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_derived_7_enable_1 )
    , 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10039 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_340 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_340 ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2978 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10021 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_N_349 )
    , 
    .LSR(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10006 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    );
  i2c_slave_top_registers_SLICE_341 \i2c_slave_top/registers/SLICE_341 ( 
    .D1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .C1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .B1(\i2c_slave_top/registers/state_0 ), 
    .A1(\i2c_slave_top/registers/state_1 ), 
    .C0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/state_1 ), 
    .DI0(\i2c_slave_top/registers/n9628 ), 
    .CE(\i2c_slave_top/registers/state_0 ), .LSR(n10061), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n9628 ), 
    .Q0(\i2c_slave_top/registers/byte_cnt_0 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_2 ));
  SLICE_342 SLICE_342( .C1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .B1(\i2c_slave_top/registers/state_0 ), 
    .A1(\i2c_slave_top/registers/state_1 ), .DI0(n10280), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_2 ), .LSR(n10061), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), .F0(n10280), 
    .Q0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_3 ));
  i2c_slave_top_registers_SLICE_343 \i2c_slave_top/registers/SLICE_343 ( 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .A0(\i2c_slave_top/registers/count_0 ), 
    .DI1(\i2c_slave_top/registers/n24 ), .DI0(\i2c_slave_top/registers/n25 ), 
    .CE(\i2c_slave_top/registers/count_3__N_642 ), 
    .LSR(\i2c_slave_top/registers/n537 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n25 ), .Q0(\i2c_slave_top/registers/count_0 ), 
    .F1(\i2c_slave_top/registers/n24 ), .Q1(\i2c_slave_top/registers/count_1 ));
  i2c_slave_top_registers_SLICE_344 \i2c_slave_top/registers/SLICE_344 ( 
    .D1(\i2c_slave_top/registers/count_3 ), 
    .C1(\i2c_slave_top/registers/count_2 ), 
    .B1(\i2c_slave_top/registers/count_0 ), 
    .A1(\i2c_slave_top/registers/count_1 ), 
    .C0(\i2c_slave_top/registers/count_2 ), 
    .B0(\i2c_slave_top/registers/count_0 ), 
    .A0(\i2c_slave_top/registers/count_1 ), 
    .DI1(\i2c_slave_top/registers/n22 ), .DI0(\i2c_slave_top/registers/n23 ), 
    .CE(\i2c_slave_top/registers/count_3__N_642 ), 
    .LSR(\i2c_slave_top/registers/n537 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n23 ), .Q0(\i2c_slave_top/registers/count_2 ), 
    .F1(\i2c_slave_top/registers/n22 ), .Q1(\i2c_slave_top/registers/count_3 ));
  i2c_slave_top_registers_SLICE_353 \i2c_slave_top/registers/SLICE_353 ( 
    .C1(\i2c_slave_top/registers/data_vld_cnt ), 
    .B1(\i2c_slave_top/state_1_N_836_0 ), .A1(\i2c_slave_top/n10049 ), 
    .D0(n10096), .C0(\i2c_slave_top/registers/data_vld_cnt ), 
    .B0(\i2c_slave_top/state_1_N_836_0 ), .A0(\i2c_slave_top/n10049 ), 
    .DI0(\i2c_slave_top/registers/data_vld_cnt_N_868 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/data_vld_cnt_N_868 ), 
    .Q0(\i2c_slave_top/registers/data_vld_cnt ), 
    .F1(\i2c_slave_top/registers/clk_N_1249_enable_8 ));
  i2c_slave_top_SLICE_354 \i2c_slave_top/SLICE_354 ( 
    .D1(\i2c_slave_top/registers/state_0 ), 
    .C1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/state_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI0(\i2c_slave_top/n10049 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10049 ), .Q0(\i2c_slave_top/registers/data_vld_dly ), 
    .F1(\i2c_slave_top/registers/n10068 ));
  i2c_slave_top_registers_SLICE_363 \i2c_slave_top/registers/SLICE_363 ( 
    .D1(\i2c_slave_top/registers/n10018 ), 
    .C1(\i2c_slave_top/data_buffer_i_3 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n10018 ), 
    .C0(\i2c_slave_top/data_buffer_i_2 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_2 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_1 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_1 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_1 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_2 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_2 ));
  i2c_slave_top_registers_SLICE_364 \i2c_slave_top/registers/SLICE_364 ( 
    .D1(\i2c_slave_top/registers/n10018 ), 
    .C1(\i2c_slave_top/data_buffer_i_5 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n10018 ), 
    .C0(\i2c_slave_top/data_buffer_i_4 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_4 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_3 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_3 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_3 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_4 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_4 ));
  i2c_slave_top_registers_SLICE_365 \i2c_slave_top/registers/SLICE_365 ( 
    .D1(\i2c_slave_top/registers/n10018 ), 
    .C1(\i2c_slave_top/data_buffer_i_7 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n10018 ), 
    .C0(\i2c_slave_top/data_buffer_i_6 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_6 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_5 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_5 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_5 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_6 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_6 ));
  i2c_slave_top_registers_SLICE_366 \i2c_slave_top/registers/SLICE_366 ( 
    .B1(\i2c_slave_top/registers/dynamic_control_7 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_5 ), 
    .D0(\i2c_slave_top/registers/n10018 ), 
    .C0(\i2c_slave_top/data_buffer_i_8 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_7 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_7 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_7 ), 
    .F1(\i2c_slave_top/registers/n18_adj_1514 ));
  i2c_slave_top_registers_SLICE_367 \i2c_slave_top/registers/SLICE_367 ( 
    .D1(\i2c_slave_top/registers/n59 ), .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n59 ), .C0(data_buffer_i_1), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_9 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_8 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_179 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_8 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_8 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_9 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_9 ));
  i2c_slave_top_registers_SLICE_368 \i2c_slave_top/registers/SLICE_368 ( 
    .D1(\i2c_slave_top/registers/n59 ), .C1(\i2c_slave_top/data_buffer_i_4 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n59 ), .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_11 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_10 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_179 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_10 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_10 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_11 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_11 ));
  i2c_slave_top_registers_SLICE_369 \i2c_slave_top/registers/SLICE_369 ( 
    .D1(\i2c_slave_top/registers/n59 ), .C1(\i2c_slave_top/data_buffer_i_6 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n59 ), .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_13 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_12 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_179 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_12 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_12 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_13 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_13 ));
  i2c_slave_top_registers_SLICE_370 \i2c_slave_top/registers/SLICE_370 ( 
    .D1(\i2c_slave_top/registers/n59 ), .C1(\i2c_slave_top/data_buffer_i_8 ), 
    .B1(\i2c_slave_top/registers/n10007 ), .A1(\i2c_slave_top/n10081 ), 
    .D0(\i2c_slave_top/registers/n59 ), .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/registers/n10007 ), .A0(\i2c_slave_top/n10081 ), 
    .DI1(\i2c_slave_top/registers/dynamic_control_15_N_538_15 ), 
    .DI0(\i2c_slave_top/registers/dynamic_control_15_N_538_14 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_179 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/dynamic_control_15_N_538_14 ), 
    .Q0(\i2c_slave_top/registers/dynamic_control_14 ), 
    .F1(\i2c_slave_top/registers/dynamic_control_15_N_538_15 ), 
    .Q1(\i2c_slave_top/registers/dynamic_control_15 ));
  i2c_slave_top_registers_SLICE_371 \i2c_slave_top/registers/SLICE_371 ( 
    .D1(\i2c_slave_top/registers/n5_adj_1511 ), 
    .C1(\i2c_slave_top/registers/n5106 ), .B1(\i2c_slave_top/registers/n5107 ), 
    .A1(\i2c_slave_top/registers/n5108 ), .DI0(\n10281\001/BUF1 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_627 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_595 ), .F0(\n10281\001/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5106 ), 
    .F1(\i2c_slave_top/registers/clk_25mhz_c_enable_43 ));
  i2c_slave_top_registers_SLICE_372 \i2c_slave_top/registers/SLICE_372 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/n10101 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_0 ), 
    .D0(\i2c_slave_top/addr_start_0 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(data_buffer_i_1), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4711 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_595 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4711 ), 
    .Q0(\i2c_slave_top/registers/n5107 ));
  i2c_slave_top_registers_SLICE_373 \i2c_slave_top/registers/SLICE_373 ( 
    .D0(\i2c_slave_top/registers/n5_adj_1511 ), 
    .C0(\i2c_slave_top/registers/n5106 ), .B0(\i2c_slave_top/registers/n5107 ), 
    .A0(\i2c_slave_top/registers/n5108 ), .M0(\i2c_slave_top/registers/n4711 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_627 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_51 ), 
    .Q0(\i2c_slave_top/registers/n5108 ));
  i2c_slave_top_registers_SLICE_374 \i2c_slave_top/registers/SLICE_374 ( 
    .DI0(\n10281\008/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_624 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_594 ), .F0(\n10281\008/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5110 ));
  i2c_slave_top_registers_SLICE_375 \i2c_slave_top/registers/SLICE_375 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/addr_i_1 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_1 ), 
    .D0(\i2c_slave_top/addr_start_1 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_2 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4864 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_594 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4864 ), 
    .Q0(\i2c_slave_top/registers/n5111 ));
  i2c_slave_top_registers_SLICE_377 \i2c_slave_top/registers/SLICE_377 ( 
    .D1(\i2c_slave_top/registers/n10101 ), 
    .C1(\i2c_slave_top/registers/n5114 ), .B1(\i2c_slave_top/registers/n5115 ), 
    .A1(\i2c_slave_top/registers/n5116 ), .DI0(\n10281\007/BUF1 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_621 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_593 ), .F0(\n10281\007/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5114 ), .F1(\i2c_slave_top/registers/n16 ));
  i2c_slave_top_registers_SLICE_378 \i2c_slave_top/registers/SLICE_378 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/n10100 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_2 ), 
    .D0(\i2c_slave_top/addr_start_2 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_3 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4868 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_593 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4868 ), 
    .Q0(\i2c_slave_top/registers/n5115 ));
  i2c_slave_top_registers_SLICE_379 \i2c_slave_top/registers/SLICE_379 ( 
    .C0(\i2c_slave_top/registers/n5114 ), .B0(\i2c_slave_top/registers/n5115 ), 
    .A0(\i2c_slave_top/registers/n5116 ), .M0(\i2c_slave_top/registers/n4868 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_621 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n10100 ), 
    .Q0(\i2c_slave_top/registers/n5116 ));
  i2c_slave_top_registers_SLICE_380 \i2c_slave_top/registers/SLICE_380 ( 
    .DI0(\n10281\006/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_618 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_592 ), .F0(\n10281\006/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5118 ));
  i2c_slave_top_registers_SLICE_381 \i2c_slave_top/registers/SLICE_381 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/addr_i_3 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_3 ), 
    .D0(\i2c_slave_top/addr_start_3 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_4 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4872 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_592 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4872 ), 
    .Q0(\i2c_slave_top/registers/n5119 ));
  i2c_slave_top_registers_SLICE_382 \i2c_slave_top/registers/SLICE_382 ( 
    .C0(\i2c_slave_top/registers/n5118 ), .B0(\i2c_slave_top/registers/n5119 ), 
    .A0(\i2c_slave_top/registers/n5120 ), .M0(\i2c_slave_top/registers/n4872 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_618 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/addr_i_3 ), 
    .Q0(\i2c_slave_top/registers/n5120 ));
  i2c_slave_top_registers_SLICE_383 \i2c_slave_top/registers/SLICE_383 ( 
    .DI0(\n10281\005/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_615 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_591 ), .F0(\n10281\005/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5122 ));
  i2c_slave_top_registers_SLICE_384 \i2c_slave_top/registers/SLICE_384 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/n10107 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_4 ), 
    .D0(\i2c_slave_top/addr_start_4 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_5 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4876 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_591 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4876 ), 
    .Q0(\i2c_slave_top/registers/n5123 ));
  i2c_slave_top_registers_SLICE_386 \i2c_slave_top/registers/SLICE_386 ( 
    .DI0(\n10281\004/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_612 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_590 ), .F0(\n10281\004/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5126 ));
  i2c_slave_top_registers_SLICE_387 \i2c_slave_top/registers/SLICE_387 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/n10106 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_5 ), 
    .D0(\i2c_slave_top/addr_start_5 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_6 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4880 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_590 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4880 ), 
    .Q0(\i2c_slave_top/registers/n5127 ));
  i2c_slave_top_registers_SLICE_388 \i2c_slave_top/registers/SLICE_388 ( 
    .D0(\i2c_slave_top/registers/n10107 ), 
    .C0(\i2c_slave_top/registers/n5126 ), .B0(\i2c_slave_top/registers/n5127 ), 
    .A0(\i2c_slave_top/registers/n5128 ), .M0(\i2c_slave_top/registers/n4880 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_612 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n10067 ), 
    .Q0(\i2c_slave_top/registers/n5128 ));
  i2c_slave_top_registers_SLICE_389 \i2c_slave_top/registers/SLICE_389 ( 
    .D1(\i2c_slave_top/registers/addr_i_7 ), 
    .C1(\i2c_slave_top/registers/n5130 ), .B1(\i2c_slave_top/registers/n5131 ), 
    .A1(\i2c_slave_top/registers/n5132 ), .DI0(\n10281\003/BUF1 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_609 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_589 ), .F0(\n10281\003/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5130 ), 
    .F1(\i2c_slave_top/registers/n10076 ));
  i2c_slave_top_registers_SLICE_390 \i2c_slave_top/registers/SLICE_390 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/n10111 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_6 ), 
    .D0(\i2c_slave_top/addr_start_6 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_7 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4884 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_589 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4884 ), 
    .Q0(\i2c_slave_top/registers/n5131 ));
  i2c_slave_top_registers_SLICE_391 \i2c_slave_top/registers/SLICE_391 ( 
    .C0(\i2c_slave_top/registers/n5130 ), .B0(\i2c_slave_top/registers/n5131 ), 
    .A0(\i2c_slave_top/registers/n5132 ), .M0(\i2c_slave_top/registers/n4884 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_609 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n10111 ), 
    .Q0(\i2c_slave_top/registers/n5132 ));
  i2c_slave_top_registers_SLICE_392 \i2c_slave_top/registers/SLICE_392 ( 
    .DI0(\n10281\002/BUF1 ), .LSR(\i2c_slave_top/addr_i_7__N_596 ), 
    .CLK(\i2c_slave_top/addr_i_7__N_586 ), .F0(\n10281\002/BUF1 ), 
    .Q0(\i2c_slave_top/registers/n5134 ));
  i2c_slave_top_registers_SLICE_393 \i2c_slave_top/registers/SLICE_393 ( 
    .C1(\i2c_slave_top/registers/n10068 ), 
    .B1(\i2c_slave_top/registers/addr_i_7 ), 
    .A1(\i2c_slave_top/registers/addr_i_7_N_838_7 ), 
    .D0(\i2c_slave_top/addr_start_7 ), .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/data_buffer_i_8 ), .A0(\i2c_slave_top/n10081 ), 
    .DI0(\i2c_slave_top/registers/n4888 ), 
    .M0(\i2c_slave_top/registers/n9681 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_586 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .OFX0(\i2c_slave_top/registers/n4888 ), 
    .Q0(\i2c_slave_top/registers/n5135 ));
  i2c_slave_top_registers_SLICE_394 \i2c_slave_top/registers/SLICE_394 ( 
    .C0(\i2c_slave_top/registers/n5134 ), .B0(\i2c_slave_top/registers/n5135 ), 
    .A0(\i2c_slave_top/registers/n5136 ), .M0(\i2c_slave_top/registers/n4888 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_596 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/addr_i_7 ), 
    .Q0(\i2c_slave_top/registers/n5136 ));
  i2c_slave_top_registers_SLICE_403 \i2c_slave_top/registers/SLICE_403 ( 
    .C1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .B1(\i2c_slave_top/registers/state_0 ), 
    .A1(\i2c_slave_top/registers/state_1 ), 
    .C0(\i2c_slave_top/registers/state_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/state_1_N_836_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_632_0 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_1 ), .LSR(n10061), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_632_0 ), 
    .Q0(\i2c_slave_top/registers/state_0 ), 
    .F1(\i2c_slave_top/registers/data_vld_dly_enable_1 ));
  i2c_slave_top_registers_SLICE_404 \i2c_slave_top/registers/SLICE_404 ( 
    .B1(\i2c_slave_top/registers/state_1 ), 
    .A1(\i2c_slave_top/registers/state_0 ), 
    .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/registers/state_1 ), 
    .A0(\i2c_slave_top/registers/state_0 ), 
    .DI0(\i2c_slave_top/registers/state_1_N_632_1 ), 
    .CE(\i2c_slave_top/registers/data_vld_dly_enable_3 ), .LSR(n10061), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/state_1_N_632_1 ), 
    .Q0(\i2c_slave_top/registers/state_1 ), 
    .F1(\i2c_slave_top/registers/n9681 ));
  i2c_slave_top_registers_SLICE_409 \i2c_slave_top/registers/SLICE_409 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_9 ), .A0(pulse_width_9), 
    .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_28 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1594 ), 
    .Q0(\i2c_slave_top/registers/static_control_8 ), 
    .Q1(\i2c_slave_top/registers/static_control_9 ));
  i2c_slave_top_registers_SLICE_410 \i2c_slave_top/registers/SLICE_410 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_11 ), .A0(pulse_width_11), 
    .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_28 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1592 ), 
    .Q0(\i2c_slave_top/registers/static_control_10 ), 
    .Q1(\i2c_slave_top/registers/static_control_11 ));
  i2c_slave_top_registers_SLICE_411 \i2c_slave_top/registers/SLICE_411 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_13 ), .A0(pulse_width_13), 
    .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_28 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1590 ), 
    .Q0(\i2c_slave_top/registers/static_control_12 ), 
    .Q1(\i2c_slave_top/registers/static_control_13 ));
  i2c_slave_top_registers_SLICE_412 \i2c_slave_top/registers/SLICE_412 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_14 ), .A0(pulse_width_14), 
    .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_28 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1589 ), 
    .Q0(\i2c_slave_top/registers/static_control_14 ), 
    .Q1(\i2c_slave_top/registers/static_control_15 ));
  i2c_slave_top_SLICE_413 \i2c_slave_top/SLICE_413 ( 
    .D0(\i2c_slave_top/registers/n10076 ), 
    .C0(\i2c_slave_top/state_1_N_836_0 ), 
    .B0(\i2c_slave_top/registers/n10083 ), .A0(\i2c_slave_top/n10049 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/registers/n7 ), .Q0(\i2c_slave_top/state_1_N_836_0 ));
  SLICE_414 SLICE_414( .B1(mosi_reset), .A1(reset_n), .A0(TA_spare3_c), 
    .DI0(\driver_control/ss_N_1346 ), .LSR(\driver_control/ss_temp ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/ss_N_1346 ), .Q0(mosi_reset), 
    .F1(state_3__N_879));
  i2c_slave_top_registers_SLICE_419 \i2c_slave_top/registers/SLICE_419 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_1), 
    .A0(period_9), .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_128 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1643 ), .Q0(period_8), .Q1(period_9));
  i2c_slave_top_registers_SLICE_420 \i2c_slave_top/registers/SLICE_420 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_2), 
    .A0(period_10), .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_128 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1642 ), .Q0(period_10), .Q1(period_11));
  i2c_slave_top_registers_SLICE_421 \i2c_slave_top/registers/SLICE_421 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_4), 
    .A0(period_12), .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_128 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1640 ), .Q0(period_12), .Q1(period_13));
  i2c_slave_top_registers_SLICE_422 \i2c_slave_top/registers/SLICE_422 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_7), 
    .A0(period_15), .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_128 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1637 ), .Q0(period_14), .Q1(period_15));
  i2c_slave_top_registers_SLICE_423 \i2c_slave_top/registers/SLICE_423 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_9), 
    .A0(period_17), .M1(\i2c_slave_top/n10050 ), .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_120 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1582 ), .Q0(period_16), .Q1(period_17));
  i2c_slave_top_registers_SLICE_424 \i2c_slave_top/registers/SLICE_424 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_10), 
    .A0(period_18), .M1(\i2c_slave_top/n10053 ), .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_120 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1581 ), .Q0(period_18), .Q1(period_19));
  i2c_slave_top_registers_SLICE_425 \i2c_slave_top/registers/SLICE_425 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_12), 
    .A0(period_20), .M1(\i2c_slave_top/n10056 ), .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_120 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1579 ), .Q0(period_20), .Q1(period_21));
  i2c_slave_top_registers_SLICE_426 \i2c_slave_top/registers/SLICE_426 ( 
    .C0(\i2c_slave_top/registers/addr_i_1 ), .B0(drive_current_15), 
    .A0(period_23), .M1(\i2c_slave_top/n10058 ), .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_120 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1576 ), .Q0(period_22), .Q1(period_23));
  driver_control_SLICE_427 \driver_control/SLICE_427 ( .D1(n2729), 
    .C1(pulse_active_N_1287_24), .B1(pulse_state_3), 
    .A1(\driver_control/pulse_state_1 ), .C0(n2702), 
    .B0(\driver_control/pulse_state_1 ), 
    .A0(\driver_control/pulse_active_N_1260_24 ), .DI0(\driver_control/n9431 ), 
    .CE(\driver_control/clk_count_3__N_891_enable_22 ), 
    .CLK(\driver_control/clk_count[3] ), .F0(\driver_control/n9431 ), 
    .Q0(pulse_state_3), .F1(\driver_control/n5228 ));
  i2c_slave_top_registers_SLICE_428 \i2c_slave_top/registers/SLICE_428 ( 
    .D1(\i2c_slave_top/n10081 ), .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/registers/n10031 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), .D0(\i2c_slave_top/n10081 ), 
    .C0(data_buffer_i_1), .B0(\i2c_slave_top/registers/n10031 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .DI1(\i2c_slave_top/registers/n2267 ), 
    .DI0(\i2c_slave_top/registers/n2268 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_154 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n2268 ), .Q0(pulse_width_0), 
    .F1(\i2c_slave_top/registers/n2267 ), .Q1(pulse_width_1));
  i2c_slave_top_registers_SLICE_429 \i2c_slave_top/registers/SLICE_429 ( 
    .D1(\i2c_slave_top/n10081 ), .C1(\i2c_slave_top/data_buffer_i_4 ), 
    .B1(\i2c_slave_top/registers/n10031 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), .D0(\i2c_slave_top/n10081 ), 
    .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/registers/n10031 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .DI1(\i2c_slave_top/registers/n2265 ), 
    .DI0(\i2c_slave_top/registers/n2266 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_154 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n2266 ), .Q0(pulse_width_2), 
    .F1(\i2c_slave_top/registers/n2265 ), .Q1(pulse_width_3));
  i2c_slave_top_registers_SLICE_430 \i2c_slave_top/registers/SLICE_430 ( 
    .D1(\i2c_slave_top/n10081 ), .C1(\i2c_slave_top/data_buffer_i_6 ), 
    .B1(\i2c_slave_top/registers/n10031 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), .D0(\i2c_slave_top/n10081 ), 
    .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/registers/n10031 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .DI1(\i2c_slave_top/registers/n2263 ), 
    .DI0(\i2c_slave_top/registers/n2264 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_154 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n2264 ), .Q0(pulse_width_4), 
    .F1(\i2c_slave_top/registers/n2263 ), .Q1(pulse_width_5));
  i2c_slave_top_registers_SLICE_431 \i2c_slave_top/registers/SLICE_431 ( 
    .D1(\i2c_slave_top/n10081 ), .C1(\i2c_slave_top/data_buffer_i_8 ), 
    .B1(\i2c_slave_top/registers/n10031 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), .D0(\i2c_slave_top/n10081 ), 
    .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/registers/n10031 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .DI1(\i2c_slave_top/registers/n2261 ), 
    .DI0(\i2c_slave_top/registers/n2262 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_154 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n2262 ), .Q0(pulse_width_6), 
    .F1(\i2c_slave_top/registers/n2261 ), .Q1(pulse_width_7));
  i2c_slave_top_registers_SLICE_432 \i2c_slave_top/registers/SLICE_432 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_8 ), .A0(pulse_width_8), 
    .M1(\i2c_slave_top/registers/n2267 ), .M0(\i2c_slave_top/registers/n2268 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_162 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1595 ), .Q0(pulse_width_8), 
    .Q1(pulse_width_9));
  i2c_slave_top_registers_SLICE_433 \i2c_slave_top/registers/SLICE_433 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_10 ), .A0(pulse_width_10), 
    .M1(\i2c_slave_top/registers/n2265 ), .M0(\i2c_slave_top/registers/n2266 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_162 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1593 ), .Q0(pulse_width_10), 
    .Q1(pulse_width_11));
  i2c_slave_top_registers_SLICE_434 \i2c_slave_top/registers/SLICE_434 ( 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_12 ), .A0(pulse_width_12), 
    .M1(\i2c_slave_top/registers/n2263 ), .M0(\i2c_slave_top/registers/n2264 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_162 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1591 ), .Q0(pulse_width_12), 
    .Q1(pulse_width_13));
  SLICE_435 SLICE_435( .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/static_control_15 ), .A0(pulse_width_15), 
    .M1(\i2c_slave_top/registers/n2261 ), .M0(\i2c_slave_top/registers/n2262 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_162 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1588 ), .Q0(pulse_width_14), .F1(GND_net), 
    .Q1(pulse_width_15));
  i2c_slave_top_SLICE_436 \i2c_slave_top/SLICE_436 ( 
    .D1(\i2c_slave_top/n10017 ), .C1(\i2c_slave_top/data_buffer_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n10017 ), .C0(data_buffer_i_1), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/pulse_width_23_N_643_17 ), 
    .DI0(\i2c_slave_top/pulse_width_23_N_643_16 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_170 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/pulse_width_23_N_643_16 ), .Q0(pulse_width_16), 
    .F1(\i2c_slave_top/pulse_width_23_N_643_17 ), .Q1(pulse_width_17));
  i2c_slave_top_SLICE_437 \i2c_slave_top/SLICE_437 ( 
    .D1(\i2c_slave_top/n10017 ), .C1(\i2c_slave_top/data_buffer_i_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n10017 ), .C0(\i2c_slave_top/data_buffer_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/pulse_width_23_N_643_19 ), 
    .DI0(\i2c_slave_top/pulse_width_23_N_643_18 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_170 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/pulse_width_23_N_643_18 ), .Q0(pulse_width_18), 
    .F1(\i2c_slave_top/pulse_width_23_N_643_19 ), .Q1(pulse_width_19));
  i2c_slave_top_SLICE_438 \i2c_slave_top/SLICE_438 ( 
    .D1(\i2c_slave_top/n10017 ), .C1(\i2c_slave_top/data_buffer_i_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n10017 ), .C0(\i2c_slave_top/data_buffer_i_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/pulse_width_23_N_643_21 ), 
    .DI0(\i2c_slave_top/pulse_width_23_N_643_20 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_170 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/pulse_width_23_N_643_20 ), .Q0(pulse_width_20), 
    .F1(\i2c_slave_top/pulse_width_23_N_643_21 ), .Q1(pulse_width_21));
  i2c_slave_top_SLICE_439 \i2c_slave_top/SLICE_439 ( 
    .D1(\i2c_slave_top/n10017 ), .C1(\i2c_slave_top/data_buffer_i_8 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .D0(\i2c_slave_top/n10017 ), .C0(\i2c_slave_top/data_buffer_i_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i )
    , .DI1(\i2c_slave_top/pulse_width_23_N_643_23 ), 
    .DI0(\i2c_slave_top/pulse_width_23_N_643_22 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_170 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/pulse_width_23_N_643_22 ), .Q0(pulse_width_22), 
    .F1(\i2c_slave_top/pulse_width_23_N_643_23 ), .Q1(pulse_width_23));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_440 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_440 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10085 ), 
    .C1(reset_bus_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1507 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9151 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .DI0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_352 )
    , .LSR(n10095), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_N_352 )
    , .Q0(reset_bus_i), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9151 ));
  SLICE_441 SLICE_441( .A0(\reset_generator/clk_d2 ), 
    .DI0(\reset_generator/clk_d2_N_7 ), .LSR(rstn_c), .CLK(clk_25mhz_c), 
    .F0(\reset_generator/clk_d2_N_7 ), .Q0(\reset_generator/clk_d2 ), 
    .F1(VCC_net));
  SLICE_442 SLICE_442( .D1(\adc_control/convert_count_1 ), 
    .C1(\adc_control/convert_count_2 ), .B1(\adc_control/convert_count_3 ), 
    .A1(\adc_control/convert_count_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i )
    , .M1(\reset_generator/in_d1 ), .M0(rstn_c), .LSR(rstn_c), 
    .CLK(\reset_generator/clk_d2 ), .F0(n6830), .Q0(\reset_generator/in_d1 ), 
    .F1(\adc_control/n8 ), .Q1(\reset_generator/in_d2 ));
  SLICE_443 SLICE_443( .D1(\i2c_slave_top/registers/dynamic_control_1 ), 
    .C1(\i2c_slave_top/registers/dynamic_control_3 ), 
    .B1(\i2c_slave_top/registers/dynamic_control_8 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_10 ), 
    .B0(\reset_generator/in_d3 ), .A0(\reset_generator/in_d2 ), 
    .M0(\reset_generator/in_d2 ), .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\reset_generator/reset_n_N_3 ), .Q0(\reset_generator/in_d3 ), 
    .F1(\i2c_slave_top/registers/n28 ));
  SLICE_444 SLICE_444( .D1(\i2c_slave_top/registers/dynamic_control_13 ), 
    .C1(\i2c_slave_top/registers/dynamic_control_14 ), 
    .B1(\i2c_slave_top/registers/dynamic_control_12 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_4 ), .B0(reset_n), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .M0(\reset_generator/in_d3 ), .CE(\reset_generator/reset_n_N_3 ), 
    .LSR(rstn_c), .CLK(\reset_generator/clk_d2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3162 ), 
    .Q0(reset_n), .F1(\i2c_slave_top/registers/n26 ));
  SLICE_445 SLICE_445( .C1(rw_mode_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(count_i_3__N_128), .C0(count_i_3__N_128), .B0(data_buffer_i_1), 
    .A0(rw_mode_i), .DI0(n9629), 
    .CE(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_derived_7_enable_1 )
    , .CLK(\i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n ), 
    .F0(n9629), .Q0(rw_mode_i), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10048 ));
  SLICE_446 SLICE_446( .B1(pulse_state_3), .A1(\driver_control/pulse_state_1 ), 
    .B0(static_control_7), .A0(\driver_control/force_trigger_N_1324 ), 
    .M1(\i2c_slave_top/n10062 ), .M0(\i2c_slave_top/n10058 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_35 ), .CLK(clk_25mhz_c), 
    .F0(\driver_control/n518 ), .Q0(static_control_7), 
    .F1(\driver_control/clk_count_3__N_891_enable_3 ), 
    .Q1(\i2c_slave_top/registers/static_control_0 ));
  SLICE_447 SLICE_447( .D1(\driver_control/count_4 ), 
    .C1(\driver_control/count_0 ), .B1(\driver_control/count_2 ), 
    .A1(\driver_control/count_6 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , .M0(\i2c_slave_top/i2cslave_controller_top/out_n__inv ), 
    .LSR(start_detect_i_N_339), 
    .CLK(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2978 ), 
    .Q0(stop_detect_i), .F1(\driver_control/n14 ));
  SLICE_448 SLICE_448( .B1(\driver_control/trigger_count_6 ), 
    .A1(\driver_control/trigger_count_5 ), .C0(count_1), .B0(adc_sdo_c), 
    .A0(voltage_data_0), .DI0(n9645), 
    .CE(\adc_control/adc_sck_temp_enable_40 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(n9645), .Q0(voltage_data_0), 
    .F1(\driver_control/n6_adj_1542 ));
  SLICE_449 SLICE_449( .D1(\adc_control/count_3 ), 
    .C1(\adc_control/capture_state_2 ), .B1(\adc_control/n10103 ), 
    .A1(\adc_control/capture_state_3 ), .D0(n10016), 
    .C0(adc_sck_temp_enable_28), .B0(adc_sdo_c), .A0(voltage_data_4), 
    .DI0(n9635), .CE(\adc_control/count_2 ), .CLK(\adc_control/adc_sck_temp ), 
    .F0(n9635), .Q0(voltage_data_4), .F1(n10016));
  i2c_slave_top_registers_SLICE_450 \i2c_slave_top/registers/SLICE_450 ( 
    .C1(\i2c_slave_top/registers/n10101 ), .B1(adc_voltage_data_8), 
    .A1(adc_voltage_data_0), .D0(pulse_width_16), 
    .C0(\i2c_slave_top/registers/n1607 ), 
    .B0(\i2c_slave_top/registers/addr_i_1 ), 
    .A0(\i2c_slave_top/registers/n10107 ), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .FXB(\i2c_slave_top/registers/n10004 ), 
    .FXA(\i2c_slave_top/registers/n9600 ), 
    .OFX0(\i2c_slave_top/registers/n10004 ), 
    .F1(\i2c_slave_top/registers/n1607 ), 
    .OFX1(\i2c_slave_top/registers/n1739 ));
  driver_control_i7597_SLICE_451 \driver_control/i7597/SLICE_451 ( 
    .A1(\driver_control/cstate_0 ), .D0(\driver_control/cstate_3_N_1168_1 ), 
    .C0(\driver_control/n12 ), .B0(\driver_control/n4538 ), 
    .A0(\driver_control/cstate_0 ), .M0(\driver_control/cstate_3 ), 
    .OFX0(\driver_control/clk_25mhz_c_enable_171 ));
  driver_control_i24_SLICE_452 \driver_control/i24/SLICE_452 ( 
    .C1(\driver_control/pulse_active_N_1260_24 ), .B1(n2702), 
    .A1(pulse_state_3), .D0(TA_spare4_c), .C0(pulse_state_3), 
    .B0(pulse_active_N_1287_24), .A0(n2729), 
    .M0(\driver_control/pulse_state_1 ), 
    .OFX0(\driver_control/clk_count_3__N_891_enable_22 ));
  i2c_slave_top_registers_mux_765_i8_SLICE_453 
    \i2c_slave_top/registers/mux_765_i8/SLICE_453 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(system_reset_n_c_7), 
    .A1(pulse_width_23), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_15), .A0(adc_voltage_data_7), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1692 ), 
    .FXA(\i2c_slave_top/registers/n9621 ), 
    .OFX0(\i2c_slave_top/registers/n1692 ), 
    .OFX1(\i2c_slave_top/registers/n1732 ));
  i2c_slave_top_registers_mux_765_i7_SLICE_454 
    \i2c_slave_top/registers/mux_765_i7/SLICE_454 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(TA_pos_pwr_good_c_6), 
    .A1(pulse_width_22), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_14), .A0(adc_voltage_data_6), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1693 ), 
    .FXA(\i2c_slave_top/registers/n9618 ), 
    .OFX0(\i2c_slave_top/registers/n1693 ), 
    .OFX1(\i2c_slave_top/registers/n1733 ));
  i2c_slave_top_registers_mux_765_i6_SLICE_455 
    \i2c_slave_top/registers/mux_765_i6/SLICE_455 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(TA_neg_pwr_good_c_5), 
    .A1(pulse_width_21), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_13), .A0(adc_voltage_data_5), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1694 ), 
    .FXA(\i2c_slave_top/registers/n9615 ), 
    .OFX0(\i2c_slave_top/registers/n1694 ), 
    .OFX1(\i2c_slave_top/registers/n1734 ));
  i2c_slave_top_registers_mux_765_i5_SLICE_456 
    \i2c_slave_top/registers/mux_765_i5/SLICE_456 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(TA_EE_shutdown_c_4), 
    .A1(pulse_width_20), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_12), .A0(adc_voltage_data_4), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1695 ), 
    .FXA(\i2c_slave_top/registers/n9612 ), 
    .OFX0(\i2c_slave_top/registers/n1695 ), 
    .OFX1(\i2c_slave_top/registers/n1735 ));
  i2c_slave_top_registers_mux_765_i3_SLICE_457 
    \i2c_slave_top/registers/mux_765_i3/SLICE_457 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(cw_compared_c_2), 
    .A1(pulse_width_18), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_10), .A0(adc_voltage_data_2), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1697 ), 
    .FXA(\i2c_slave_top/registers/n9606 ), 
    .OFX0(\i2c_slave_top/registers/n1697 ), 
    .OFX1(\i2c_slave_top/registers/n1737 ));
  i2c_slave_top_registers_mux_765_i2_SLICE_458 
    \i2c_slave_top/registers/mux_765_i2/SLICE_458 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(pwm_compared_c_1), 
    .A1(pulse_width_17), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_9), .A0(adc_voltage_data_1), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1698 ), 
    .FXA(\i2c_slave_top/registers/n9603 ), 
    .OFX0(\i2c_slave_top/registers/n1698 ), 
    .OFX1(\i2c_slave_top/registers/n1738 ));
  i2c_slave_top_registers_mux_759_i8_SLICE_459 
    \i2c_slave_top/registers/mux_759_i8/SLICE_459 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_15 ), .A1(period_7), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_15 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_15 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1662 ), 
    .FXA(\i2c_slave_top/registers/n1702 ), 
    .OFX0(\i2c_slave_top/registers/n1662 ), 
    .OFX1(\i2c_slave_top/registers/n1712 ));
  i2c_slave_top_registers_mux_759_i7_SLICE_460 
    \i2c_slave_top/registers/mux_759_i7/SLICE_460 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_14 ), .A1(period_6), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_14 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1663 ), 
    .FXA(\i2c_slave_top/registers/n1703 ), 
    .OFX0(\i2c_slave_top/registers/n1663 ), 
    .OFX1(\i2c_slave_top/registers/n1713 ));
  i2c_slave_top_registers_mux_759_i6_SLICE_461 
    \i2c_slave_top/registers/mux_759_i6/SLICE_461 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_13 ), .A1(period_5), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_13 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_13 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1664 ), 
    .FXA(\i2c_slave_top/registers/n1704 ), 
    .OFX0(\i2c_slave_top/registers/n1664 ), 
    .OFX1(\i2c_slave_top/registers/n1714 ));
  i2c_slave_top_registers_mux_759_i5_SLICE_462 
    \i2c_slave_top/registers/mux_759_i5/SLICE_462 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_12 ), .A1(period_4), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_12 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1665 ), 
    .FXA(\i2c_slave_top/registers/n1705 ), 
    .OFX0(\i2c_slave_top/registers/n1665 ), 
    .OFX1(\i2c_slave_top/registers/n1715 ));
  i2c_slave_top_registers_mux_759_i4_SLICE_463 
    \i2c_slave_top/registers/mux_759_i4/SLICE_463 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_11 ), .A1(period_3), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_11 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_11 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1666 ), 
    .FXA(\i2c_slave_top/registers/n1706 ), 
    .OFX0(\i2c_slave_top/registers/n1666 ), 
    .OFX1(\i2c_slave_top/registers/n1716 ));
  i2c_slave_top_registers_mux_759_i3_SLICE_464 
    \i2c_slave_top/registers/mux_759_i3/SLICE_464 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_10 ), .A1(period_2), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_10 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1667 ), 
    .FXA(\i2c_slave_top/registers/n1707 ), 
    .OFX0(\i2c_slave_top/registers/n1667 ), 
    .OFX1(\i2c_slave_top/registers/n1717 ));
  i2c_slave_top_registers_mux_759_i2_SLICE_465 
    \i2c_slave_top/registers/mux_759_i2/SLICE_465 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_9 ), .A1(period_1), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_9 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_9 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1668 ), 
    .FXA(\i2c_slave_top/registers/n1708 ), 
    .OFX0(\i2c_slave_top/registers/n1668 ), 
    .OFX1(\i2c_slave_top/registers/n1718 ));
  i2c_slave_top_registers_mux_767_i8_SLICE_466 
    \i2c_slave_top/registers/mux_767_i8/SLICE_466 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_7 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_7 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_7 ), .A0(pulse_width_7), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1702 ));
  i2c_slave_top_registers_mux_767_i7_SLICE_467 
    \i2c_slave_top/registers/mux_767_i7/SLICE_467 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_6 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_6 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_6 ), .A0(pulse_width_6), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1703 ));
  i2c_slave_top_registers_mux_767_i6_SLICE_468 
    \i2c_slave_top/registers/mux_767_i6/SLICE_468 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_5 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_5 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_5 ), .A0(pulse_width_5), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1704 ));
  i2c_slave_top_registers_mux_767_i5_SLICE_469 
    \i2c_slave_top/registers/mux_767_i5/SLICE_469 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_4 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_4 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_4 ), .A0(pulse_width_4), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1705 ));
  i2c_slave_top_registers_mux_767_i4_SLICE_470 
    \i2c_slave_top/registers/mux_767_i4/SLICE_470 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_3 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_3 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_3 ), .A0(pulse_width_3), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1706 ));
  i2c_slave_top_registers_mux_767_i3_SLICE_471 
    \i2c_slave_top/registers/mux_767_i3/SLICE_471 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_2 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_2 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_2 ), .A0(pulse_width_2), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1707 ));
  i2c_slave_top_registers_mux_767_i2_SLICE_472 
    \i2c_slave_top/registers/mux_767_i2/SLICE_472 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_1 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_1 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_1 ), .A0(pulse_width_1), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1708 ));
  i2c_slave_top_registers_mux_767_i1_SLICE_473 
    \i2c_slave_top/registers/mux_767_i1/SLICE_473 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_0 ), 
    .A1(\i2c_slave_top/registers/drive_current_limit_0 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_0 ), .A0(pulse_width_0), 
    .M0(\i2c_slave_top/registers/n1635 ), 
    .OFX0(\i2c_slave_top/registers/n1709 ));
  i2c_slave_top_registers_mux_759_i1_SLICE_474 
    \i2c_slave_top/registers/mux_759_i1/SLICE_474 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/pwm_mon_current_limit_8 ), .A1(period_0), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .A0(\i2c_slave_top/registers/drive_current_limit_8 ), 
    .M1(\i2c_slave_top/registers/n10101 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1669 ), 
    .FXA(\i2c_slave_top/registers/n1709 ), 
    .OFX0(\i2c_slave_top/registers/n1669 ), 
    .OFX1(\i2c_slave_top/registers/n1719 ));
  i2c_slave_top_registers_mux_765_i4_SLICE_475 
    \i2c_slave_top/registers/mux_765_i4/SLICE_475 ( 
    .C1(\i2c_slave_top/registers/n10107 ), .B1(TA_OPT_shutdown_c_3), 
    .A1(pulse_width_19), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(adc_voltage_data_11), .A0(adc_voltage_data_3), 
    .M1(\i2c_slave_top/registers/n1700 ), 
    .M0(\i2c_slave_top/registers/addr_i_1 ), 
    .FXB(\i2c_slave_top/registers/n1696 ), 
    .FXA(\i2c_slave_top/registers/n9609 ), 
    .OFX0(\i2c_slave_top/registers/n1696 ), 
    .OFX1(\i2c_slave_top/registers/n1736 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7575_SLICE_476 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9910 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7647_SLICE_477 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10250 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9290 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_4 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7573_SLICE_478 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478 
    ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .M1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .FXB(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9908 ), 
    .FXA(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9910 ), 
    .OFX0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9908 ), 
    .OFX1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9911 ));
  adc_control_i7599_SLICE_479 \adc_control/i7599/SLICE_479 ( 
    .D1(\adc_control/data_ready_N_1495 ), .C1(\adc_control/state_0 ), 
    .B1(\adc_control/state_3 ), .A1(\adc_control/state_2 ), 
    .D0(\adc_control/state_0 ), .C0(\adc_control/adc_convert_N_1490 ), 
    .B0(\adc_control/state_3 ), .A0(\adc_control/state_2 ), 
    .M0(\adc_control/state_1 ), .OFX0(\adc_control/clk_25mhz_c_enable_175 ));
  i2c_slave_top_registers_SLICE_480 \i2c_slave_top/registers/SLICE_480 ( 
    .D1(\i2c_slave_top/registers/n1700 ), 
    .C1(\i2c_slave_top/registers/n10041 ), .B1(\i2c_slave_top/registers/n19 ), 
    .A1(\i2c_slave_top/registers/n10107 ), 
    .D0(\i2c_slave_top/registers/n10106 ), .C0(\i2c_slave_top/registers/n10 ), 
    .B0(\i2c_slave_top/registers/n10041 ), 
    .A0(\i2c_slave_top/registers/n10100 ), .M1(\i2c_slave_top/n10050 ), 
    .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_88 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1700 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_8 ), 
    .F1(\i2c_slave_top/registers/n9677 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_9 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_481 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_481 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9340 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10022 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3052 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .C0(n10095), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10022 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ));
  SLICE_482 SLICE_482( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .M1(\driver_control/force_trigger_count_9 ), 
    .M0(\driver_control/force_trigger_count_8 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10012 ), 
    .Q0(\driver_control/force_trigger_count_d_8 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 ), 
    .Q1(\driver_control/force_trigger_count_d_9 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_483 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_483 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10042 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9290 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_12 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_11 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_484 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_484 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10021 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10012 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5026 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ));
  driver_control_SLICE_485 \driver_control/SLICE_485 ( 
    .B1(\driver_control/count_3 ), .A1(\driver_control/count_1 ), 
    .D0(\driver_control/count_5 ), .C0(\driver_control/n10 ), 
    .B0(\driver_control/n14 ), .A0(\driver_control/count_7 ), 
    .M1(\driver_control/drive_current_reg_3 ), 
    .M0(\driver_control/drive_current_reg_2 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n8290 ), 
    .Q0(\driver_control/data_6 ), .F1(\driver_control/n10 ), 
    .Q1(\driver_control/data_7 ));
  driver_control_SLICE_486 \driver_control/SLICE_486 ( 
    .D1(\driver_control/n12_adj_1548 ), .C1(\driver_control/n11_adj_1547 ), 
    .B1(\driver_control/n15 ), .A1(\driver_control/n17 ), 
    .D0(\driver_control/total_count_3 ), .C0(\driver_control/n8_adj_1546 ), 
    .B0(\driver_control/n4538 ), .A0(\driver_control/n9 ), 
    .M1(\driver_control/drive_current_reg_15 ), 
    .M0(\driver_control/drive_current_reg_14 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n9468 ), 
    .Q0(\driver_control/data_18 ), .F1(\driver_control/n4538 ), 
    .Q1(\driver_control/data_19 ));
  i2c_slave_top_registers_SLICE_487 \i2c_slave_top/registers/SLICE_487 ( 
    .D1(\i2c_slave_top/registers/n6 ), .C1(\i2c_slave_top/registers/n1635 ), 
    .B1(\i2c_slave_top/registers/n10067 ), 
    .A1(\i2c_slave_top/registers/n9677 ), 
    .D0(\i2c_slave_top/registers/addr_i_1 ), 
    .C0(\i2c_slave_top/registers/n16 ), .B0(\i2c_slave_top/registers/n10076 ), 
    .A0(\i2c_slave_top/registers/n18 ), .M1(\i2c_slave_top/n10058 ), 
    .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_88 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n6 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_14 ), 
    .F1(\i2c_slave_top/registers/n5138 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_15 ));
  i2c_slave_top_registers_SLICE_488 \i2c_slave_top/registers/SLICE_488 ( 
    .C1(\i2c_slave_top/registers/n5106 ), .B1(\i2c_slave_top/registers/n5107 ), 
    .A1(\i2c_slave_top/registers/n5108 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/addr_i_3 ), 
    .A0(\i2c_slave_top/registers/n10100 ), .M1(\i2c_slave_top/n10058 ), 
    .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_97 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n18 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_6 ), 
    .F1(\i2c_slave_top/registers/n10101 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_7 ));
  i2c_slave_top_registers_SLICE_489 \i2c_slave_top/registers/SLICE_489 ( 
    .D1(\i2c_slave_top/registers/addr_i_1 ), 
    .C1(\i2c_slave_top/registers/n10037 ), 
    .B1(\i2c_slave_top/registers/n9574 ), 
    .A1(\i2c_slave_top/registers/n10076 ), 
    .C0(\i2c_slave_top/registers/n10106 ), 
    .B0(\i2c_slave_top/registers/n10052 ), 
    .A0(\i2c_slave_top/registers/n10101 ), 
    .F0(\i2c_slave_top/registers/n9574 ), 
    .F1(\i2c_slave_top/registers/clk_25mhz_c_enable_154 ));
  i2c_slave_top_registers_SLICE_490 \i2c_slave_top/registers/SLICE_490 ( 
    .C1(\i2c_slave_top/registers/n10106 ), 
    .B1(\i2c_slave_top/registers/n10052 ), 
    .A1(\i2c_slave_top/registers/n10101 ), .D0(\i2c_slave_top/registers/n537 ), 
    .C0(\i2c_slave_top/registers/n59 ), .B0(\i2c_slave_top/registers/n10037 ), 
    .A0(\i2c_slave_top/registers/n10026 ), .M1(\i2c_slave_top/n10053 ), 
    .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_51 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_179 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_2 ), 
    .F1(\i2c_slave_top/registers/n59 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_3 ));
  i2c_slave_top_registers_SLICE_491 \i2c_slave_top/registers/SLICE_491 ( 
    .C1(\i2c_slave_top/registers/n5110 ), .B1(\i2c_slave_top/registers/n5111 ), 
    .A1(\i2c_slave_top/registers/n5112 ), .C0(\i2c_slave_top/registers/n5 ), 
    .B0(\i2c_slave_top/registers/n10101 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_120 ), 
    .F1(\i2c_slave_top/registers/addr_i_1 ));
  i2c_slave_top_registers_SLICE_492 \i2c_slave_top/registers/SLICE_492 ( 
    .D1(\i2c_slave_top/n10049 ), .C1(\i2c_slave_top/state_1_N_836_0 ), 
    .B1(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A1(\i2c_slave_top/registers/byte_cnt_0 ), 
    .D0(\i2c_slave_top/registers/n10037 ), .C0(\i2c_slave_top/registers/n59 ), 
    .B0(\i2c_slave_top/registers/n10076 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), .M1(\i2c_slave_top/n10056 ), 
    .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_43 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_28 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_12 ), 
    .F1(\i2c_slave_top/registers/n10037 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_13 ));
  i2c_slave_top_registers_SLICE_493 \i2c_slave_top/registers/SLICE_493 ( 
    .C1(\i2c_slave_top/registers/n10106 ), 
    .B1(\i2c_slave_top/registers/n10052 ), 
    .A1(\i2c_slave_top/registers/n10101 ), .D0(\i2c_slave_top/registers/n537 ), 
    .C0(\i2c_slave_top/registers/n10018 ), 
    .B0(\i2c_slave_top/registers/n10037 ), 
    .A0(\i2c_slave_top/registers/n10026 ), .M1(\i2c_slave_top/n10056 ), 
    .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_51 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_174 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_4 ), 
    .F1(\i2c_slave_top/registers/n10018 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_5 ));
  i2c_slave_top_registers_SLICE_494 \i2c_slave_top/registers/SLICE_494 ( 
    .C1(\i2c_slave_top/registers/n5122 ), .B1(\i2c_slave_top/registers/n5123 ), 
    .A1(\i2c_slave_top/registers/n5124 ), 
    .C0(\i2c_slave_top/registers/addr_i_1 ), 
    .B0(\i2c_slave_top/registers/n10101 ), 
    .A0(\i2c_slave_top/registers/n10107 ), .M1(\i2c_slave_top/n10058 ), 
    .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_51 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n10 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_6 ), 
    .F1(\i2c_slave_top/registers/n10107 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_7 ));
  i2c_slave_top_registers_SLICE_495 \i2c_slave_top/registers/SLICE_495 ( 
    .D1(\i2c_slave_top/registers/addr_i_3 ), 
    .C1(\i2c_slave_top/registers/n10_adj_1512 ), 
    .B1(\i2c_slave_top/registers/n10067 ), .A1(\i2c_slave_top/registers/n7 ), 
    .D0(\i2c_slave_top/registers/n5 ), .C0(\i2c_slave_top/registers/n5106 ), 
    .B0(\i2c_slave_top/registers/n5107 ), .A0(\i2c_slave_top/registers/n5108 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_128 ), 
    .F1(\i2c_slave_top/registers/n5 ));
  i2c_slave_top_registers_SLICE_496 \i2c_slave_top/registers/SLICE_496 ( 
    .C1(\i2c_slave_top/registers/n5126 ), .B1(\i2c_slave_top/registers/n5127 ), 
    .A1(\i2c_slave_top/registers/n5128 ), 
    .D0(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/n10106 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), .M1(\i2c_slave_top/n10056 ), 
    .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_97 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n19 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_4 ), 
    .F1(\i2c_slave_top/registers/n10106 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_5 ));
  i2c_slave_top_registers_SLICE_497 \i2c_slave_top/registers/SLICE_497 ( 
    .D1(\i2c_slave_top/registers/n10106 ), 
    .C1(\i2c_slave_top/registers/n10035 ), 
    .B1(\i2c_slave_top/registers/n10036 ), 
    .A1(\i2c_slave_top/registers/n10037 ), 
    .D0(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/addr_i_3 ), 
    .A0(\i2c_slave_top/registers/n10107 ), 
    .F0(\i2c_slave_top/registers/n10035 ), 
    .F1(\i2c_slave_top/registers/clk_25mhz_c_enable_35 ));
  i2c_slave_top_registers_SLICE_498 \i2c_slave_top/registers/SLICE_498 ( 
    .D1(\i2c_slave_top/registers/addr_i_1 ), 
    .C1(\i2c_slave_top/registers/n10037 ), 
    .B1(\i2c_slave_top/registers/n10111 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/addr_i_3 ), 
    .B0(\i2c_slave_top/registers/n9163 ), 
    .A0(\i2c_slave_top/registers/n10019 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_112 ), 
    .F1(\i2c_slave_top/registers/n10019 ));
  i2c_slave_top_registers_SLICE_499 \i2c_slave_top/registers/SLICE_499 ( 
    .C1(\i2c_slave_top/registers/n10100 ), 
    .B1(\i2c_slave_top/registers/n10107 ), 
    .A1(\i2c_slave_top/registers/n10106 ), 
    .D0(\i2c_slave_top/registers/n10101 ), 
    .C0(\i2c_slave_top/registers/addr_i_3 ), 
    .B0(\i2c_slave_top/registers/n9163 ), 
    .A0(\i2c_slave_top/registers/n10019 ), .M1(\i2c_slave_top/n10053 ), 
    .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_43 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_105 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_10 ), 
    .F1(\i2c_slave_top/registers/n9163 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_11 ));
  i2c_slave_top_registers_SLICE_500 \i2c_slave_top/registers/SLICE_500 ( 
    .C1(\i2c_slave_top/registers/n10100 ), 
    .B1(\i2c_slave_top/registers/n10_adj_1513 ), 
    .A1(\i2c_slave_top/registers/n10111 ), 
    .D0(\i2c_slave_top/registers/n10031 ), 
    .C0(\i2c_slave_top/registers/n10037 ), 
    .B0(\i2c_slave_top/registers/n10101 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_162 ), 
    .F1(\i2c_slave_top/registers/n10031 ));
  i2c_slave_top_registers_SLICE_501 \i2c_slave_top/registers/SLICE_501 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/n10111 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n12 ), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n10036 ), 
    .A0(\i2c_slave_top/registers/n10037 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_97 ), 
    .F1(\i2c_slave_top/registers/n10036 ));
  i2c_slave_top_registers_SLICE_502 \i2c_slave_top/registers/SLICE_502 ( 
    .D1(\i2c_slave_top/registers/addr_i_3 ), 
    .C1(\i2c_slave_top/registers/n10100 ), 
    .B1(\i2c_slave_top/registers/n10107 ), 
    .A1(\i2c_slave_top/registers/n10106 ), .D0(\i2c_slave_top/registers/n12 ), 
    .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n10036 ), 
    .A0(\i2c_slave_top/registers/n10037 ), .M1(\i2c_slave_top/n10050 ), 
    .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_51 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_88 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_0 ), 
    .F1(\i2c_slave_top/registers/n12 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_1 ));
  i2c_slave_top_registers_SLICE_503 \i2c_slave_top/registers/SLICE_503 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), 
    .B1(\i2c_slave_top/registers/n10111 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n12 ), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n10026 ), 
    .A0(\i2c_slave_top/registers/n10037 ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_70 ), 
    .F1(\i2c_slave_top/registers/n10026 ));
  i2c_slave_top_registers_SLICE_504 \i2c_slave_top/registers/SLICE_504 ( 
    .D1(\i2c_slave_top/registers/n10083 ), 
    .C1(\i2c_slave_top/registers/n10026 ), 
    .B1(\i2c_slave_top/state_1_N_836_0 ), .A1(\i2c_slave_top/n10049 ), 
    .B0(\i2c_slave_top/registers/byte_cnt_1 ), 
    .A0(\i2c_slave_top/registers/byte_cnt_0 ), .M1(\i2c_slave_top/n10058 ), 
    .M0(\i2c_slave_top/n10057 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_43 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n10083 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_14 ), 
    .F1(\i2c_slave_top/registers/n10007 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_15 ));
  i2c_slave_top_registers_SLICE_505 \i2c_slave_top/registers/SLICE_505 ( 
    .D1(\i2c_slave_top/registers/n18_adj_1514 ), 
    .C1(\i2c_slave_top/registers/n26 ), .B1(\i2c_slave_top/registers/n30 ), 
    .A1(\i2c_slave_top/registers/n17 ), .D0(\i2c_slave_top/registers/count_2 ), 
    .C0(\i2c_slave_top/registers/count_3 ), 
    .B0(\i2c_slave_top/registers/count_1 ), 
    .A0(\i2c_slave_top/registers/count_3__N_642 ), .M1(\i2c_slave_top/n10053 ), 
    .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_97 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n537 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_2 ), 
    .F1(\i2c_slave_top/registers/count_3__N_642 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_3 ));
  i2c_slave_top_registers_SLICE_506 \i2c_slave_top/registers/SLICE_506 ( 
    .B1(\i2c_slave_top/registers/dynamic_control_2 ), 
    .A1(\i2c_slave_top/registers/dynamic_control_11 ), 
    .D0(\i2c_slave_top/registers/dynamic_control_9 ), 
    .C0(\i2c_slave_top/registers/n22_adj_1515 ), 
    .B0(\i2c_slave_top/registers/n28 ), 
    .A0(\i2c_slave_top/registers/dynamic_control_6 ), 
    .M0(\i2c_slave_top/registers/n4864 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_624 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/n30 ), .Q0(\i2c_slave_top/registers/n5112 ), 
    .F1(\i2c_slave_top/registers/n22_adj_1515 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_507 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_507 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10072 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_3 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10072 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_508 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_508 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10040 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_5 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10040 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_509 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_509 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10065 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_8 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10065 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_510 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_510 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10024 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10029 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10029 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9897 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_511 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_511 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10034 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_9 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10034 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_512 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_512 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n3052 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9540 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9340 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10047 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9536 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10047 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_513 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_513 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10039 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n570 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9564 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10079 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_7 )
    );
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_514 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_514 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10024 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n1007 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_6 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10024 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_515 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_515 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10006 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10042 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5026 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , .A0(count_i_3__N_128), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n2853 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5103 ));
  SLICE_516 SLICE_516( .C1(d_ff), .B1(reset_n), .A1(stop_detect_i), 
    .D0(n10095), .C0(\i2c_slave_top/addr_start_1 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_2 ), 
    .M0(\driver_control/force_trigger_count_19 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_624 ), 
    .Q0(\driver_control/force_trigger_count_d_19 ), .F1(n10095), 
    .Q1(\driver_control/force_trigger_count_d_2 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_517 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_517 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9536 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10011 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10074 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/out_n_enable_1 )
    , 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ));
  SLICE_518 SLICE_518( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10080 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .M1(\driver_control/force_trigger_count_5 ), 
    .M0(\driver_control/force_trigger_count_4 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4601 ), 
    .Q0(\driver_control/force_trigger_count_d_4 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10080 ), 
    .Q1(\driver_control/force_trigger_count_d_5 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_519 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_519 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .M1(\i2c_slave_top/data_out_1 ), .M0(\i2c_slave_top/data_out_0 ), 
    .LSR(\i2c_slave_top/state_1_N_836_0 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10021 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_0 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_1 ));
  SLICE_520 SLICE_520( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1509 )
    , .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9_adj_1508 )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .M1(\driver_control/force_trigger_count_3 ), 
    .M0(\driver_control/force_trigger_count_23 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n5 ), 
    .Q0(\driver_control/force_trigger_count_d_23 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6 ), 
    .Q1(\driver_control/force_trigger_count_d_3 ));
  SLICE_521 SLICE_521( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 ), 
    .C1(reset_bus_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_133 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10059 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .M1(\driver_control/force_trigger_count_7 ), 
    .M0(\driver_control/force_trigger_count_6 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4 ), 
    .Q0(\driver_control/force_trigger_count_d_6 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4_adj_1507 )
    , .Q1(\driver_control/force_trigger_count_d_7 ));
  SLICE_522 SLICE_522( .D1(n10113), .C1(d_ff), .B1(reset_n), 
    .A1(stop_detect_i), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , .F0(n10113), .F1(n10075));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_523 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_523 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n4347 ), 
    .C1(n10095), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10046 ), 
    .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , .M1(\i2c_slave_top/data_out_3 ), .M0(\i2c_slave_top/data_out_2 ), 
    .LSR(\i2c_slave_top/state_1_N_836_0 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_2 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9540 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_3 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_524 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_524 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10114 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10045 ), 
    .M1(\i2c_slave_top/data_out_5 ), .M0(\i2c_slave_top/data_out_4 ), 
    .LSR(\i2c_slave_top/state_1_N_836_0 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10010 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_4 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10045 ), 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_5 ));
  i2c_slave_top_i2cslave_controller_top_SLICE_525 
    \i2c_slave_top/i2cslave_controller_top/SLICE_525 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9912 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9911 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10059 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .M0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3 ), 
    .CE(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_N_70 ), 
    .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9912 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n35 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_526 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_526 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10088 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10054 ), 
    .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10088 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9357 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_527 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_527 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i )
    , 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10028 ), 
    .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n12 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10028 ));
  adc_control_SLICE_528 \adc_control/SLICE_528 ( .D1(\adc_control/count_3 ), 
    .C1(\adc_control/n91 ), .B1(\adc_control/n10103 ), 
    .A1(\adc_control/capture_state_3 ), .B0(\adc_control/capture_state_0 ), 
    .A0(\adc_control/capture_state_1 ), .M1(\adc_control/voltage_data_5 ), 
    .M0(voltage_data_4), .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n10103 ), 
    .Q0(adc_voltage_data_4), .F1(\adc_control/adc_sck_temp_enable_40 ), 
    .Q1(adc_voltage_data_5));
  adc_control_SLICE_529 \adc_control/SLICE_529 ( 
    .D1(\adc_control/capture_state_2 ), .C1(\adc_control/count_2 ), 
    .B1(\adc_control/n10063 ), .A1(\adc_control/count_3 ), 
    .C0(\adc_control/capture_state_3 ), .B0(\adc_control/capture_state_0 ), 
    .A0(\adc_control/capture_state_1 ), .M1(\adc_control/voltage_data_13 ), 
    .M0(\adc_control/voltage_data_12 ), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n10063 ), 
    .Q0(adc_voltage_data_12), .F1(\adc_control/adc_sck_temp_enable_23 ), 
    .Q1(adc_voltage_data_13));
  adc_control_SLICE_530 \adc_control/SLICE_530 ( .D1(\adc_control/data_ready ), 
    .C1(\adc_control/n10064 ), .B1(\adc_control/n6459 ), 
    .A1(\adc_control/capture_state_3 ), .C0(\adc_control/capture_state_2 ), 
    .B0(\adc_control/capture_state_0 ), .A0(\adc_control/capture_state_1 ), 
    .M1(\adc_control/voltage_data_3 ), .M0(\adc_control/voltage_data_2 ), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/n10064 ), 
    .Q0(adc_voltage_data_2), .F1(\adc_control/adc_sck_temp_enable_31 ), 
    .Q1(adc_voltage_data_3));
  adc_control_SLICE_531 \adc_control/SLICE_531 ( 
    .B1(\adc_control/convert_count_6 ), .A1(\adc_control/convert_count_5 ), 
    .D0(\adc_control/convert_count_4 ), .C0(\adc_control/convert_count_7 ), 
    .B0(\adc_control/n6 ), .A0(\adc_control/n8 ), 
    .M1(\adc_control/voltage_data_9 ), .M0(\adc_control/voltage_data_8 ), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/adc_convert_N_1490 ), 
    .Q0(adc_voltage_data_8), .F1(\adc_control/n6 ), .Q1(adc_voltage_data_9));
  adc_control_SLICE_532 \adc_control/SLICE_532 ( 
    .C1(\adc_control/capture_state_2 ), .B1(\adc_control/count_2 ), 
    .A1(\adc_control/count_0 ), .D0(\adc_control/n9420 ), 
    .C0(\adc_control/n10063 ), .B0(\adc_control/n91 ), .A0(count_1), 
    .F0(\adc_control/n6459 ), .F1(\adc_control/n91 ));
  adc_control_SLICE_533 \adc_control/SLICE_533 ( .B1(\adc_control/count_3 ), 
    .A1(\adc_control/count_5 ), .D0(\adc_control/count_4 ), 
    .C0(\adc_control/count_7 ), .B0(\adc_control/count_6 ), 
    .A0(\adc_control/n7 ), .F0(\adc_control/n9420 ), .F1(\adc_control/n7 ));
  adc_control_SLICE_534 \adc_control/SLICE_534 ( .B1(count_1), 
    .A1(\adc_control/count_6 ), .D0(\adc_control/count_7 ), 
    .C0(\adc_control/capture_state_2 ), .B0(\adc_control/count_3 ), 
    .A0(\adc_control/n13 ), .F0(\adc_control/n16 ), .F1(\adc_control/n13 ));
  SLICE_535 SLICE_535( .D1(n10095), .C1(\i2c_slave_top/addr_start_4 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n10095), .C0(\i2c_slave_top/addr_start_4 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_16 ), 
    .M0(\driver_control/force_trigger_count_15 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_615 ), 
    .Q0(\driver_control/force_trigger_count_d_15 ), 
    .F1(\i2c_slave_top/addr_i_7__N_591 ), 
    .Q1(\driver_control/force_trigger_count_d_16 ));
  SLICE_536 SLICE_536( .D1(n10095), .C1(\i2c_slave_top/addr_start_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n10095), .C0(\i2c_slave_top/addr_start_2 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_18 ), 
    .M0(\driver_control/force_trigger_count_17 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_621 ), 
    .Q0(\driver_control/force_trigger_count_d_17 ), 
    .F1(\i2c_slave_top/addr_i_7__N_593 ), 
    .Q1(\driver_control/force_trigger_count_d_18 ));
  SLICE_537 SLICE_537( .D1(n10095), .C1(\i2c_slave_top/addr_start_7 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n10095), .C0(\i2c_slave_top/addr_start_7 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_10 ), 
    .M0(\driver_control/force_trigger_count_1 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_586 ), 
    .Q0(\driver_control/force_trigger_count_d_1 ), 
    .F1(\i2c_slave_top/addr_i_7__N_596 ), 
    .Q1(\driver_control/force_trigger_count_d_10 ));
  SLICE_538 SLICE_538( .D1(n10095), .C1(\i2c_slave_top/addr_start_0 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n10095), .C0(\i2c_slave_top/addr_start_0 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_21 ), 
    .M0(\driver_control/force_trigger_count_20 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_627 ), 
    .Q0(\driver_control/force_trigger_count_d_20 ), 
    .F1(\i2c_slave_top/addr_i_7__N_595 ), 
    .Q1(\driver_control/force_trigger_count_d_21 ));
  adc_control_SLICE_539 \adc_control/SLICE_539 ( 
    .D1(\adc_control/capture_state_2 ), .C1(\adc_control/capture_state_3 ), 
    .B1(\adc_control/capture_state_0 ), .A1(\adc_control/capture_state_1 ), 
    .D0(\adc_control/capture_state_3 ), .C0(\adc_control/capture_state_2 ), 
    .B0(\adc_control/capture_state_0 ), .A0(\adc_control/capture_state_1 ), 
    .M1(\adc_control/voltage_data_1 ), .M0(voltage_data_0), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), 
    .F0(\adc_control/adc_sck_temp_enable_39 ), .Q0(adc_voltage_data_0), 
    .F1(\adc_control/adc_sck_temp_enable_18 ), .Q1(adc_voltage_data_1));
  adc_control_SLICE_540 \adc_control/SLICE_540 ( .D1(\adc_control/count_2 ), 
    .C1(\adc_control/count_3 ), .B1(\adc_control/n10063 ), 
    .A1(\adc_control/capture_state_2 ), .D0(\adc_control/capture_state_2 ), 
    .C0(\adc_control/count_2 ), .B0(\adc_control/n10063 ), 
    .A0(\adc_control/count_3 ), .M1(\adc_control/voltage_data_11 ), 
    .M0(\adc_control/voltage_data_10 ), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), 
    .F0(\adc_control/adc_sck_temp_enable_20 ), .Q0(adc_voltage_data_10), 
    .F1(\adc_control/adc_sck_temp_enable_27 ), .Q1(adc_voltage_data_11));
  driver_control_SLICE_541 \driver_control/SLICE_541 ( 
    .C1(\driver_control/ss_temp ), .B1(\driver_control/state_3 ), 
    .A1(\driver_control/state_1 ), .C0(\driver_control/ss_temp ), 
    .B0(\driver_control/state_3 ), .A0(\driver_control/state_1 ), 
    .M1(\driver_control/drive_current_reg_1 ), 
    .M0(\driver_control/drive_current_reg_0 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/sck_temp_enable_21 ), 
    .Q0(\driver_control/data_4 ), .F1(\driver_control/sck_temp_enable_30 ), 
    .Q1(\driver_control/data_5 ));
  i2c_slave_top_registers_SLICE_542 \i2c_slave_top/registers/SLICE_542 ( 
    .D1(\i2c_slave_top/registers/n10101 ), 
    .C1(\i2c_slave_top/registers/n10037 ), 
    .B1(\i2c_slave_top/registers/n10031 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), 
    .C0(\i2c_slave_top/registers/n10031 ), 
    .B0(\i2c_slave_top/registers/addr_i_1 ), 
    .A0(\i2c_slave_top/registers/n10101 ), .M1(\i2c_slave_top/n10053 ), 
    .M0(\i2c_slave_top/n10051 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_88 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/n10017 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_10 ), 
    .F1(\i2c_slave_top/registers/clk_25mhz_c_enable_170 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_11 ));
  SLICE_543 SLICE_543( .D1(n10095), .C1(\i2c_slave_top/addr_start_6 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .D0(n10095), .C0(\i2c_slave_top/addr_start_3 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_12 ), 
    .M0(\driver_control/force_trigger_count_11 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_592 ), 
    .Q0(\driver_control/force_trigger_count_d_11 ), 
    .F1(\i2c_slave_top/addr_i_7__N_609 ), 
    .Q1(\driver_control/force_trigger_count_d_12 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_544 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_544 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10112 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10073 ));
  i2c_slave_top_registers_SLICE_545 \i2c_slave_top/registers/SLICE_545 ( 
    .D1(\i2c_slave_top/registers/addr_i_7 ), 
    .C1(\i2c_slave_top/registers/n10107 ), 
    .B1(\i2c_slave_top/registers/n10106 ), 
    .A1(\i2c_slave_top/registers/addr_i_3 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/addr_i_3 ), 
    .A0(\i2c_slave_top/registers/n10107 ), .M1(\i2c_slave_top/n10056 ), 
    .M0(\i2c_slave_top/n10055 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_88 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n10052 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_12 ), 
    .F1(\i2c_slave_top/registers/n10_adj_1513 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_13 ));
  i2c_slave_top_registers_SLICE_546 \i2c_slave_top/registers/SLICE_546 ( 
    .C1(\i2c_slave_top/registers/n5 ), .B1(\i2c_slave_top/registers/n10101 ), 
    .A1(\i2c_slave_top/registers/addr_i_1 ), 
    .C0(\i2c_slave_top/registers/n10100 ), 
    .B0(\i2c_slave_top/registers/n10101 ), 
    .A0(\i2c_slave_top/registers/addr_i_1 ), .M1(\i2c_slave_top/n10050 ), 
    .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_43 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n10_adj_1512 ), 
    .Q0(\i2c_slave_top/registers/cw_mon_current_limit_8 ), 
    .F1(\i2c_slave_top/registers/clk_25mhz_c_enable_145 ), 
    .Q1(\i2c_slave_top/registers/cw_mon_current_limit_9 ));
  i2c_slave_top_registers_SLICE_547 \i2c_slave_top/registers/SLICE_547 ( 
    .C1(\i2c_slave_top/registers/addr_i_3 ), 
    .B1(\i2c_slave_top/registers/n10111 ), 
    .A1(\i2c_slave_top/registers/addr_i_7 ), 
    .D0(\i2c_slave_top/registers/n10101 ), .C0(\i2c_slave_top/registers/n12 ), 
    .B0(\i2c_slave_top/registers/n10111 ), 
    .A0(\i2c_slave_top/registers/addr_i_7 ), .M1(\i2c_slave_top/n10050 ), 
    .M0(\i2c_slave_top/n10062 ), 
    .CE(\i2c_slave_top/registers/clk_25mhz_c_enable_97 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/registers/n1635 ), 
    .Q0(\i2c_slave_top/registers/drive_current_limit_0 ), 
    .F1(\i2c_slave_top/registers/n10041 ), 
    .Q1(\i2c_slave_top/registers/drive_current_limit_1 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_548 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_548 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10042 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10250 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_549 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_549 ( 
    .C1(stop_detect_i), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127 )
    , .B0(stop_detect_i), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , .M1(\i2c_slave_top/data_out_7 ), .M0(\i2c_slave_top/data_out_6 ), 
    .LSR(\i2c_slave_top/state_1_N_836_0 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9584 ), 
    .Q0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_6 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9_adj_1508 )
    , 
    .Q1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i_7 ));
  SLICE_550 SLICE_550( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10090 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A1(count_i_3__N_128), 
    .B0(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), 
    .A0(count_i_3__N_128), .M1(\driver_control/ss_temp ), 
    .M0(\driver_control/ldac_temp ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10079 ), 
    .Q0(\driver_control/ldac_temp_d ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10027 ), 
    .Q1(TA_spare3_c));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_551 ( 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_132 )
    , 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10094 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i )
    , 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9290 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n379 ));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_552 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_552 ( 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .B1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_0 ), 
    .A1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_1 ), 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10278 ), 
    .C0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_3_N_168_0 )
    , 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3 ), 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_2 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10046 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10044 ));
  driver_control_SLICE_553 \driver_control/SLICE_553 ( 
    .B1(\driver_control/total_count_2 ), .A1(\driver_control/total_count_1 ), 
    .B0(\driver_control/total_count_1 ), .A0(\driver_control/total_count_4 ), 
    .M1(\driver_control/drive_current_reg_11 ), 
    .M0(\driver_control/drive_current_reg_10 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n9 ), .Q0(\driver_control/data_14 ), 
    .F1(\driver_control/n6_adj_1545 ), .Q1(\driver_control/data_15 ));
  i2c_slave_top_registers_SLICE_554 \i2c_slave_top/registers/SLICE_554 ( 
    .D1(\i2c_slave_top/registers/n10036 ), 
    .C1(\i2c_slave_top/registers/n10037 ), 
    .B1(\i2c_slave_top/registers/n9163 ), 
    .A1(\i2c_slave_top/registers/addr_i_3 ), 
    .D0(\i2c_slave_top/registers/n12 ), .C0(\i2c_slave_top/registers/n10101 ), 
    .B0(\i2c_slave_top/registers/n10026 ), 
    .A0(\i2c_slave_top/registers/n10037 ), 
    .M0(\i2c_slave_top/registers/n4876 ), 
    .LSR(\i2c_slave_top/addr_i_7__N_615 ), 
    .CLK(\i2c_slave_top/registers/data_vld_dly ), 
    .F0(\i2c_slave_top/registers/clk_25mhz_c_enable_63 ), 
    .Q0(\i2c_slave_top/registers/n5124 ), 
    .F1(\i2c_slave_top/registers/n5_adj_1511 ));
  i2c_slave_top_registers_SLICE_555 \i2c_slave_top/registers/SLICE_555 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), .B1(drive_current_6), 
    .A1(period_14), .C0(\i2c_slave_top/registers/addr_i_1 ), 
    .B0(drive_current_0), .A0(period_8), .F0(\i2c_slave_top/registers/n1644 ), 
    .F1(\i2c_slave_top/registers/n1638 ));
  i2c_slave_top_registers_SLICE_556 \i2c_slave_top/registers/SLICE_556 ( 
    .C1(\i2c_slave_top/registers/addr_i_1 ), .B1(drive_current_3), 
    .A1(period_11), .C0(\i2c_slave_top/registers/addr_i_1 ), 
    .B0(drive_current_5), .A0(period_13), .F0(\i2c_slave_top/registers/n1639 ), 
    .F1(\i2c_slave_top/registers/n1641 ));
  SLICE_557 SLICE_557( .B1(reset_bus_i), .A1(reset_n), .B0(stop_detect_i), 
    .A0(reset_bus_i), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n6_adj_1509 )
    , .F1(start_detect_i_N_339));
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_558 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_558 ( 
    .C1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9160 ), 
    .B1(\i2c_slave_top/data_buffer_i_4 ), .A1(\i2c_slave_top/data_buffer_i_6 ), 
    .B0(\i2c_slave_top/data_buffer_i_7 ), .A0(\i2c_slave_top/data_buffer_i_6 ), 
    .F0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9578 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n8 ));
  driver_control_SLICE_559 \driver_control/SLICE_559 ( 
    .B1(\driver_control/total_count_14 ), .A1(\driver_control/total_count_15 ), 
    .B0(\driver_control/total_count_8 ), .A0(\driver_control/total_count_11 ), 
    .M1(\driver_control/drive_current_reg_9 ), 
    .M0(\driver_control/drive_current_reg_8 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n12_adj_1548 ), 
    .Q0(\driver_control/data_12 ), .F1(\driver_control/n11_adj_1547 ), 
    .Q1(\driver_control/data_13 ));
  driver_control_SLICE_560 \driver_control/SLICE_560 ( 
    .D1(\driver_control/total_count_6 ), .C1(\driver_control/total_count_12 ), 
    .B1(\driver_control/total_count_13 ), .A1(\driver_control/total_count_9 ), 
    .B0(\driver_control/total_count_7 ), .A0(\driver_control/total_count_10 ), 
    .M1(\driver_control/drive_current_reg_13 ), 
    .M0(\driver_control/drive_current_reg_12 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n15 ), 
    .Q0(\driver_control/data_16 ), .F1(\driver_control/n17 ), 
    .Q1(\driver_control/data_17 ));
  adc_control_SLICE_561 \adc_control/SLICE_561 ( .D1(\adc_control/state_2 ), 
    .C1(\adc_control/state_3 ), .B1(\adc_control/state_0 ), 
    .A1(\adc_control/state_1 ), .D0(\adc_control/sck_count_2 ), 
    .C0(\adc_control/sck_count_1 ), .B0(\adc_control/sck_count_3 ), 
    .A0(\adc_control/sck_count_0 ), .M1(\adc_control/voltage_data_7 ), 
    .M0(\adc_control/voltage_data_6 ), 
    .CE(\adc_control/adc_sck_temp_enable_18 ), 
    .CLK(\adc_control/adc_sck_temp ), .F0(\adc_control/data_ready_N_1495 ), 
    .Q0(adc_voltage_data_6), .F1(\adc_control/clk_25mhz_c_enable_172 ), 
    .Q1(adc_voltage_data_7));
  driver_control_SLICE_562 \driver_control/SLICE_562 ( 
    .B1(\driver_control/total_count_5 ), .A1(\driver_control/total_count_2 ), 
    .B0(\driver_control/total_count_3 ), .A0(\driver_control/total_count_0 ), 
    .M1(\driver_control/drive_current_reg_7 ), 
    .M0(\driver_control/drive_current_reg_6 ), 
    .CE(\driver_control/clk_25mhz_c_enable_147 ), .LSR(\driver_control/n5202 ), 
    .CLK(clk_25mhz_c), .F0(\driver_control/n5_adj_1544 ), 
    .Q0(\driver_control/data_10 ), .F1(\driver_control/n8_adj_1546 ), 
    .Q1(\driver_control/data_11 ));
  SLICE_563 SLICE_563( 
    .B1(\i2c_slave_top/i2cslave_controller_top/addr_ack1_i ), .A1(rw_mode_i), 
    .D0(n10095), .C0(\i2c_slave_top/addr_start_5 ), 
    .B0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i )
    , 
    .A0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i )
    , .M1(\driver_control/force_trigger_count_14 ), 
    .M0(\driver_control/force_trigger_count_13 ), .CLK(clk_25mhz_c), 
    .F0(\i2c_slave_top/addr_i_7__N_612 ), 
    .Q0(\driver_control/force_trigger_count_d_13 ), 
    .F1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9586 ), 
    .Q1(\driver_control/force_trigger_count_d_14 ));
  sda sda_I( .PADDI(sda_out), .PADDT(n6830), .PADDO(GND_net), .sda(sda));
  scl scl_I( .PADDI(scl_out), .PADDO(GND_net), .scl(scl));
  TA_laser_disable TA_laser_disable_I( .PADDO(VCC_net), 
    .TA_laser_disable(TA_laser_disable));
  laser_disable_led_n laser_disable_led_n_I( .PADDO(GND_net), 
    .laser_disable_led_n(laser_disable_led_n));
  adc_sck adc_sck_I( .PADDO(adc_sck_c), .adc_sck(adc_sck));
  ldac_n ldac_n_I( .PADDO(GND_net), .ldac_n(ldac_n));
  ss ss_I( .PADDO(TA_spare3_c), .ss(ss));
  mosi mosi_I( .PADDO(TA_spare2_c), .mosi(mosi));
  sck sck_I( .PADDO(TA_spare1_c), .sck(sck));
  adc_convert adc_convert_I( .PADDO(adc_convert_c), .adc_convert(adc_convert));
  temp_scl temp_scl_I( .PADDO(GND_net), .temp_scl(temp_scl));
  temp_sda temp_sda_I( .PADDO(GND_net), .temp_sda(temp_sda));
  cw_over_current_led_n cw_over_current_led_n_I( .PADDO(GND_net), 
    .cw_over_current_led_n(cw_over_current_led_n));
  pwm_over_current_led_n pwm_over_current_led_n_I( .PADDO(GND_net), 
    .pwm_over_current_led_n(pwm_over_current_led_n));
  heartbeat_n heartbeat_n_I( .PADDO(heartbeat_n_c_7), 
    .heartbeat_n(heartbeat_n));
  cw_active_led_n cw_active_led_n_I( .PADDO(GND_net), 
    .cw_active_led_n(cw_active_led_n));
  modulate_active_led_n modulate_active_led_n_I( .PADDO(GND_net), 
    .modulate_active_led_n(modulate_active_led_n));
  mcu_gpio mcu_gpio_I( .PADDO(GND_net), .mcu_gpio(mcu_gpio));
  TA_spare1 TA_spare1_I( .PADDO(TA_spare1_c), .TA_spare1(TA_spare1));
  TA_spare2 TA_spare2_I( .PADDO(TA_spare2_c), .TA_spare2(TA_spare2));
  TA_spare3 TA_spare3_I( .PADDO(TA_spare3_c), .TA_spare3(TA_spare3));
  TA_spare4 TA_spare4_I( .PADDO(TA_spare4_c), .TA_spare4(TA_spare4));
  TA_gpio1 TA_gpio1_I( .PADDO(GND_net), .TA_gpio1(TA_gpio1));
  TA_gpio2 TA_gpio2_I( .PADDO(GND_net), .TA_gpio2(TA_gpio2));
  TA_gpio3 TA_gpio3_I( .PADDO(GND_net), .TA_gpio3(TA_gpio3));
  TA_gpio4 TA_gpio4_I( .PADDO(GND_net), .TA_gpio4(TA_gpio4));
  OPT_gpio1 OPT_gpio1_I( .PADDO(GND_net), .OPT_gpio1(OPT_gpio1));
  OPT_gpio2 OPT_gpio2_I( .PADDO(GND_net), .OPT_gpio2(OPT_gpio2));
  OPT_gpio3 OPT_gpio3_I( .PADDO(GND_net), .OPT_gpio3(OPT_gpio3));
  OPT_gpio4 OPT_gpio4_I( .PADDO(GND_net), .OPT_gpio4(OPT_gpio4));
  rstn rstn_I( .PADDI(rstn_c), .rstn(rstn));
  system_reset_n system_reset_n_I( .PADDI(system_reset_n_c_7), 
    .system_reset_n(system_reset_n));
  clk_25mhz clk_25mhz_I( .PADDI(clk_25mhz_c), .clk_25mhz(clk_25mhz));
  TA_pos_pwr_good TA_pos_pwr_good_I( .PADDI(TA_pos_pwr_good_c_6), 
    .TA_pos_pwr_good(TA_pos_pwr_good));
  TA_neg_pwr_good TA_neg_pwr_good_I( .PADDI(TA_neg_pwr_good_c_5), 
    .TA_neg_pwr_good(TA_neg_pwr_good));
  TA_EE_shutdown TA_EE_shutdown_I( .PADDI(TA_EE_shutdown_c_4), 
    .TA_EE_shutdown(TA_EE_shutdown));
  TA_OPT_shutdown TA_OPT_shutdown_I( .PADDI(TA_OPT_shutdown_c_3), 
    .TA_OPT_shutdown(TA_OPT_shutdown));
  adc_sdo adc_sdo_I( .PADDI(adc_sdo_c), .adc_sdo(adc_sdo));
  cw_compared cw_compared_I( .PADDI(cw_compared_c_2), 
    .cw_compared(cw_compared));
  pwm_compared pwm_compared_I( .PADDI(pwm_compared_c_1), 
    .pwm_compared(pwm_compared));
  GSR_INST GSR_INST( .GSRNET(reset_n));
  PUR PUR_INST( .PUR(VCC_net));
endmodule

module SLICE_0 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_21( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_19( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_2 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_17( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_3 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_15( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_4 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_13( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_5 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/static_control_i6 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i5 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_879_add_2_11( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_6 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_9( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_7 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_7( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_8 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_5( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_9 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_3( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_10 ( input B1, A1, M1, M0, CE, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/static_control_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 sub_879_add_2_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_11 ( input B0, A0, M1, M0, CE, CLK, FCI, output Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 sub_877_add_2_25( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_12 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_23( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_21( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_14 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_19( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_15 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_17( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/period_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_15( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_17 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/period_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_13( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_18 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/period_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_11( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_19 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/static_control_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_9( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_20 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_7( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_21 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0003 \i2c_slave_top/registers/pwm_mon_current_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pwm_mon_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 sub_877_add_2_5( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0003 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_22 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0003 \i2c_slave_top/registers/pwm_mon_current_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/pwm_mon_current_limit_i4 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu2 sub_877_add_2_3( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input B1, A1, M1, M0, CE, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \i2c_slave_top/registers/period_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 sub_877_add_2_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_24 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i22 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i21 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_23 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vmuxregsre0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_25 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i20 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i19 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_21 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_26 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i18 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i17 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_19 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_27 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i16 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i15 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_17 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_28 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i14 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i13 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_15 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_29 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_7 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_30 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i12 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i11 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_31 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_5 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_32 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_33 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_3 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_34 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20006 \driver_control/force_trigger_count_1176_add_4_1 ( .A0(GNDI), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_35 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_36 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_37 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_38 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0004 \driver_control/pulse_count_1178__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  ccu20005 \driver_control/pulse_count_1178_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_39 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, 
    FCO );
  wire   VCCI, CLK_NOTIN, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ccu20006 \driver_control/pulse_count_1178_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_40 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20007 \driver_control/add_539_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_41 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \driver_control/clk_count_1179_1293__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \driver_control/clk_count_1179_1293_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_42 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \driver_control/clk_count_1179_1293__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/clk_count_1179_1293__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \driver_control/clk_count_1179_1293_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_43 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_44 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \driver_control/clk_count_1179_1293__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20006 \driver_control/clk_count_1179_1293_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_45 ( input M1, M0, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i19 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \driver_control/sub_9_add_2_25 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hffff;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_46 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_47 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i18 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i17 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_48 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i16 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i15 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_49 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_50 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_51 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_52 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i14 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i13 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_53 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_54 ( input A0, M1, M0, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i23 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \driver_control/sub_12_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_55 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20009 \driver_control/add_539_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_56 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i22 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i21 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_12_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_57 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i12 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i11 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_58 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i20 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_12_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_59 ( input C1, B1, A1, output F1, FCO );
  wire   GNDI;

  ccu20013 \driver_control/add_539_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'he1e1;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_60 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i19 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_12_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_61 ( input A1, A0, M0, CLK, FCI, output F0, Q0, F1, 
    FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre \driver_control/mosi_193 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ccu20011 \driver_control/sub_9_add_2_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module driver_control_SLICE_62 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i17 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i16 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \driver_control/sub_12_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module driver_control_SLICE_63 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i9 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i8 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_64 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_65 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/trigger_count_1177__i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20008 \driver_control/trigger_count_1177_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_66 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/trigger_count_1177__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/trigger_count_1177__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/trigger_count_1177_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_67 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i6 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i5 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_68 ( input B0, A0, DI1, LSR, CLK, FCI, output F1, 
    Q1 );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_179 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20002 \driver_control/sub_876_add_2_25 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_69 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/trigger_count_1177__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/trigger_count_1177__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/trigger_count_1177_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_70 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/trigger_count_1177__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/trigger_count_1177__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/trigger_count_1177_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_71 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_72 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i17 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i16 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_23 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_73 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i15 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i14 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_21 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_74 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i23 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i22 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_75 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/trigger_count_1177__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20006 \driver_control/trigger_count_1177_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_76 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i13 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i12 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_19 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_77 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i11 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i10 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_17 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_78 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i23 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20008 \driver_control/force_trigger_count_1176_add_4_25 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_79 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i21 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i20 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_9_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_80 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \driver_control/sub_9_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_81 ( input M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0003 \driver_control/drive_current_reg_i0_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \driver_control/sub_10_add_2_25 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_82 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_83 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_15 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_84 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i22 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i21 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_23 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_85 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_86 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i20 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i19 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_21 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_87 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_88 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i9 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i8 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_89 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_90 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i18 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i17 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_19 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_91 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0003 \driver_control/drive_current_reg_i0_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \driver_control/drive_current_reg_i0_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_92 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \driver_control/drive_current_reg_i0_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_93 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_94 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i23 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_95 ( input A1, A0, M1, M0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \driver_control/drive_current_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/drive_current_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_96 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i15 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i14 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_97 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i13 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i12 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_98 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i16 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i15 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_17 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_99 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i14 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i13 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_15 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_100 ( input A1, A0, M1, M0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i11 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i10 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_101 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i12 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i11 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_13 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_102 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_11 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_103 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i22 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i21 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_104 ( input A1, A0, M1, M0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \driver_control/sub_10_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_105 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i20 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_106 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \driver_control/force_trigger_count_1176__i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/force_trigger_count_1176__i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \driver_control/force_trigger_count_1176_add_4_9 ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_107 ( input A1, M1, M0, CE, LSR, CLK, output Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/data_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \driver_control/data_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20014 \driver_control/sub_10_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_108 ( input B1, A1, B0, A0, M1, M0, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d_i19 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d_i18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \driver_control/sub_876_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_109 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, 
    Q0 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \driver_control/pulse_count_1178__i23 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ccu20008 \driver_control/pulse_count_1178_add_4_25 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module driver_control_SLICE_110 ( input B1, A1, M1, M0, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre \driver_control/period_d2_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/period_d2_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \driver_control/sub_876_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_111 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20007 \i2c_slave_top/registers/add_229_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_112 ( input A1, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20009 \i2c_slave_top/registers/add_229_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_113 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg2_i_790 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_reg1_i_789 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20009 \i2c_slave_top/registers/add_229_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_114 ( input A1, A0, FCI, output F0, F1, 
    FCO );
  wire   GNDI;

  ccu20009 \i2c_slave_top/registers/add_229_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_115 ( input A1, M0, CLK, output Q0, F1, FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack1_i_765 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ccu20014 \i2c_slave_top/registers/add_229_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module SLICE_116 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20002 sub_879_add_2_25( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_117 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_879_add_2_23( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_118 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/count_i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20012 \adc_control/sub_13_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_119 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/count_i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/count_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_13_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_120 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/count_i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0015 \adc_control/count_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_13_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0015 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module adc_control_SLICE_121 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0015 \adc_control/count_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/count_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \adc_control/sub_13_add_2_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_122 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0015 \adc_control/count_i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20014 \adc_control/sub_13_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_123 ( input A0, DI0, CE, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/convert_count_1181__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20008 \adc_control/convert_count_1181_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_124 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/convert_count_1181__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/convert_count_1181__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \adc_control/convert_count_1181_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_125 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/convert_count_1181__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/convert_count_1181__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \adc_control/convert_count_1181_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_126 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/convert_count_1181__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/convert_count_1181__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \adc_control/convert_count_1181_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_127 ( input A1, DI1, CE, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \adc_control/convert_count_1181__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20006 \adc_control/convert_count_1181_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_128 ( input A0, DI0, M1, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  vmuxregsre \driver_control/force_trigger_count_d2_i8 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20008 \heart_beat/prescale_1175_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_129 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_130 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_131 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_132 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \heart_beat/count_1174_1298__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \heart_beat/count_1174_1298_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_133 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_134 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_135 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_136 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/prescale_1175__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/prescale_1175__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/prescale_1175_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_137 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/count_1174_1298__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/count_1174_1298__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/count_1174_1298_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_138 ( input A1, DI1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, M0_dly;

  vmuxregsre \heart_beat/prescale_1175__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i7 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20006 \heart_beat/prescale_1175_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_139 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/count_1174_1298__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/count_1174_1298__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/count_1174_1298_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_140 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \heart_beat/count_1174_1298__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20006 \heart_beat/count_1174_1298_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module heart_beat_SLICE_141 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \heart_beat/count_1174_1298__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \heart_beat/count_1174_1298__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \heart_beat/count_1174_1298_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_142 ( input A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \driver_control/sck_temp_I_0_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i10 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/sck_195 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_145 ( input D1, C1, B1, A1, DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40016 \driver_control/i3021_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40017 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \driver_control/trigger_ext_185 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_146 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \adc_control/i1_2_lut_adj_87 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \adc_control/i7327_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/adc_sck_temp_84 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_147 ( input DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40020 \adc_control/n10280\002/BUF0/BUF0 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \adc_control/n10280\003/BUF0/BUF0 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \adc_control/capture_state_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/capture_state_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_148 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40021 \adc_control/i4284_1_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40022 \adc_control/i8_4_lut_rep_128 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0004 \adc_control/capture_state_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/capture_state_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_149 ( input B1, A1, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40023 \adc_control/i1_2_lut_rep_206 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \adc_control/i2816_2_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \adc_control/data_ready_83 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_150 ( input B1, A1, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40025 \adc_control/i6219_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \adc_control/i6217_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0004 \adc_control/sck_count_1180__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/sck_count_1180__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_151 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40026 \adc_control/i6233_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40027 \adc_control/i6226_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \adc_control/sck_count_1180__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \adc_control/sck_count_1180__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_152 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40028 \adc_control/i1_3_lut_rep_118_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40029 \adc_control/i2893_2_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \adc_control/state_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC3C7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_153 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40030 \adc_control/i3048_2_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40031 \adc_control/mux_674_Mux_1_i3_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/state_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7C7C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_154 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40032 \adc_control/i7500_3_lut_rep_168_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40033 \adc_control/i7332_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/state_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_155 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40034 \adc_control/i3055_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40033 \adc_control/i7331_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/state_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_156 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40035 \adc_control/i7333_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFD20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_157 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40022 \adc_control/i1_2_lut_rep_131_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 \adc_control/i7334_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_158 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40036 \adc_control/i7554_2_lut_rep_191 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \adc_control/i7335_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF780) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_159 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40037 \adc_control/i7337_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_160 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 \adc_control/i7339_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40035 \adc_control/i7338_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i7 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/voltage_data_i6 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_161 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40024 \adc_control/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40038 \adc_control/i7340_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i8 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_162 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40035 \adc_control/i7341_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_163 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40037 \adc_control/i7343_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40035 \adc_control/i7342_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/voltage_data_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_164 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40039 \adc_control/i3_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \adc_control/i7344_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_165 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40032 \adc_control/i2_3_lut_rep_130_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \adc_control/i7345_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/voltage_data_i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_166 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40039 \adc_control/state_3__I_0_98_i6_2_lut_rep_214 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 \adc_control/i7328_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/adc_convert_81 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF703) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_174 ( input DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40020 \adc_control/n10280\001/BUF0/BUF0 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \adc_control/n10280\000/BUF0/BUF0 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \adc_control/adc_voltage_data_temp_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_175
   ( input B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40041 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_183 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40042 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i4 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0043 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_176 ( input D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40044 \reset_generator/i2_2_lut_rep_159_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i22 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/d_ff_753 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_177
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40045 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40046 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4695_2_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_178 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_148_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_160_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_179 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_151_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_149_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_180 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_154_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_153_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_181 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_156_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_155_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_182 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_183 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_184 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_185 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_187 ( input B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40024 \driver_control/trigger_ext_I_82_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/all_trigger_183 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/all_trigger_d_184 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_188 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40023 \driver_control/i1_2_lut_adj_169 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \driver_control/i1_2_lut_adj_170 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0049 \driver_control/count_i0_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/count_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0049 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module driver_control_SLICE_189 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40018 \driver_control/i1_2_lut_adj_167 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \driver_control/i1_2_lut_adj_168 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \driver_control/count_i0_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0049 \driver_control/count_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_190 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40018 \driver_control/i1_2_lut_adj_165 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \driver_control/i1_2_lut_adj_166 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \driver_control/count_i0_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0049 \driver_control/count_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_191 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40018 \driver_control/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \driver_control/i1_2_lut_adj_164 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \driver_control/count_i0_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/count_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_192 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40050 \driver_control/i4698_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \driver_control/i2_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \driver_control/cstate__i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/cstate__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_193 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40052 \driver_control/i29_4_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40053 \driver_control/i2791_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/data_valid_214 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5140) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_202 ( input DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40017 \driver_control/n10281\009/BUF1/BUF1 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/data_i0_i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_203 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i7_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40055 \driver_control/i2_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \driver_control/data_temp_i0_i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i9_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i8_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_205 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i11_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i10_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_206 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i13_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i12_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_207 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i15_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i14_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_208 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i17_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i16_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i16 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_209 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i19_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i18_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i18 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_210 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40054 \driver_control/mux_865_i21_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \driver_control/mux_865_i20_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i20 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_211 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40056 \driver_control/mux_865_i23_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40056 \driver_control/mux_865_i22_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 \driver_control/data_temp_i0_i22 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/data_temp_i0_i21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E02) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_212 ( input C0, B0, A0, DI0, CE, LSR, CLK, output 
    F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40057 \driver_control/i4704_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \driver_control/data_temp_i0_i23 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_213 ( input B1, A1, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40025 \driver_control/i4756_3_lut_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40036 \driver_control/i7494_2_lut_rep_182 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \driver_control/data_valid_reset_201 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_247 ( input B0, A0, DI0, M1, CLK, output F0, Q0, 
    Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40039 \driver_control/force_trigger_d_I_0_2_lut ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_d_180 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/force_trigger_ext_181 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_248 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    M1, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40058 \driver_control/i3010_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40059 \driver_control/index_I_0_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d2_i0 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/index_212 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h45BA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_249 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40039 \driver_control/i4617_2_lut_rep_103 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40060 \driver_control/mux_550_i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0003 \driver_control/ldac_temp_191 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_251 ( input C0, B0, A0, M1, M0, CLK, output F0, Q0, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40061 \driver_control/load_dac_register_I_0_3_lut_rep_175 ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/load_dac_register_209 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_252 ( input B1, A1, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40041 \driver_control/i1_2_lut_rep_195 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \driver_control/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0043 \driver_control/mosi_temp_206 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_277 ( input B1, A1, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40025 \driver_control/i15_2_lut_rep_197 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \driver_control/i2_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \driver_control/pulse_state__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_278 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40063 \driver_control/i1347_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40064 \driver_control/i7518_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \driver_control/sck_temp_199 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_279 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40065 \driver_control/ss_temp_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40053 \driver_control/i7326_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \driver_control/ss_temp_198 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F35) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_280 ( input B1, A1, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40041 \driver_control/i1_2_lut_adj_179 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \driver_control/i7526_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \driver_control/state__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 \driver_control/state__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_281 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_152 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_172 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC480) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_282 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_159 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_153 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_283 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_156 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_151 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_284 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_157 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_155 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_285 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_163 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40068 \driver_control/i1_4_lut_4_lut_4_lut_adj_150 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC840) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_286 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40068 \driver_control/i1_4_lut_4_lut_4_lut_adj_162 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_161 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_287 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_158 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40067 \driver_control/i1_4_lut_4_lut_4_lut_adj_160 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_288 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40068 \driver_control/i1_4_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40068 \driver_control/i1_4_lut_4_lut_4_lut_adj_154 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/total_count_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/total_count_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_289 ( input B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40039 \i2c_slave_top/registers/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_134 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_290 ( input D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_193_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/addr_start_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \i2c_slave_top/registers/addr_start_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_291 ( input D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_199_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/addr_start_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \i2c_slave_top/registers/addr_start_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_292 ( input D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_189_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/addr_start_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \i2c_slave_top/registers/addr_start_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_SLICE_293 ( input D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_188_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/addr_start_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \i2c_slave_top/registers/addr_start_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_294
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40072 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_4_lut_adj_119 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_93 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i2 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_295
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4706_2_lut_rep_208 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_100 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_296
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7282_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_99 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i4 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_297
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_157_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_91 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i5 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_298
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_172_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i6 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_299
   ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40074 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_48_i6_2_lut_rep_207 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_98 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i7 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_300
   ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40075 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_158_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_94 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_buffer_i_i0_i8 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_301 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/i7301/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/SLICE_301_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7301/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/i7301/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_301_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/SLICE_301_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_301_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/SLICE_301_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_301/i2c_slave_top/registers/i7301/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_301_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module i2c_slave_top_registers_SLICE_302 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/i7304/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/SLICE_302_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7304/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/i7304/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_302_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/SLICE_302_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_302_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/SLICE_302_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_302/i2c_slave_top/registers/i7304/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_302_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_303 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/i7307/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/SLICE_303_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7307/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/i7307/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_303_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/SLICE_303_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_303_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/SLICE_303_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_303/i2c_slave_top/registers/i7307/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_303_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_304 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/i7310/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/SLICE_304_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7310/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/i7310/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_304_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/SLICE_304_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_304_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/SLICE_304_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_304/i2c_slave_top/registers/i7310/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_304_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_305 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/i7313/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/SLICE_305_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7313/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/i7313/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_305_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/SLICE_305_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_305_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/SLICE_305_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_305/i2c_slave_top/registers/i7313/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_305_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_306 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/i7316/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/SLICE_306_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7316/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/i7316/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_306_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/SLICE_306_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_306_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/SLICE_306_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_306/i2c_slave_top/registers/i7316/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_306_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_307 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/i7319/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/SLICE_307_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7319/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/i7319/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_307_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/SLICE_307_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_307_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/SLICE_307_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_307/i2c_slave_top/registers/i7319/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_307_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_308 ( input C1, B1, A1, C0, B0, A0, DI1, 
    M1, M0, FXB, FXA, LSR, CLK, output OFX0, Q1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/i7322/GATE_H1 
         , 
         \i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/SLICE_308_K0_H0 
         , VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40077 \i2c_slave_top/registers/i7322/GATE ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/i7322/GATE_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/SLICE_308_K0 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/SLICE_308_K0_H0 )
    );
  vmuxregsre0004 \i2c_slave_top/registers/data_out_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_308_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/SLICE_308_K0_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_308/i2c_slave_top/registers/i7322/GATE_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_308_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_309
   ( input C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40062 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40079 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i5_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_ack1_i_768 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_310 ( 
    input A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_14 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d1_13 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_311 ( input B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40080 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d2_I_0_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d2_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/in_d3_15 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9999) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_filter_scl_inst_SLICE_312 ( 
    input D0, C0, B0, A0, M0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40073 
    \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/i1_2_lut_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/out_n_16 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_filter_sda_inst_SLICE_313 ( 
    input A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut4 \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_I_0_1_lut ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_14 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d1_13 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_314 ( input B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40080 
    \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d2_I_0_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/in_d3_15 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_316
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, LSR, CLK, output OFX0, 
    Q0 );
  wire   
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_967_i1/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40081 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316_K1_H1 )
    );
  lut40082 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_967_i1/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_967_i1/GATE_H0 )
    );
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i0 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/mux_967_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_316_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0006) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_317
   ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40083 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4702_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40084 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4701_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i2 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i1 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8484) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_318
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, LSR, CLK, output OFX0, 
    Q0 );
  wire   
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7588/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40085 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318_K1_H1 )
    );
  lut40086 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7588/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7588/GATE_H0 )
    );
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_i0_i3 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7588/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/SLICE_318_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF09) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_319
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40087 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1629_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i1 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0049 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i5 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_320
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40088 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_97 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40089 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_90 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/next_state_i_FSM_i0 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_325
   ( input D1, C1, B1, A1, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40090 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7508_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10281\000/BUF1/BUF1 
    ( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/first_read_done_788 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_326 ( input D1, C1, B1, A1, 
    A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40091 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_4_lut_adj_92 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \i2c_slave_top/i2cslave_controller_top/filter_scl_inst/i7662 ( .A(A0), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect_i_747 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_327
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, LSR, CLK, output F0, Q0, 
    F1 );
  wire   VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40092 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_111 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40034 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_110 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0093 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/not_write_ack_i_772 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0093 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_330
   ( input B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40024 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_data_valid_I_0_2_lut_rep_179 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack2_i_766 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack3_i_767 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_331
   ( input D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40094 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2145_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/read_ack_i_769 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5504) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_332
   ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7278_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40095 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7504_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0003 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_data_i_777 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_333 ( input D1, C1, B1, A1, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40096 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7545_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_I_0_1_lut 
    ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_reg_749 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h004F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_334
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40097 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_117 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40098 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_4_lut_adj_116 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0049 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/sda_wr_data_i_756 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_336
   ( input B0, A0, M1, M0, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40024 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_start_I_0_2_lut_rep_194 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect2_i_750 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/start_detect3_i_751 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_337
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40099 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_137_3_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40021 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_1_lut_rep_141_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/wr_done_i_787 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_340
   ( input D0, C0, B0, A0, M0, LSR, CLK, output F0, Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40100 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7523_2_lut_rep_104_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/write_ack_i_770 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0035) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_341 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40079 \i2c_slave_top/registers/i7551_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40101 \i2c_slave_top/registers/i7329_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \i2c_slave_top/registers/byte_cnt_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1F1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_342 ( input C1, B1, A1, DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40102 \i2c_slave_top/registers/i1_3_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 m0_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/byte_cnt_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD9D9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_343 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40025 \i2c_slave_top/registers/i6248_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \i2c_slave_top/registers/i6246_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \i2c_slave_top/registers/count_1182__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/count_1182__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_344 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40026 \i2c_slave_top/registers/i6262_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40027 \i2c_slave_top/registers/i6255_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \i2c_slave_top/registers/count_1182__i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \i2c_slave_top/registers/count_1182__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_353 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40103 \i2c_slave_top/registers/i1_2_lut_3_lut_adj_138 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40104 \i2c_slave_top/registers/i7383_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/data_vld_cnt_155 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_354 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly;

  lut40105 \i2c_slave_top/registers/i7531_3_lut_rep_166_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40106 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_147_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/data_vld_dly_156 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEF00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_363 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_131 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_132 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_364 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_148 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_149 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_365 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_146 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_147 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_366 ( input B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40039 \i2c_slave_top/registers/i2_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_144 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_367 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_137 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_139 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_368 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_136 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_140 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_369 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_142 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_141 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i13 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_370 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_133 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_143 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i15 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/dynamic_control_i14 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_371 ( input D1, C1, B1, A1, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40107 \i2c_slave_top/registers/i1709_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40017 \i2c_slave_top/registers/n10281\001/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2901 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0108 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2c_slave_top_registers_SLICE_372 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/SLICE_372_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/i2506/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_372_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/SLICE_372_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2506/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/i2506/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i0_2902_2903_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_372_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/i2506/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_372/i2c_slave_top/registers/SLICE_372_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_373 ( input D0, C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40110 \i2c_slave_top/registers/i7477_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i0_2902_2903_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_374 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n10281\008/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2905 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_375 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/SLICE_375_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/i2659/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_375_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/SLICE_375_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2659/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/i2659/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i1_2906_2907_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_375_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/i2659/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_375/i2c_slave_top/registers/SLICE_375_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_377 ( input D1, C1, B1, A1, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40110 \i2c_slave_top/registers/i1_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40017 \i2c_slave_top/registers/n10281\007/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2909 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_378 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/SLICE_378_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/i2663/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_378_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/SLICE_378_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2663/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/i2663/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i2_2910_2911_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_378_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/i2663/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_378/i2c_slave_top/registers/SLICE_378_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_379 ( input C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40048 \i2c_slave_top/registers/i2912_3_lut_rep_198 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i2_2910_2911_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_380 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n10281\006/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2913 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_381 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/SLICE_381_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/i2667/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_381_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/SLICE_381_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2667/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/i2667/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i3_2914_2915_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_381_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/i2667/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_381/i2c_slave_top/registers/SLICE_381_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_382 ( input C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40048 \i2c_slave_top/registers/i2916_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i3_2914_2915_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_383 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n10281\005/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2917 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_384 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/SLICE_384_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/i2671/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_384_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/SLICE_384_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2671/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/i2671/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i4_2918_2919_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_384_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/i2671/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_384/i2c_slave_top/registers/SLICE_384_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_386 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n10281\004/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2921 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_387 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/SLICE_387_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/i2675/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_387_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/SLICE_387_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2675/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/i2675/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i5_2922_2923_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_387_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/i2675/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_387/i2c_slave_top/registers/SLICE_387_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_388 ( input D0, C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40111 \i2c_slave_top/registers/i7274_2_lut_rep_165_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i5_2922_2923_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_389 ( input D1, C1, B1, A1, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40111 \i2c_slave_top/registers/i4646_2_lut_rep_174_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40017 \i2c_slave_top/registers/n10281\003/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2925 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_390 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/SLICE_390_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/i2679/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_390_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/SLICE_390_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2679/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/i2679/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i6_2926_2927_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_390_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/i2679/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_390/i2c_slave_top/registers/SLICE_390_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_391 ( input C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40048 \i2c_slave_top/registers/i2928_3_lut_rep_209 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i6_2926_2927_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_392 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40017 \i2c_slave_top/registers/n10281\002/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0108 \i2c_slave_top/registers/i2929 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_393 ( input C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, LSR, CLK, output OFX0, Q0 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/SLICE_393_K1_H1 
         , 
         \i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/i2683/GATE_H0 
         , VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40078 \i2c_slave_top/registers/SLICE_393_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/SLICE_393_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \i2c_slave_top/registers/i2683/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/i2683/GATE_H0 ));
  vmuxregsre0049 \i2c_slave_top/registers/addr_i_reg_i7_2930_2931_set ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \i2c_slave_top/registers/SLICE_393_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/i2683/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/SLICE_393/i2c_slave_top/registers/SLICE_393_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_394 ( input C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40048 \i2c_slave_top/registers/i2932_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i7_2930_2931_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_403 ( input C1, B1, A1, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40112 \i2c_slave_top/registers/i2_3_lut_rep_196 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \i2c_slave_top/registers/i4666_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/state_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3232) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_404 ( input B1, A1, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40039 \i2c_slave_top/registers/i7502_2_lut_4_lut_2_lut_4_lut ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \i2c_slave_top/registers/i7515_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/state_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_409 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/static_control_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_410 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i4_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/static_control_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_411 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/static_control_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_412 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i7_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/static_control_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/static_control_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_413 ( input D0, C0, B0, A0, M0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly;

  lut40072 \i2c_slave_top/registers/i2_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/o_tx_status_780 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module SLICE_414 ( input B1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40074 \reset_generator/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \driver_control/ss_I_0_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \driver_control/mosi_reset_202 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_419 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_750_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/period_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_420 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_750_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/period_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/period_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_421 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_750_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/period_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/period_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_422 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_750_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_423 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i2_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i17 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i16 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_424 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i19 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i18 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_425 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i21 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i20 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_426 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_729_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/period_i23 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/period_i22 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_427 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40079 \driver_control/i2_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40051 \driver_control/i7475_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/pulse_state__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_428 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_127 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_128 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/pulse_width_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_429 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_125 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_126 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0003 \i2c_slave_top/registers/pulse_width_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_430 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_123 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_124 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/pulse_width_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_431 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_121 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_122 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0003 \i2c_slave_top/registers/pulse_width_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_432 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_433 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i3_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_434 ( input C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/mux_733_i5_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_435 ( input C0, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40020 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \i2c_slave_top/registers/mux_733_i8_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_436 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_104 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_108 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i17 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i16 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_SLICE_437 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_106 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_105 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i19 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i18 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_438 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_103 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_107 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i21 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i20 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_SLICE_439 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_101 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_102 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i23 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/pulse_width_i22 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_440
   ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40032 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_adj_96 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40115 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_4_lut_adj_113 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/reset_bus_i_758 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_441 ( input A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40017 i9( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \reset_generator/clk_d2_I_0_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0043 \reset_generator/clk_d2_30 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_442 ( input D1, C1, B1, A1, B0, A0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, LSR_NOTIN, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40116 \adc_control/i1306_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4637_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \reset_generator/in_d2_32 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0043 \reset_generator/in_d1_31 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_443 ( input D1, C1, B1, A1, B0, A0, M0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, LSR_dly;

  lut40022 \i2c_slave_top/registers/i12_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40080 \reset_generator/in_d2_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \reset_generator/in_d3_33 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_444 ( input D1, C1, B1, A1, B0, A0, M0, CE, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40022 \i2c_slave_top/registers/i10_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40024 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 \reset_generator/out_n_34 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_445 ( input C1, B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40103 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut_rep_146_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 i7330_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/rw_mode_i_771 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_446 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40117 \driver_control/i7571_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \driver_control/i253_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \i2c_slave_top/registers/static_control_i0 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/static_control_i7 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_447 ( input D1, C1, B1, A1, C0, B0, A0, M0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40022 \driver_control/i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40048 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1535_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0043 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/stop_detect_i_752 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_448 ( input B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40039 \driver_control/i2_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40118 i7346_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \adc_control/voltage_data_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_449 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40034 \adc_control/i1_2_lut_rep_114_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40119 i7336_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \adc_control/voltage_data_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_450 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, FXB, FXA, output OFX0, F1, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/SLICE_450/i2c_slave_top/registers/n7600_bdd_4_lut_4_lut_H0 
         ;

  lut40048 \i2c_slave_top/registers/mux_737_i1_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40120 \i2c_slave_top/registers/n7600_bdd_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\i2c_slave_top/registers/SLICE_450/i2c_slave_top/registers/n7600_bdd_4_lut_4_lut_H0 )
    );
  selmux20121 \i2c_slave_top/registers/SLICE_450_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/SLICE_450/i2c_slave_top/registers/n7600_bdd_4_lut_4_lut_H0 )
    , .Z(OFX0));
  selmux2 \i2c_slave_top/registers/SLICE_450_FXMUX ( .D0(FXA), .D1(FXB), 
    .SD(M1), .Z(OFX1));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7430) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux20121 ( input D0, output Z );

  BUFBA INST1( .A(D0), .Z(Z));
endmodule

module driver_control_i7597_SLICE_451 ( input A1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, 
         \driver_control/i7597/SLICE_451/driver_control/i7597/SLICE_451_K1_H1 , 
         \driver_control/i7597/SLICE_451/driver_control/i7597/GATE_H0 ;

  lut40122 \driver_control/i7597/SLICE_451_K1 ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(GNDI), 
    .Z(\driver_control/i7597/SLICE_451/driver_control/i7597/SLICE_451_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40123 \driver_control/i7597/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\driver_control/i7597/SLICE_451/driver_control/i7597/GATE_H0 ));
  selmux2 \driver_control/i7597/SLICE_451_K0K1MUX ( 
    .D0(\driver_control/i7597/SLICE_451/driver_control/i7597/GATE_H0 ), 
    .D1(\driver_control/i7597/SLICE_451/driver_control/i7597/SLICE_451_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_i24_SLICE_452 ( input C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \driver_control/i24/SLICE_452/driver_control/i24/SLICE_452_K1_H1 , 
         \driver_control/i24/SLICE_452/driver_control/i24/GATE_H0 ;

  lut40124 \driver_control/i24/SLICE_452_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\driver_control/i24/SLICE_452/driver_control/i24/SLICE_452_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40125 \driver_control/i24/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\driver_control/i24/SLICE_452/driver_control/i24/GATE_H0 ));
  selmux2 \driver_control/i24/SLICE_452_K0K1MUX ( 
    .D0(\driver_control/i24/SLICE_452/driver_control/i24/GATE_H0 ), 
    .D1(\driver_control/i24/SLICE_452/driver_control/i24/SLICE_452_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_mux_765_i8_SLICE_453 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/SLICE_453_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i8/SLICE_453_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/SLICE_453_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i8/SLICE_453_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i8/SLICE_453/i2c_slave_top/registers/mux_765_i8/SLICE_453_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i8/SLICE_453_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i7_SLICE_454 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/SLICE_454_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i7/SLICE_454_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/SLICE_454_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i7/SLICE_454_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i7/SLICE_454/i2c_slave_top/registers/mux_765_i7/SLICE_454_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i7/SLICE_454_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i6_SLICE_455 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/SLICE_455_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i6/SLICE_455_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/SLICE_455_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i6/SLICE_455_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i6/SLICE_455/i2c_slave_top/registers/mux_765_i6/SLICE_455_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i6/SLICE_455_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i5_SLICE_456 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/SLICE_456_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i5/SLICE_456_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/SLICE_456_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i5/SLICE_456_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i5/SLICE_456/i2c_slave_top/registers/mux_765_i5/SLICE_456_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i5/SLICE_456_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i3_SLICE_457 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/SLICE_457_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i3/SLICE_457_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/SLICE_457_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i3/SLICE_457_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i3/SLICE_457/i2c_slave_top/registers/mux_765_i3/SLICE_457_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i3/SLICE_457_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i2_SLICE_458 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/SLICE_458_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i2/SLICE_458_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/SLICE_458_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i2/SLICE_458_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i2/SLICE_458/i2c_slave_top/registers/mux_765_i2/SLICE_458_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i2/SLICE_458_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i8_SLICE_459 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/SLICE_459_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i8/SLICE_459_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/SLICE_459_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i8/SLICE_459_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i8/SLICE_459/i2c_slave_top/registers/mux_759_i8/SLICE_459_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i8/SLICE_459_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i7_SLICE_460 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/SLICE_460_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i7/SLICE_460_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/SLICE_460_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i7/SLICE_460_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i7/SLICE_460/i2c_slave_top/registers/mux_759_i7/SLICE_460_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i7/SLICE_460_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i6_SLICE_461 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/SLICE_461_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i6/SLICE_461_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/SLICE_461_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i6/SLICE_461_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i6/SLICE_461/i2c_slave_top/registers/mux_759_i6/SLICE_461_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i6/SLICE_461_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i5_SLICE_462 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/SLICE_462_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i5/SLICE_462_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/SLICE_462_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i5/SLICE_462_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i5/SLICE_462/i2c_slave_top/registers/mux_759_i5/SLICE_462_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i5/SLICE_462_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i4_SLICE_463 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/SLICE_463_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i4/SLICE_463_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/SLICE_463_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i4/SLICE_463_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i4/SLICE_463/i2c_slave_top/registers/mux_759_i4/SLICE_463_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i4/SLICE_463_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i3_SLICE_464 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/SLICE_464_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i3/SLICE_464_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/SLICE_464_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i3/SLICE_464_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i3/SLICE_464/i2c_slave_top/registers/mux_759_i3/SLICE_464_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i3/SLICE_464_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i2_SLICE_465 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/SLICE_465_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i2/SLICE_465_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/SLICE_465_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i2/SLICE_465_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i2/SLICE_465/i2c_slave_top/registers/mux_759_i2/SLICE_465_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i2/SLICE_465_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i8_SLICE_466 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/SLICE_466_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i8/SLICE_466_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/SLICE_466_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i8/SLICE_466_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i8/SLICE_466/i2c_slave_top/registers/mux_767_i8/SLICE_466_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i7_SLICE_467 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/SLICE_467_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i7/SLICE_467_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/SLICE_467_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i7/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i7/SLICE_467_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i7/SLICE_467/i2c_slave_top/registers/mux_767_i7/SLICE_467_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i6_SLICE_468 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/SLICE_468_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i6/SLICE_468_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/SLICE_468_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i6/SLICE_468_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i6/SLICE_468/i2c_slave_top/registers/mux_767_i6/SLICE_468_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i5_SLICE_469 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/SLICE_469_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i5/SLICE_469_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/SLICE_469_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i5/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i5/SLICE_469_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i5/SLICE_469/i2c_slave_top/registers/mux_767_i5/SLICE_469_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i4_SLICE_470 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/SLICE_470_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i4/SLICE_470_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/SLICE_470_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i4/SLICE_470_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i4/SLICE_470/i2c_slave_top/registers/mux_767_i4/SLICE_470_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i3_SLICE_471 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/SLICE_471_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i3/SLICE_471_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/SLICE_471_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i3/SLICE_471_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i3/SLICE_471/i2c_slave_top/registers/mux_767_i3/SLICE_471_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i2_SLICE_472 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/SLICE_472_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i2/SLICE_472_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/SLICE_472_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i2/SLICE_472_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i2/SLICE_472/i2c_slave_top/registers/mux_767_i2/SLICE_472_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_767_i1_SLICE_473 ( input C1, B1, A1, C0, B0, 
    A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/SLICE_473_K1_H1 
         , 
         \i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_767_i1/SLICE_473_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/SLICE_473_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_767_i1/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_767_i1/SLICE_473_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_767_i1/SLICE_473/i2c_slave_top/registers/mux_767_i1/SLICE_473_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_759_i1_SLICE_474 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/SLICE_474_K1_H1 
         , 
         \i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_759_i1/SLICE_474_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/SLICE_474_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_759_i1/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_759_i1/SLICE_474_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_759_i1/SLICE_474/i2c_slave_top/registers/mux_759_i1/SLICE_474_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_759_i1/SLICE_474_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_mux_765_i4_SLICE_475 ( input C1, B1, A1, C0, B0, 
    A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/SLICE_475_K1_H1 
         , 
         \i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/GATE_H0 
         ;

  lut40078 \i2c_slave_top/registers/mux_765_i4/SLICE_475_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/SLICE_475_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 \i2c_slave_top/registers/mux_765_i4/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/GATE_H0 )
    );
  selmux2 \i2c_slave_top/registers/mux_765_i4/SLICE_475_K0K1MUX ( 
    .D0(\i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/GATE_H0 )
    , 
    .D1(\i2c_slave_top/registers/mux_765_i4/SLICE_475/i2c_slave_top/registers/mux_765_i4/SLICE_475_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \i2c_slave_top/registers/mux_765_i4/SLICE_475_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7575_SLICE_476
   ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/GATE_H0 
         ;

  lut40077 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40126 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7575/SLICE_476_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7647_SLICE_477
   ( input C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/GATE_H0 
         ;

  lut40127 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40128 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7647/SLICE_477_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_i7573_SLICE_478
   ( input C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_K1_H1 
         , 
         \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/GATE_H0 
         ;

  lut40126 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_K1 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40078 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/GATE_H0 )
    );
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_K0K1MUX 
    ( 
    .D0(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/GATE_H0 )
    , 
    .D1(\i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478/i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7573/SLICE_478_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_i7599_SLICE_479 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \adc_control/i7599/SLICE_479/adc_control/i7599/SLICE_479_K1_H1 , 
         \adc_control/i7599/SLICE_479/adc_control/i7599/GATE_H0 ;

  lut40129 \adc_control/i7599/SLICE_479_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\adc_control/i7599/SLICE_479/adc_control/i7599/SLICE_479_K1_H1 ));
  lut40130 \adc_control/i7599/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\adc_control/i7599/SLICE_479/adc_control/i7599/GATE_H0 ));
  selmux2 \adc_control/i7599/SLICE_479_K0K1MUX ( 
    .D0(\adc_control/i7599/SLICE_479/adc_control/i7599/GATE_H0 ), 
    .D1(\adc_control/i7599/SLICE_479/adc_control/i7599/SLICE_479_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_480 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40131 \i2c_slave_top/registers/i7505_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40034 \i2c_slave_top/registers/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_481
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40132 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_3_lut_rep_109_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_3_lut_rep_120_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_482 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40075 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__bdd_3_lut_rep_192 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_110_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/force_trigger_count_d_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_483
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40135 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_112 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40136 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7528_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_484
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_28_i7_2_lut_rep_152_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2820_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_485 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40039 \driver_control/i2_2_lut_adj_171 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \driver_control/i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_486 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40022 \driver_control/i9_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 \driver_control/i5_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i19 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \driver_control/data_i0_i18 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_487 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40138 \i2c_slave_top/registers/i7472_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40139 \i2c_slave_top/registers/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0405) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_488 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/i2904_3_lut_rep_199 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40140 \i2c_slave_top/registers/i37_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC9C9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_489 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40034 \i2c_slave_top/registers/i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40075 \i2c_slave_top/registers/i7276_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_490 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40057 \i2c_slave_top/registers/i2_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \i2c_slave_top/registers/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_491 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40048 \i2c_slave_top/registers/i2908_rep_10_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \i2c_slave_top/registers/i7496_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_492 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40076 \i2c_slave_top/registers/i1_2_lut_rep_111_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i13 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_493 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40055 \i2c_slave_top/registers/i1_2_lut_rep_116_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \i2c_slave_top/registers/i1_3_lut_4_lut_adj_120 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0003 \i2c_slave_top/registers/cw_mon_current_limit_i5 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_494 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/i2920_3_lut_rep_205 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40142 \i2c_slave_top/registers/i21_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0003 \i2c_slave_top/registers/cw_mon_current_limit_i7 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_495 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40143 \i2c_slave_top/registers/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40110 \i2c_slave_top/registers/i7498_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_496 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \i2c_slave_top/registers/i2924_3_lut_rep_204 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40144 \i2c_slave_top/registers/i30_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3534) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_497 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40145 \i2c_slave_top/registers/i1_2_lut_3_lut_4_lut_adj_129 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 \i2c_slave_top/registers/i7014_2_lut_rep_133_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_498 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40032 \i2c_slave_top/registers/i1_2_lut_rep_117_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40146 \i2c_slave_top/registers/i7483_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_499 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40055 \i2c_slave_top/registers/i1_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \i2c_slave_top/registers/i1799_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i10 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_500 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40075 \i2c_slave_top/registers/i5_3_lut_rep_129 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40114 \i2c_slave_top/registers/i3_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_501 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40075 \i2c_slave_top/registers/i4662_2_lut_rep_134_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40145 \i2c_slave_top/registers/i7481_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_502 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40147 \i2c_slave_top/registers/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40076 \i2c_slave_top/registers/i1769_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_503 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40055 \i2c_slave_top/registers/i4_2_lut_rep_124_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \i2c_slave_top/registers/i7479_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_504 ( input D1, C1, B1, A1, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40069 \i2c_slave_top/registers/i1_2_lut_rep_105_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40041 \i2c_slave_top/registers/i1_2_lut_rep_181 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i15 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i14 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_505 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40022 \i2c_slave_top/registers/i15_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40016 \i2c_slave_top/registers/i3058_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_506 ( input B1, A1, D0, C0, B0, A0, M0, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40039 \i2c_slave_top/registers/i6_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \i2c_slave_top/registers/i14_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i1_2906_2907_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_507
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40148 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_51_i7_2_lut_rep_170_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7542_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h010B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_508
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40099 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_138_3_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7540_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_509
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40150 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_163_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7536_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_510
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40151 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n9251_bdd_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i6960_2_lut_rep_127_3_lut_4_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_511
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40152 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut_rep_132_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7534_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_512
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40153 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1140_2_lut_rep_145_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40154 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCDCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_513
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7538_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40155 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_89 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_514
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40148 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_122_3_lut_4_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40149 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_515
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40156 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2898_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i965_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_516 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40157 \reset_generator/i7565_3_lut_rep_193 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_201_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/force_trigger_count_d_i19 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B3B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_517
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/equal_52_i6_2_lut_rep_188 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40158 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7548_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h001F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_518 ( input B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4641_2_lut_rep_178 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40159 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/force_trigger_count_d_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_519
   ( input B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1433_2_lut_rep_213 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40160 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1045_2_lut_rep_119_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i1 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i0 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_520 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40089 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_4_lut_adj_114 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40091 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i23 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_521 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40161 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_115 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40034 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut_4_lut_4_lut_adj_95 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_522 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40162 \reset_generator/i1_2_lut_rep_173_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_211 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_523
   ( input D1, C1, B1, A1, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40163 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40041 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1069_2_lut_rep_212 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i3 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i2 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF700) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_524
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40034 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_143_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40164 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1539_3_lut_rep_108_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i5 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i4 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFE0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_SLICE_525 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40165 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_adj_118 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40166 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/TA_laser_disable_c_bdd_2_lut_7583_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/i2cslave_controller_top/filter_sda_inst/out_n_16 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_526
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40167 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i4712_2_lut_rep_186 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_527
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_126_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40168 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_4_lut_4_lut_adj_109 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCD00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_528 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40034 \adc_control/i1_2_lut_rep_113_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40039 \adc_control/i1_2_lut_rep_201 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_529 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \adc_control/i1_2_lut_rep_106_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40075 \adc_control/i1_2_lut_rep_161_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_530 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40169 \adc_control/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40075 \adc_control/i1_2_lut_rep_162_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFCE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module adc_control_SLICE_531 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40039 \adc_control/i2_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40098 \adc_control/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \adc_control/adc_voltage_data_temp_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_532 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40055 \adc_control/i2_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40079 \adc_control/i3_4_lut_adj_85 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_533 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \adc_control/i2_2_lut_adj_86 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \adc_control/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_control_SLICE_534 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \adc_control/i4_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40152 \adc_control/i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_535 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_190_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_198_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i16 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i15 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_536 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_192_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_200_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i18 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i17 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_537 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_195_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__I_0_202_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i10 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_538 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_194_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i21 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i20 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_539 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40034 \adc_control/i1_2_lut_3_lut_4_lut_adj_84 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40034 \adc_control/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \adc_control/adc_voltage_data_temp_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_540 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40143 \adc_control/i1_2_lut_rep_112_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40147 \adc_control/i1_2_lut_rep_107_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \adc_control/adc_voltage_data_temp_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_541 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40170 \driver_control/i1_2_lut_4_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40171 \driver_control/i7568_3_lut_rep_176 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6767) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2323) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_542 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40143 \i2c_slave_top/registers/addr_i_1__bdd_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40112 \i2c_slave_top/registers/i2_3_lut_rep_115 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i11 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i10 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_543 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_196_2_lut_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_191_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i12 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/force_trigger_count_d_i11 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_544
   ( input C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40172 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1064_3_lut_rep_171_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_210 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_545 ( input D1, C1, B1, A1, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40022 \i2c_slave_top/registers/i4_4_lut_adj_145 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40075 \i2c_slave_top/registers/i2_3_lut_rep_150 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i13 ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \i2c_slave_top/registers/drive_current_limit_i12 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_546 ( input C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40103 \i2c_slave_top/registers/i2_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40173 \i2c_slave_top/registers/i21_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i9 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/cw_mon_current_limit_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5858) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c_slave_top_registers_SLICE_547 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40075 \i2c_slave_top/registers/i4710_2_lut_rep_139_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \i2c_slave_top/registers/i2_3_lut_4_lut_adj_130 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c_slave_top/registers/drive_current_limit_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_548
   ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/n10091_bdd_4_lut_7646 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40036 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7558_2_lut_rep_140_4_lut_4_lut_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_549
   ( input C1, B1, A1, C0, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40174 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/count_i_3__N_127_I_0_i9_3_lut 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40175 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_3_lut 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i7 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/data_i__i6 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_550 ( input D1, C1, B1, A1, B0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40064 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut_rep_125_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_177 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \driver_control/ss_194 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0003 \driver_control/ldac_temp_d_216 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_551
   ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40041 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i137_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_552
   ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40176 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i1_2_lut_rep_142_3_lut_4_lut 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i301_2_lut_rep_144_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F1E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_553 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40018 \driver_control/i2_2_lut_adj_175 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \driver_control/i3_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_554 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  lut40072 \i2c_slave_top/registers/i3_4_lut_adj_135 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40069 \i2c_slave_top/registers/i1739_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0043 \i2c_slave_top/registers/addr_i_reg_i4_2918_2919_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_555 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40048 \i2c_slave_top/registers/mux_750_i7_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \i2c_slave_top/registers/mux_750_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_registers_SLICE_556 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40048 \i2c_slave_top/registers/mux_750_i4_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \i2c_slave_top/registers/mux_750_i6_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_557 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40074 \reset_generator/i1_2_lut_adj_88 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i2_2_lut ( 
    .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c_slave_top_i2cslave_controller_top_i2cslave_controller_u1_SLICE_558
   ( input C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40055 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i3_3_lut ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7280_2_lut 
    ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module driver_control_SLICE_559 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40039 \driver_control/i1_2_lut_adj_177 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \driver_control/i2_2_lut_adj_178 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module driver_control_SLICE_560 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40022 \driver_control/i7_4_lut_adj_176 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40039 \driver_control/i5_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \driver_control/data_i0_i17 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i16 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module adc_control_SLICE_561 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40079 \adc_control/i7489_2_lut_rep_169_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40177 \adc_control/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \adc_control/adc_voltage_data_temp_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \adc_control/adc_voltage_data_temp_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module driver_control_SLICE_562 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40039 \driver_control/i2_2_lut_adj_173 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \driver_control/i1_2_lut_adj_174 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \driver_control/data_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \driver_control/data_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_563 ( input B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40018 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/i7287_2_lut 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 
    \i2c_slave_top/i2cslave_controller_top/i2cslave_controller_u1/addr_i_7__N_587_I_0_197_2_lut_3_lut_4_lut 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \driver_control/force_trigger_count_d_i14 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \driver_control/force_trigger_count_d_i13 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module sda ( output PADDI, input PADDT, PADDO, inout sda );

  xo2iobuf sda_pad( .I(PADDO), .T(PADDT), .Z(PADDI), .PAD(sda), .PADI(sda));

  specify
    (PADDT => sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => sda) = (0:0:0,0:0:0);
    (sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge sda, 0:0:0);
    $width (negedge sda, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module scl ( output PADDI, input PADDO, inout scl );
  wire   VCCI;

  xo2iobuf0178 scl_pad( .I(PADDO), .T(VCCI), .Z(PADDI), .PAD(scl), .PADI(scl));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => scl) = (0:0:0,0:0:0);
    (scl => PADDI) = (0:0:0,0:0:0);
    $width (posedge scl, 0:0:0);
    $width (negedge scl, 0:0:0);
  endspecify

endmodule

module xo2iobuf0178 ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module TA_laser_disable ( input PADDO, output TA_laser_disable );
  wire   GNDI;

  xo2iobuf0179 TA_laser_disable_pad( .I(PADDO), .T(GNDI), 
    .PAD(TA_laser_disable));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_laser_disable) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0179 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module laser_disable_led_n ( input PADDO, output laser_disable_led_n );
  wire   GNDI;

  xo2iobuf0179 laser_disable_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(laser_disable_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => laser_disable_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_sck ( input PADDO, output adc_sck );
  wire   GNDI;

  xo2iobuf0179 adc_sck_pad( .I(PADDO), .T(GNDI), .PAD(adc_sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => adc_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module ldac_n ( input PADDO, output ldac_n );
  wire   GNDI;

  xo2iobuf0179 ldac_n_pad( .I(PADDO), .T(GNDI), .PAD(ldac_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ldac_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module ss ( input PADDO, output ss );
  wire   GNDI;

  xo2iobuf0179 ss_pad( .I(PADDO), .T(GNDI), .PAD(ss));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ss) = (0:0:0,0:0:0);
  endspecify

endmodule

module mosi ( input PADDO, output mosi );
  wire   GNDI;

  xo2iobuf0179 mosi_pad( .I(PADDO), .T(GNDI), .PAD(mosi));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => mosi) = (0:0:0,0:0:0);
  endspecify

endmodule

module sck ( input PADDO, output sck );
  wire   GNDI;

  xo2iobuf0179 sck_pad( .I(PADDO), .T(GNDI), .PAD(sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_convert ( input PADDO, output adc_convert );
  wire   GNDI;

  xo2iobuf0179 adc_convert_pad( .I(PADDO), .T(GNDI), .PAD(adc_convert));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => adc_convert) = (0:0:0,0:0:0);
  endspecify

endmodule

module temp_scl ( input PADDO, output temp_scl );
  wire   GNDI;

  xo2iobuf0179 temp_scl_pad( .I(PADDO), .T(GNDI), .PAD(temp_scl));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => temp_scl) = (0:0:0,0:0:0);
  endspecify

endmodule

module temp_sda ( input PADDO, output temp_sda );
  wire   GNDI;

  xo2iobuf0179 temp_sda_pad( .I(PADDO), .T(GNDI), .PAD(temp_sda));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => temp_sda) = (0:0:0,0:0:0);
  endspecify

endmodule

module cw_over_current_led_n ( input PADDO, output cw_over_current_led_n );
  wire   GNDI;

  xo2iobuf0179 cw_over_current_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(cw_over_current_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => cw_over_current_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module pwm_over_current_led_n ( input PADDO, output pwm_over_current_led_n );
  wire   GNDI;

  xo2iobuf0179 pwm_over_current_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(pwm_over_current_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pwm_over_current_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module heartbeat_n ( input PADDO, output heartbeat_n );
  wire   GNDI;

  xo2iobuf0179 heartbeat_n_pad( .I(PADDO), .T(GNDI), .PAD(heartbeat_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => heartbeat_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module cw_active_led_n ( input PADDO, output cw_active_led_n );
  wire   GNDI;

  xo2iobuf0179 cw_active_led_n_pad( .I(PADDO), .T(GNDI), .PAD(cw_active_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => cw_active_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module modulate_active_led_n ( input PADDO, output modulate_active_led_n );
  wire   GNDI;

  xo2iobuf0179 modulate_active_led_n_pad( .I(PADDO), .T(GNDI), 
    .PAD(modulate_active_led_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => modulate_active_led_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module mcu_gpio ( input PADDO, output mcu_gpio );
  wire   GNDI;

  xo2iobuf0179 mcu_gpio_pad( .I(PADDO), .T(GNDI), .PAD(mcu_gpio));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => mcu_gpio) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_spare1 ( input PADDO, output TA_spare1 );
  wire   GNDI;

  xo2iobuf0179 TA_spare1_pad( .I(PADDO), .T(GNDI), .PAD(TA_spare1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_spare1) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_spare2 ( input PADDO, output TA_spare2 );
  wire   GNDI;

  xo2iobuf0179 TA_spare2_pad( .I(PADDO), .T(GNDI), .PAD(TA_spare2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_spare2) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_spare3 ( input PADDO, output TA_spare3 );
  wire   GNDI;

  xo2iobuf0179 TA_spare3_pad( .I(PADDO), .T(GNDI), .PAD(TA_spare3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_spare3) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_spare4 ( input PADDO, output TA_spare4 );
  wire   GNDI;

  xo2iobuf0179 TA_spare4_pad( .I(PADDO), .T(GNDI), .PAD(TA_spare4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_spare4) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_gpio1 ( input PADDO, output TA_gpio1 );
  wire   GNDI;

  xo2iobuf0179 TA_gpio1_pad( .I(PADDO), .T(GNDI), .PAD(TA_gpio1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_gpio1) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_gpio2 ( input PADDO, output TA_gpio2 );
  wire   GNDI;

  xo2iobuf0179 TA_gpio2_pad( .I(PADDO), .T(GNDI), .PAD(TA_gpio2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_gpio2) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_gpio3 ( input PADDO, output TA_gpio3 );
  wire   GNDI;

  xo2iobuf0179 TA_gpio3_pad( .I(PADDO), .T(GNDI), .PAD(TA_gpio3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_gpio3) = (0:0:0,0:0:0);
  endspecify

endmodule

module TA_gpio4 ( input PADDO, output TA_gpio4 );
  wire   GNDI;

  xo2iobuf0179 TA_gpio4_pad( .I(PADDO), .T(GNDI), .PAD(TA_gpio4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TA_gpio4) = (0:0:0,0:0:0);
  endspecify

endmodule

module OPT_gpio1 ( input PADDO, output OPT_gpio1 );
  wire   GNDI;

  xo2iobuf0179 OPT_gpio1_pad( .I(PADDO), .T(GNDI), .PAD(OPT_gpio1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => OPT_gpio1) = (0:0:0,0:0:0);
  endspecify

endmodule

module OPT_gpio2 ( input PADDO, output OPT_gpio2 );
  wire   GNDI;

  xo2iobuf0179 OPT_gpio2_pad( .I(PADDO), .T(GNDI), .PAD(OPT_gpio2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => OPT_gpio2) = (0:0:0,0:0:0);
  endspecify

endmodule

module OPT_gpio3 ( input PADDO, output OPT_gpio3 );
  wire   GNDI;

  xo2iobuf0179 OPT_gpio3_pad( .I(PADDO), .T(GNDI), .PAD(OPT_gpio3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => OPT_gpio3) = (0:0:0,0:0:0);
  endspecify

endmodule

module OPT_gpio4 ( input PADDO, output OPT_gpio4 );
  wire   GNDI;

  xo2iobuf0179 OPT_gpio4_pad( .I(PADDO), .T(GNDI), .PAD(OPT_gpio4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => OPT_gpio4) = (0:0:0,0:0:0);
  endspecify

endmodule

module rstn ( output PADDI, input rstn );

  xo2iobuf0180 rstn_pad( .Z(PADDI), .PAD(rstn));

  specify
    (rstn => PADDI) = (0:0:0,0:0:0);
    $width (posedge rstn, 0:0:0);
    $width (negedge rstn, 0:0:0);
  endspecify

endmodule

module xo2iobuf0180 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module system_reset_n ( output PADDI, input system_reset_n );

  xo2iobuf0180 system_reset_n_pad( .Z(PADDI), .PAD(system_reset_n));

  specify
    (system_reset_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge system_reset_n, 0:0:0);
    $width (negedge system_reset_n, 0:0:0);
  endspecify

endmodule

module clk_25mhz ( output PADDI, input clk_25mhz );

  xo2iobuf0180 clk_25mhz_pad( .Z(PADDI), .PAD(clk_25mhz));

  specify
    (clk_25mhz => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk_25mhz, 0:0:0);
    $width (negedge clk_25mhz, 0:0:0);
  endspecify

endmodule

module TA_pos_pwr_good ( output PADDI, input TA_pos_pwr_good );

  xo2iobuf0180 TA_pos_pwr_good_pad( .Z(PADDI), .PAD(TA_pos_pwr_good));

  specify
    (TA_pos_pwr_good => PADDI) = (0:0:0,0:0:0);
    $width (posedge TA_pos_pwr_good, 0:0:0);
    $width (negedge TA_pos_pwr_good, 0:0:0);
  endspecify

endmodule

module TA_neg_pwr_good ( output PADDI, input TA_neg_pwr_good );

  xo2iobuf0180 TA_neg_pwr_good_pad( .Z(PADDI), .PAD(TA_neg_pwr_good));

  specify
    (TA_neg_pwr_good => PADDI) = (0:0:0,0:0:0);
    $width (posedge TA_neg_pwr_good, 0:0:0);
    $width (negedge TA_neg_pwr_good, 0:0:0);
  endspecify

endmodule

module TA_EE_shutdown ( output PADDI, input TA_EE_shutdown );

  xo2iobuf0180 TA_EE_shutdown_pad( .Z(PADDI), .PAD(TA_EE_shutdown));

  specify
    (TA_EE_shutdown => PADDI) = (0:0:0,0:0:0);
    $width (posedge TA_EE_shutdown, 0:0:0);
    $width (negedge TA_EE_shutdown, 0:0:0);
  endspecify

endmodule

module TA_OPT_shutdown ( output PADDI, input TA_OPT_shutdown );

  xo2iobuf0180 TA_OPT_shutdown_pad( .Z(PADDI), .PAD(TA_OPT_shutdown));

  specify
    (TA_OPT_shutdown => PADDI) = (0:0:0,0:0:0);
    $width (posedge TA_OPT_shutdown, 0:0:0);
    $width (negedge TA_OPT_shutdown, 0:0:0);
  endspecify

endmodule

module adc_sdo ( output PADDI, input adc_sdo );

  xo2iobuf0180 adc_sdo_pad( .Z(PADDI), .PAD(adc_sdo));

  specify
    (adc_sdo => PADDI) = (0:0:0,0:0:0);
    $width (posedge adc_sdo, 0:0:0);
    $width (negedge adc_sdo, 0:0:0);
  endspecify

endmodule

module cw_compared ( output PADDI, input cw_compared );

  xo2iobuf0180 cw_compared_pad( .Z(PADDI), .PAD(cw_compared));

  specify
    (cw_compared => PADDI) = (0:0:0,0:0:0);
    $width (posedge cw_compared, 0:0:0);
    $width (negedge cw_compared, 0:0:0);
  endspecify

endmodule

module pwm_compared ( output PADDI, input pwm_compared );

  xo2iobuf0180 pwm_compared_pad( .Z(PADDI), .PAD(pwm_compared));

  specify
    (pwm_compared => PADDI) = (0:0:0,0:0:0);
    $width (posedge pwm_compared, 0:0:0);
    $width (negedge pwm_compared, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
